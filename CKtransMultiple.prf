(CKtransMultiple
 (ckPreserves 0
  (ckPreserves-1 nil 3560774456 3560774559
   ("" (skolem 1 (am1 am2 "_" amt1 amt2))
    (("" (induct t)
      (("1" (lemma preprocessPreserves)
        (("1" (skolem 1 (n t))
          (("1" (flatten)
            (("1" (expand ckevaluation)
              (("1" (instantiate -1 (am1 am2 "(n,t)" amt1 amt2))
                (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma selectAssetsPreserves)
        (("2" (skolem 1 S)
          (("2" (expand ckevaluation)
            (("2" (instantiate -1 (am1 am2 S amt1 amt2))
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Transformations type-decl nil CKtransMultiple nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (\|> const-decl "bool" AssetMapping nil)
    (ckevaluation const-decl "AM" CKtransMultiple nil)
    (Transformations_induction formula-decl nil CKtransMultiple nil)
    (AssetIfdef type-eq-decl nil CKifdef nil)
    (preprocessPreserves formula-decl nil CKifdef nil)
    (AssetNames type-eq-decl nil CKselect nil)
    (selectAssetsPreserves formula-decl nil CKselect nil))
   103353 40 t shostak))
 (IMP_CKtrans_preserv_TCC1 0
  (IMP_CKtrans_preserv_TCC1-1 nil 3560774410 3560774426
   ("" (use ckPreserves) nil nil) proved
   ((ckPreserves formula-decl nil CKtransMultiple nil)) 5230 10 t nil)))

