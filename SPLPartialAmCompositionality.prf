(SPLPartialAMCompositionality
 (eval_TCC1 0
  (eval_TCC1-1 nil 3673792267 ("" (existence-tcc) nil nil) nil nil))
 (amPartialRefStrongDef_TCC1 0
  (amPartialRefStrongDef_TCC1-1 nil 3673779643
   ("" (subtype-tcc) nil nil) nil nil))
 (amPartialRefStrongDef 0
  (amPartialRefStrongDef-2 "" 3673859874
   ("" (skolem 1 (pl am2 anSet))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (expand prod)
            (("1" (bddsimp)
              (("1" (expand "^^")
                (("1" (flatten)
                  (("1" (lemma unusedAssets)
                    (("1" (inst -1 "A(pl)" "K(pl)" anSet c)
                      (("1" (lemma unusedAssets)
                        (("1" (inst -1 am2 "K(pl)" anSet c)
                          (("1" (bddsimp)
                            (("1" (expand amPartialRef)
                              (("1"
                                (lemma amRef)
                                (("1"
                                  (inst
                                   -1
                                   "filter(anSet,A(pl))"
                                   "filter(anSet,am2)")
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (inst -2 "K(pl)" c)
                                      (("1"
                                        (typepred pl)
                                        (("1"
                                          (expand wfPL)
                                          (("1"
                                            (inst -1 c)
                                            (("1"
                                              (replace -6 -1)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (replace -6 1)
                                                  (("1"
                                                    (replace -8 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma ckValidNames)
                              (("2"
                                (inst -1 "F(pl)" "A(pl)" "K(pl)" am2)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (inst -3 c)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (replace -4 1 RL)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (expand "^^")
            (("2" (skolem 1 c)
              (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (^^ const-decl "set[Conf]" SPLPartialAMCompositionality nil)
    (unusedAssets formula-decl nil SPLPartialAMCompositionality nil)
    (amRef formula-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapping type-eq-decl nil maps nil)
    (filter const-decl "mapping" maps nil)
    (amPartialRef const-decl "bool" SPLPartialRefinementCommon nil)
    (ckValidNames formula-decl nil SPLPartialAMCompositionality nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl "finite_sets[Asset].finite_set"
     SPLPartialAMCompositionality nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialAMCompositionality nil)
    (CK formal-type-decl nil SPLPartialAMCompositionality nil)
    (FM formal-type-decl nil SPLPartialAMCompositionality nil)
    (Conf formal-type-decl nil SPLPartialAMCompositionality nil)
    (AM type-eq-decl nil SPLPartialAMCompositionality nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset formal-type-decl nil SPLPartialAMCompositionality nil)
    (AssetName formal-type-decl nil SPLPartialAMCompositionality nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak)
  (amPartialRefStrongDef-1 nil 3673779802
   ("" (skolem 1 (pl am2 anSet))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (expand "^^")
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (lemma unusedAssets)
                  (("1" (copy -1)
                    (("1" (inst -1 "A(pl)" "K(pl)" anSet c)
                      (("1" (inst -2 am2 "K(pl)" anSet c)
                        (("1" (lemma sameDom)
                          (("1" (inst -1 "A(pl)" am2 "K(pl)" c)
                            (("1" (replace -1 -3 RL)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma amRef)
                                  (("1"
                                    (expand amPartialRef)
                                    (("1"
                                      (inst
                                       -1
                                       "filter(anSet,A(pl))"
                                       "filter(anSet,am2)")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (inst -2 "K(pl)" c)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (replace -6 1)
                                              (("1"
                                                (replace -7 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred pl)
                                              (("2"
                                                (expand wfPL)
                                                (("2"
                                                  (inst -1 c)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (replace -6 -2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (expand "^^")
            (("2" (skolem 1 c)
              (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^^ const-decl "set[Conf]" SPLPartialAMCompositionality nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (amPartialRef const-decl "bool" SPLPartialRefinementCommon nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapping type-eq-decl nil maps nil)
    (filter const-decl "mapping" maps nil)
    (amRef formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl "finite_sets[Asset].finite_set"
     SPLPartialAMCompositionality nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialAMCompositionality nil)
    (CK formal-type-decl nil SPLPartialAMCompositionality nil)
    (FM formal-type-decl nil SPLPartialAMCompositionality nil)
    (Conf formal-type-decl nil SPLPartialAMCompositionality nil)
    (AM type-eq-decl nil SPLPartialAMCompositionality nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset formal-type-decl nil SPLPartialAMCompositionality nil)
    (AssetName formal-type-decl nil SPLPartialAMCompositionality nil)
    (unusedAssets formula-decl nil SPLPartialAMCompositionality nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (fullCompStrongDef_TCC1 0
  (fullCompStrongDef_TCC1-1 nil 3673779643 ("" (subtype-tcc) nil nil)
   nil nil))
 (fullCompStrongDef 0
  (fullCompStrongDef-1 nil 3673857757
   ("" (skolem 1 (pl fm2 am2 ck2 anSet s u))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (lemma "ckWeakerEqStrongDef")
            (("1" (lemma amPartialRefStrongDef)
              (("1" (inst -1 pl am2 anSet)
                (("1" (expand prod)
                  (("1" (expand strongPartialRefinement)
                    (("1" (bddsimp)
                      (("1" (expand intersection)
                        (("1" (expand member)
                          (("1" (flatten)
                            (("1" (expand prod)
                              (("1"
                                (use assetRefinement)
                                (("1"
                                  (expand preorder?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand transitive?)
                                      (("1"
                                        (inst
                                         -2
                                         "([||](K(pl))(A(pl))(c))"
                                         "([||](K(pl))(am2)(c))"
                                         "([||](ck2)(am2)(c))")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (inst -6 c)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (inst
                                                 -8
                                                 "(# F := F(pl), A := am2, K := K(pl) #)"
                                                 ck2
                                                 u)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (inst -10 c)
                                                    (("1"
                                                      (bddsimp)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -6 c)
                                            (("2" (bddsimp) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (expand fmPartialRefinement)
            (("2" (skolem 1 c)
              (("2" (inst -1 c)
                (("2" (expand member)
                  (("2" (bddsimp)
                    (("2" (expand intersection)
                      (("2" (expand member) (("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand subset?)
          (("3" (skolem 1 c)
            (("3" (expand member)
              (("3" (expand intersection)
                (("3" (expand "^^")
                  (("3" (expand member) (("3" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (([\|\|] const-decl "finite_sets[Asset].finite_set"
     SPLPartialAMCompositionality nil)
    (AM type-eq-decl nil SPLPartialAMCompositionality nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK formal-type-decl nil SPLPartialAMCompositionality nil)
    (AssetName formal-type-decl nil SPLPartialAMCompositionality nil)
    (Asset formal-type-decl nil SPLPartialAMCompositionality nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialAMCompositionality nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM formal-type-decl nil SPLPartialAMCompositionality nil)
    (Conf formal-type-decl nil SPLPartialAMCompositionality nil)
    (ckWeakerEqStrongDef formula-decl nil SPLPartialRefinementStrong
     nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (intersection const-decl "set" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (am2 skolem-const-decl "AM" SPLPartialAMCompositionality nil)
    (pl skolem-const-decl
     "PL[Conf, FM, Asset, AssetName, CK, {||}, [||]]"
     SPLPartialAMCompositionality nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (member const-decl "bool" sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (amPartialRefStrongDef formula-decl nil
     SPLPartialAMCompositionality nil)
    (fmPartialRefinement const-decl "bool" SPLPartialRefinementCommon
     nil)
    (subset? const-decl "bool" sets nil)
    (^^ const-decl "set[Conf]" SPLPartialAMCompositionality nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (changeAssetIsAmPartRef 0
  (changeAssetIsAmPartRef-1 nil 3673981018
   ("" (skolem 1 (am1 am2 pairs a1 a2 an))
    (("" (bddsimp)
      (("" (use assetRefinement)
        (("" (expand preorder?)
          (("" (flatten)
            (("" (expand reflexive?)
              (("" (expand syntaxChangeAsset)
                (("" (flatten)
                  (("" (expand amPartialRef)
                    (("" (expand "|>")
                      (("" (bddsimp)
                        (("1" (skolem 1 an1)
                          (("1" (bddsimp)
                            (("1" (expand dom)
                              (("1"
                                (skolem -5 a3)
                                (("1"
                                  (expand filter)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand domain)
                                      (("1"
                                        (skolem -6 a4)
                                        (("1"
                                          (inst 1 a4 a4)
                                          (("1"
                                            (inst
                                             -1
                                             "singleton[Asset](a4)")
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand ow)
                                                (("1"
                                                  (decompose-equality)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(an1,a4)")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           union)
                                                          (("1"
                                                            (expand
                                                             member)
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           union)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (expand
                                                                 rm)
                                                                (("2"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 1 a4)
                                                nil
                                                nil)
                                               ("3"
                                                (expand ow)
                                                (("3"
                                                  (decompose-equality)
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "(an1,a4)")
                                                    (("3"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand union)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand union)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               rm)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand dom)
                          (("2" (decompose-equality 1)
                            (("2" (bddsimp)
                              (("1"
                                (skolem -1 a3)
                                (("1"
                                  (expand filter)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand domain)
                                      (("1"
                                        (skolem -2 a4)
                                        (("1"
                                          (inst 1 a4)
                                          (("1"
                                            (bddsimp)
                                            (("1" (inst 1 a4) nil nil)
                                             ("2"
                                              (expand ow)
                                              (("2"
                                                (decompose-equality -6)
                                                (("2"
                                                  (inst -1 "(x!1,a4)")
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand union)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand union)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (expand rm)
                                                            (("2"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 a3)
                                (("2"
                                  (expand filter)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand domain)
                                      (("2"
                                        (skolem -2 a4)
                                        (("2"
                                          (inst 1 a4)
                                          (("2"
                                            (bddsimp)
                                            (("1" (inst 1 a4) nil nil)
                                             ("2"
                                              (expand ow)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (inst -1 "(x!1,a4)")
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand union)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand union)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (expand rm)
                                                            (("2"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (\|> const-decl "bool" SPLrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (filter const-decl "mapping" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (rm const-decl "mapping" maps nil)
    (union const-decl "set" sets nil)
    (mapping type-eq-decl nil maps nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (ow const-decl "mapping" maps nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (amPartialRef const-decl "bool" SPLPartialRefinementCommon nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialAMCompositionality
     nil)
    ([\|\|] const-decl "finite_sets[Asset].finite_set"
     SPLPartialAMCompositionality nil)
    (AM type-eq-decl nil SPLPartialAMCompositionality nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialAMCompositionality nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK formal-type-decl nil SPLPartialAMCompositionality nil)
    (AssetName formal-type-decl nil SPLPartialAMCompositionality nil)
    (Asset formal-type-decl nil SPLPartialAMCompositionality nil)
    (FM formal-type-decl nil SPLPartialAMCompositionality nil)
    (Conf formal-type-decl nil SPLPartialAMCompositionality nil)
    (assetRefinement formula-decl nil SPLrefinement nil))
   shostak))
 (changeAssetStrongPartialRef_TCC1 0
  (changeAssetStrongPartialRef_TCC1-1 nil 3673966847
   ("" (subtype-tcc) nil nil) nil nil))
 (changeAssetStrongPartialRef 0
  (changeAssetStrongPartialRef-1 nil 3673966848
   ("" (lemma changeAssetIsAmPartRef)
    (("" (skolem 1 (pl am2 pairs a1 a2 an s))
      (("" (expand "<>")
        (("" (bddsimp)
          (("" (inst -1 "A(pl)" am2 pairs a1 a2 an)
            (("" (bddsimp)
              (("" (lemma amPartialRefStrongDef)
                (("" (inst -1 pl am2 "domain(rm(an,pairs))")
                  (("" (expand amPartialRef)
                    (("" (bddsimp)
                      (("" (expand strongPartialRefinement)
                        (("" (decompose-equality -6)
                          (("" (bddsimp)
                            (("1" (skolem 1 c)
                              (("1"
                                (inst -1 c)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (inst -8 c)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand "^^")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (lemma evalPreservesDom)
                                            (("1"
                                              (inst
                                               -1
                                               "A(pl)"
                                               "K(pl)"
                                               c)
                                              (("1"
                                                (expand subset?)
                                                (("1"
                                                  (skolem 1 an2)
                                                  (("1"
                                                    (inst -1 an2)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (expand
                                                           syntaxChangeAsset)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               ow)
                                                              (("1"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (expand
                                                                     domain)
                                                                    (("1"
                                                                      (skolem
                                                                       -4
                                                                       a3)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "(an2,a3)")
                                                                        (("1"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (expand
                                                                             dom)
                                                                            (("1"
                                                                              (expand
                                                                               union)
                                                                              (("1"
                                                                                (expand*
                                                                                 singleton
                                                                                 member)
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -13)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -11)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -11)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -3
                                                                                           a4)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "(an,a4)")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   a4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     rm)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -11)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         dom)
                                                                                                        (("1"
                                                                                                          (bddsimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             remove)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               member)
                                                                                                              (("1"
                                                                                                                (bddsimp)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   map)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     singleton)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   a4)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (inst
                                                                                                   1
                                                                                                   a4)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     1
                                                                                     a3)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             union)
                                                                            (("2"
                                                                              (expand
                                                                               member)
                                                                              (("2"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   singleton)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "(an2,a3)")
                                                                                      (("1"
                                                                                        (bddsimp)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           2)
                                                                                          (("1"
                                                                                            (inst
                                                                                             2
                                                                                             a3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               rm)
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -13)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "(an2,a3)")
                                                                                  (("2"
                                                                                    (bddsimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       2
                                                                                       a3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         rm)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand subset?)
                              (("2"
                                (skolem 1 c)
                                (("2"
                                  (expand member)
                                  (("2"
                                    (inst -1 c)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rm const-decl "mapping" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (eval const-decl "AM" SPLPartialAMCompositionality nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialAMCompositionality
     nil)
    (ow const-decl "mapping" maps nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (\|> const-decl "bool" SPLrefinement nil)
    (filter const-decl "mapping" maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (singleton_elt const-decl "T" sets nil)
    (remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (evalPreservesDom formula-decl nil SPLPartialAMCompositionality
     nil)
    (^^ const-decl "set[Conf]" SPLPartialAMCompositionality nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (amPartialRef const-decl "bool" SPLPartialRefinementCommon nil)
    (amPartialRefStrongDef formula-decl nil
     SPLPartialAMCompositionality nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl "finite_sets[Asset].finite_set"
     SPLPartialAMCompositionality nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialAMCompositionality nil)
    (CK formal-type-decl nil SPLPartialAMCompositionality nil)
    (FM formal-type-decl nil SPLPartialAMCompositionality nil)
    (Conf formal-type-decl nil SPLPartialAMCompositionality nil)
    (AM type-eq-decl nil SPLPartialAMCompositionality nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset formal-type-decl nil SPLPartialAMCompositionality nil)
    (AssetName formal-type-decl nil SPLPartialAMCompositionality nil)
    (<> const-decl "set[Conf]" SPLPartialAMCompositionality nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (changeAssetIsAmPartRef formula-decl nil
     SPLPartialAMCompositionality nil))
   shostak)))

