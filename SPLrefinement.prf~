(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3498492438 3499097837 ("" (grind) nil nil) unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   162 40 t shostak))
 (refFM 0
  (refFM-1 nil 3498492442 3499097837 ("" (grind) nil nil) unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   217 60 t shostak))
 (amRefCompositional 0
  (amRefCompositional-1 nil 3506978924 3506979190
   ("" (skolem 1 (A1 A2))
    (("" (expand "|>")
      (("" (flatten)
        ((""
          (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
          (("1" (bddsimp)
            (("1" (skolem 1 ans)
              (("1" (flatten)
                (("1"
                  (case "EXISTS(an:AssetName): ans(an) and dom(A1)(an)")
                  (("1" (skolem -1 an)
                    (("1" (flatten)
                      (("1"
                        (lemma sets_lemmas[AssetName].nonempty_member)
                        (("1" (expand member)
                          (("1" (instantiate -1 ans)
                            (("1" (expand nonempty?)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   set_aux_lemmas[AssetName].setMember)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (instantiate -1 (ans an))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 ans2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (instantiate -5 ans2)
                                              (("2"
                                                (lemma
                                                 set_aux_lemmas[AssetName].cardUnion)
                                                (("2"
                                                  (expand member)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (an ans2))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem 3 a)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (instantiate
                                                             -9
                                                             an)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "maps[AssetName,Asset].mapAM")
                                                                (("2"
                                                                  (instantiate
                                                                   -1
                                                                   (A1
                                                                    an
                                                                    ans2))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem
                                                                       -10
                                                                       (a1
                                                                        a2))
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           ax)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               A1)
                                                                              (("2"
                                                                                (expand
                                                                                 unique
                                                                                 -2)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   -2
                                                                                   (an
                                                                                    a1
                                                                                    ax))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -4
                                                                                       RL)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 266912 530 t shostak))
 (eqCK 0
  (eqCK-1 nil 3498492449 3499097837 ("" (grind) nil nil) unfinished
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   101 30 t shostak))
 (plRef 0
  (plRef-1 nil 3498493452 3499097837
   ("" (expand preorder?)
    (("" (expand reflexive?)
      (("" (expand transitive?)
        (("" (expand plRefinement)
          (("" (bddsimp)
            (("1" (use assetRefinement)
              (("1" (expand preorder?)
                (("1" (expand transitive?)
                  (("1" (flatten)
                    (("1" (copy -2)
                      (("1" (skolem 1 (x y z))
                        (("1" (flatten)
                          (("1" (skolem 1 c1)
                            (("1" (flatten)
                              (("1"
                                (instantiate -4 c1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -4 c2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -6 c2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skolem -6 c3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 1 c3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     ("([||](K(x))(A(x))(c1))"
                                                      "([||](K(y))(A(y))(c2))"
                                                      "([||](K(z))(A(z))(c3))"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 x)
              (("2" (skolem 1 c)
                (("2" (flatten)
                  (("2" (instantiate 1 c)
                    (("2" (assert)
                      (("2" (use assetRefinement)
                        (("2" (expand preorder?)
                          (("2" (expand reflexive?)
                            (("2" (flatten)
                              (("2"
                                (instantiate
                                 -1
                                 "([||](K(x))(A(x))(c))")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   98 50 t shostak))
 (popCompositional 0
  (popCompositional-1 nil 3579892226 3579892322
   ("" (skolem 1 (pl1 pl2 pop))
    (("" (expand popRefinement)
      (("" (flatten)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (expand* products union singleton member)
              (("" (skolem -2 spl1)
                (("" (flatten)
                  (("" (expand products) (("" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 96633 40 t shostak))
 (rem_TCC1 0
  (rem_TCC1-1 nil 3580146675 3580217646
   ("" (instantiate 1 "LAMBDA(p:PL,m:MPL):m") (("" (propax) nil nil))
    nil)
   unchecked
   ((MPL type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil))
   42 0 t nil))
 (pls_TCC1 0
  (pls_TCC1-1 nil 3580203621 3580217647 ("" (subtype-tcc) nil nil)
   unfinished nil 1363 210 nil nil))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3580203621 3580217648 ("" (subtype-tcc) nil nil)
   unfinished nil 523 290 nil nil))
 (product_TCC1 0
  (product_TCC1-1 nil 3580199137 3580217648 ("" (subtype-tcc) nil nil)
   unfinished nil 235 180 nil nil))
 (productUnion 0
  (productUnion-1 nil 3580199141 3580200796
   ("" (skolem 1 (pc pcs))
    (("" (expand* product union singleton member)
      (("" (decompose-equality 1)
        (("" (bddsimp)
          (("1" (skolem -1 pair)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (instantiate 1 pc) (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skolem -1 pair)
            (("2" (flatten)
              (("2" (instantiate 1 pair) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (skolem -1 pair)
            (("3" (instantiate 1 pair)
              (("3" (instantiate 2 pair) (("3" (bddsimp) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   135763 40 t shostak))
 (prodRef 0
  (prodRef-1 nil 3580200970 3580201013
   ("" (lemma asRefCompositional)
    (("" (skolem 1 (pc1 pc2 pcs))
      (("" (flatten)
        ((""
          (instantiate -1
           ("product(singleton(pc1))" "product(singleton(pc2))"
            "product(pcs)"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (asRefCompositional formula-decl nil SPLrefinement nil))
   43234 30 t shostak))
 (notInMPL 0
  (notInMPL-1 nil 3580217667 3580217788
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (expand member)
        (("" (lemma confsRestriction)
          (("" (skolem 2 pcs)
            (("" (flatten)
              (("" (instantiate -1 (mpl pcs))
                (("" (assert)
                  (("" (expand pls)
                    (("" (skolem -3 pc)
                      (("" (flatten)
                        (("" (instantiate -1 pc)
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((confsRestriction formula-decl nil SPLrefinement nil)
    (MPL type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (member const-decl "bool" SPLrefinement nil))
   120683 20 t shostak))
 (plInMPL 0
  (plInMPL-1 nil 3580221199 3580221460
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (skolem -2 pcs)
        (("" (expand member)
          (("" (flatten)
            (("" (expand* semantics products subset? member)
              (("" (instantiate 1 ("product(pcs)" "_"))
                (("" (expand pls)
                  (("" (skolem -3 pc)
                    (("" (flatten)
                      (("" (instantiate 1 "prod(pc)")
                        (("" (expand* prod product)
                          (("" (bddsimp)
                            (("1" (skolem 1 x)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand prod)
                                  (("1"
                                    (instantiate 1 pc)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (instantiate 1 "conf(pc)")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma confsRestriction)
                                  (("2"
                                    (instantiate -1 (mpl pcs))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (instantiate -1 pc)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (instantiate 1 pcs)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((MPL type-decl nil SPLrefinement nil)
    (confsRestriction formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (semantics const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (member const-decl "bool" SPLrefinement nil))
   47262 40 t shostak))
 (plPCS 0
  (plPCS-1 nil 3580323616 3580328969
   ("" (skolem 1 mpl)
    (("" (skolem 1 pcs)
      (("" (lemma confsRestriction)
        (("" (flatten)
          (("" (expand member)
            (("" (skolem 1 pl)
              (("" (flatten)
                (("" (expand pls -3)
                  (("" (skolem -3 pc)
                    (("" (instantiate -1 (mpl pcs))
                      (("" (assert)
                        (("" (instantiate -1 pc)
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (instantiate 1 (pc "remove(pl,pcs)"))
                                ((""
                                  (flatten)
                                  ((""
                                    (bddsimp)
                                    (("1"
                                      (expand pls)
                                      (("1"
                                        (expand* remove member)
                                        (("1"
                                          (skolem -6 pcc)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand*
                                       remove
                                       union
                                       singleton
                                       member)
                                      (("2"
                                        (decompose-equality 2)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (instantiate 2 x!1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (remove const-decl "finite_sets[PC].finite_set" SPLrefinement nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (MPL type-decl nil SPLrefinement nil)
    (member const-decl "bool" SPLrefinement nil)
    (confsRestriction formula-decl nil SPLrefinement nil))
   179736 70 t shostak))
 (mplRefPL 0
  (mplRefPL-1 nil 3580329650 3580330427
   ("" (skolem 1 (mpl pl1 pl2))
    (("" (flatten)
      (("" (skolem 1 pcs1)
        (("" (flatten)
          (("" (lemma plPCS)
            (("" (instantiate -1 (mpl pcs1))
              (("" (assert)
                (("" (instantiate -1 pl1)
                  (("" (assert)
                    (("" (skolem -1 (pc S))
                      (("" (flatten)
                        (("" (expand plRefinement)
                          (("" (typepred pc)
                            (("" (instantiate -4 "conf(pc)")
                              ((""
                                (assert)
                                ((""
                                  (skolem -4 c2)
                                  ((""
                                    (flatten)
                                    ((""
                                      (expand member)
                                      ((""
                                        (replace -2 2)
                                        ((""
                                          (instantiate
                                           2
                                           "union(singleton[PC]((# pl:=pl2, conf:=c2 #)),S)")
                                          (("1"
                                            (lemma prodRef)
                                            (("1"
                                              (instantiate
                                               -1
                                               (pc
                                                "(# pl := pl2, conf := c2 #)"
                                                S))
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (lemma productUnion)
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       (pc S))
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (instantiate
                                                           -2
                                                           ("(# pl := pl2, conf := c2 #)"
                                                            S))
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (expand product 1)
                                                  (("3"
                                                    (expand singleton)
                                                    (("3"
                                                      (expand prod)
                                                      (("3"
                                                        (case
                                                         "([||](K(pl1))(A(pl1))(conf(pc)))={p: Asset |
           EXISTS (pc_1: PC):
             pc_1 = pc AND [||](K(pl(pc_1)))(A(pl(pc_1)))(conf(pc_1))(p)} AND ([||](K(pl2))(A(pl2))(c2))={p: Asset |
            EXISTS (pc):
              pc = (# pl := pl2, conf := c2 #) AND
               [||](K(pl(pc)))(A(pl(pc)))(conf(pc))(p)}")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (bddsimp)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (instantiate
                                                                 1
                                                                 "(# pl := pl2, conf := c2 #)")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skolem
                                                                 -1
                                                                 lala)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (instantiate
                                                                 1
                                                                 pc)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skolem
                                                                 -1
                                                                 p)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -5)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 502403 270 t shostak))
 (plNotInMPL 0
  (plNotInMPL-1 nil 3580221516 3580327605
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (expand member)
        (("" (expand pls)
          (("" (skolem -2 (P sp))
            (("" (expand semantics)
              (("" (flatten)
                (("" (skolem -2 pcs)
                  (("" (expand member)
                    (("" (flatten)
                      (("" (lemma confsRestriction)
                        (("" (instantiate -1 (mpl pcs))
                          (("" (assert)
                            (("" (instantiate 1 pcs)
                              ((""
                                (assert)
                                ((""
                                  (expand products)
                                  ((""
                                    (expand subset?)
                                    ((""
                                      (expand member)
                                      ((""
                                        (skolem -5 c)
                                        ((""
                                          (flatten)
                                          (("" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 378340 240 t shostak))
 (plNotInConfsMPL 0
  (plNotInConfsMPL-1 nil 3580326159 3580327797
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (expand member)
        (("" (expand pls)
          (("" (skolem 1 pcs)
            (("" (flatten)
              (("" (instantiate -2 pcs)
                (("" (assert)
                  (("" (lemma removePLfromMPL)
                    (("" (instantiate -1 (pl mpl))
                      (("" (assert)
                        (("" (lemma notInMPL)
                          (("" (instantiate -1 ("rem(pl,mpl)" pl))
                            (("" (assert)
                              ((""
                                (expand member)
                                ((""
                                  (expand pls)
                                  ((""
                                    (assert)
                                    ((""
                                      (instantiate -1 pcs)
                                      ((""
                                        (assert)
                                        ((""
                                          (bddsimp)
                                          (("" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 189215 40 t shostak))
 (mplRef 0
  (mplRef-1 nil 3580203626 3580326911
   ("" (expand* preorder? reflexive? transitive? mplRefinement)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 pcs1)
            (("1" (flatten)
              (("1" (instantiate -1 pcs1)
                (("1" (assert)
                  (("1" (skolem -1 pcs2)
                    (("1" (flatten)
                      (("1" (instantiate -3 pcs2)
                        (("1" (assert)
                          (("1" (skolem -3 pcs3)
                            (("1" (flatten)
                              (("1"
                                (instantiate 1 pcs3)
                                (("1"
                                  (use assetRefinement)
                                  (("1"
                                    (expand* preorder? transitive?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate
                                         -2
                                         ("product(pcs1)"
                                          "product(pcs2)"
                                          "product(pcs3)"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 pcs)
          (("2" (flatten)
            (("2" (instantiate 1 pcs)
              (("2" (use assetRefinement)
                (("2" (expand* preorder? reflexive?)
                  (("2" (flatten)
                    (("2" (instantiate -1 "product(pcs)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (mplRefinement const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   4899 0 t shostak))
 (mplRefi 0
  (mplRefi-1 nil 3580326732 3580326755
   ("" (expand* preorder? reflexive? transitive? mplRefinementAlt)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 p1)
            (("1" (flatten)
              (("1" (instantiate -1 p1)
                (("1" (assert)
                  (("1" (skolem -1 p2)
                    (("1" (flatten)
                      (("1" (instantiate -3 p2)
                        (("1" (assert)
                          (("1" (skolem -3 p3)
                            (("1" (flatten)
                              (("1"
                                (instantiate 1 p3)
                                (("1"
                                  (use assetRefinement)
                                  (("1"
                                    (expand* preorder? transitive?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -2 (p1 p2 p3))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 p)
          (("2" (use assetRefinement)
            (("2" (expand* preorder? reflexive?)
              (("2" (flatten)
                (("2" (instantiate -1 p)
                  (("2" (instantiate 1 p) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (mplRefinementAlt const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   22883 30 t shostak))
 (mplCompositional 0
  (mplCompositional-1 nil 3580220697 3580329211
   ("" (skolem 1 (pl1 pl2 mpl))
    (("" (flatten)
      (("" (expand* plRefinement mplRefinement)
        (("" (skolem 1 pcs1)
          (("" (flatten)
            (("" (case "member(pl1,pcs1)")
              (("1" (lemma plPCS)
                (("1" (instantiate -1 (mpl pcs1))
                  (("1" (assert)
                    (("1" (instantiate -1 pl1)
                      (("1" (assert)
                        (("1" (expand member)
                          (("1" (skolem -1 (pc S))
                            (("1" (flatten)
                              (("1"
                                (expand pls 1)
                                (("1" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma plNotInConfsMPL)
                (("2" (instantiate -1 (mpl pl1))
                  (("2" (assert)
                    (("2" (bddsimp)
                      (("1" (instantiate -1 pcs1)
                        (("1" (assert)
                          (("1" (lemma confsAddPLtoMPL)
                            (("1"
                              (instantiate -1
                               (pl2 "rem(pl1,mpl)" pcs1))
                              (("1"
                                (assert)
                                (("1"
                                  (instantiate 2 pcs1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use assetRefinement)
                                      (("1"
                                        (expand* preorder? reflexive?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate
                                             -1
                                             "product(pcs1)")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand member)
                        (("2" (skolem 1 pcss)
                          (("2" (flatten)
                            (("2" (expand pls)
                              (("2" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 220640 100 t shostak))
 (mplCompositionalAlt 0
  (mplCompositionalAlt-1 nil 3580326914 3580327095
   ("" (skolem 1 (pl1 pl2 mpl))
    (("" (expand* plRefinementAlt mplRefinementAlt)
      (("" (flatten)
        (("" (skolem 1 P1)
          (("" (flatten)
            (("" (expand semantics -3)
              (("" (expand member)
                (("" (skolem -3 pcs)
                  (("" (flatten)
                    (("" (case "member(pl1,pcs)")
                      (("1" (expand member)
                        (("1" (expand pls -1)
                          (("1" (postpone) nil nil)) nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 181377 30 t shostak))
 (weakFMcompositionality 0
  (weakFMcompositionality-3 nil 3498493637 3499097837
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand plRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   92 20 t nil)
  (weakFMcompositionality-2 nil 3498242341 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand splRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   36 20 t nil)
  (weakFMcompositionality-1 nil 3496055293 3496154047
   ("" (skolem 1 (pl F))
    (("" (expand "|=")
      (("" (expand splRefinement)
        (("" (flatten)
          (("" (skolem 1 c1)
            (("" (flatten)
              (("" (instantiate 1 c1)
                (("" (instantiate -1 c1)
                  (("" (assert)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1
                               "([||](K(pl))(A(pl))(c1))")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil))
   20 20 t shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3493396281 3580217648
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   93 30 nil nil))
 (fmEquivalenceCompositionality 0
  (fmEquivalenceCompositionality-3 nil 3498493705 3499097838
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs plRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   45 30 t nil)
  (fmEquivalenceCompositionality-2 nil 3488033545 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs splRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   35 10 t nil)
  (fmEquivalenceCompositionality-1 nil 3484508353 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentFMs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -3 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -1 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   42 20 t shostak))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3493396281 3580217648
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   51 10 nil nil))
 (ckEquivalenceCompositionality 0
  (ckEquivalenceCompositionality-4 nil 3498493784 3499097838
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs plRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   43 20 t nil)
  (ckEquivalenceCompositionality-3 nil 3498311205 3498493765
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-2 nil 3488033595 3496154047
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfSPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-1 nil 3484508370 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentCKs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -1 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -3 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   16 10 t shostak))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3579886394 3580217648
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (Conf type-decl nil SPLrefinement nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   69 40 nil nil))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3493396281 3580217648
   ("" (skolem 1 (pl am A))
    (("" (flatten)
      (("" (skolem 1 pl2)
        (("" (flatten)
          (("" (lemma amRef)
            (("" (instantiate -1 (A am))
              (("" (assert)
                (("" (typepred pl)
                  (("" (expand wfPL)
                    (("" (replace -5)
                      (("" (assert)
                        (("" (skolem 1 c)
                          (("" (flatten)
                            (("" (instantiate -2 ("K(pl)" c))
                              ((""
                                (instantiate -1 c)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil))
   43 20 t nil))
 (amRefinementCompositionality 0
  (amRefinementCompositionality-3 nil 3498493721 3499097838
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* plRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   74 40 t nil)
  (amRefinementCompositionality-2 nil 3498311229 3498493433
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* splRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   44 20 t nil)
  (amRefinementCompositionality-1 nil 3484508386 3496154047
   ("" (skolem 1 (pl A))
    (("" (flatten)
      (("" (expand* splRefinement wfSPL)
        (("" (lemma amRef)
          (("" (instantiate -1 ("A(pl)" A))
            (("" (assert)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (instantiate -1 ("K(pl)" c))
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (typepred pl)
                          (("1" (expand wfSPL)
                            (("1" (instantiate -1 c)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 c)
                  (("2" (flatten)
                    (("2" (instantiate 1 c)
                      (("2" (assert)
                        (("2" (instantiate -1 ("K(pl)" c))
                          (("2" (bddsimp -1)
                            (("1" (propax) nil nil)
                             ("2" (typepred pl)
                              (("2"
                                (expand wfSPL)
                                (("2"
                                  (instantiate -1 c)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   50 20 t shostak))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3493396281 3580217648
   ("" (skolem 1 (pl fm am ck F))
    (("" (flatten)
      (("" (skolem 1 K)
        (("" (flatten)
          (("" (skolem 1 A)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (typepred pl)
                    (("" (expand wfPL)
                      (("" (replace -8)
                        (("" (assert)
                          (("" (expand* equivalentFMs equivalentCKs)
                            (("" (lemma amRef)
                              ((""
                                (instantiate -1 (A am))
                                ((""
                                  (assert)
                                  ((""
                                    (skolem 1 c)
                                    ((""
                                      (flatten)
                                      ((""
                                        (instantiate -2 c)
                                        ((""
                                          (instantiate -1 (K c))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((amRef formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   43 20 t nil))
 (fullCompositionality 0
  (fullCompositionality-6 nil 3498493744 3499097838
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRef)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   166 60 t nil)
  (fullCompositionality-5 nil 3498311958 3498493433
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   87 40 t nil)
  (fullCompositionality-4 nil 3488035773 3498311948
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand extend)
                                                    ((""
                                                      (instantiate
                                                       -3
                                                       (pl
                                                        "(# F := fm, A := A(pl), K := ck #)"
                                                        "(# F := fm, A := am, K := ck #)"))
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   4450 100 t nil)
  (fullCompositionality-3 nil 3488035651 3488035738
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 85496 190 t nil)
  (fullCompositionality-2 nil 3488035274 3488035629
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                    "((([||](K(pl1)))(A(pl1)))(c2))"
                                                                    "((([||](K(pl1)))(A(pl2)))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                        "((([||](K(pl2)))(A(pl1)))(c3))"
                                                                        "((([||](K(pl2)))(A(pl2)))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 88620 260 t nil)
  (fullCompositionality-1 nil 3484508425 3488035102
   ("" (skolem 1 (pl1 pl2))
    (("" (lemma fmEquivalenceCompositionality)
      (("" (lemma ckEquivalenceCompositionality)
        (("" (lemma amRefinementCompositionality)
          ((""
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("map(A(pl1), [||](K(pl1))(c))"
                                                                    "map(A(pl1), [||](K(pl1))(c2))"
                                                                    "map(A(pl1), [||](K(pl2))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("map(A(pl1), [||](K(pl1))(c))"
                                                                        "map(A(pl1), [||](K(pl2))(c3))"
                                                                        "map(A(pl2), [||](K(pl2))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   18369 220 t shostak))
 (weakFullCompositionality 0
  (weakFullCompositionality-2 nil 3498493759 3499098501
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := am, K := ck #)"
                                  fm))
                                ((""
                                  (assert)
                                  ((""
                                    (use plRef)
                                    ((""
                                      (expand preorder?)
                                      ((""
                                        (expand transitive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (copy -2)
                                            ((""
                                              (instantiate
                                               -1
                                               (pl
                                                "(# F := F(pl), A := A(pl), K := ck #)"
                                                "(# F := F(pl), A := am, K := ck #)"))
                                              ((""
                                                (assert)
                                                ((""
                                                  (instantiate
                                                   -3
                                                   (pl
                                                    "(# F := F(pl), A := am, K := ck #)"
                                                    "(# F := fm, A := am, K := ck #)"))
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRef formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   99616 110 t nil)
  (weakFullCompositionality-1 nil 3498242388 3498493434
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (assert)
            (("" (instantiate -1 (pl ck))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    (("" (assert)
                      ((""
                        (instantiate -1
                         ("(# F := F(pl), A := A(pl), K := ck #)" am))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma weakFMcompositionality)
                              ((""
                                (assert)
                                ((""
                                  (instantiate
                                   -1
                                   ("(# F := F(pl), A := am, K := ck #)"
                                    fm))
                                  ((""
                                    (assert)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (expand transitive?)
                                          ((""
                                            (flatten)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := F(pl), A := A(pl), K := ck #)"
                                                  "(# F := F(pl), A := am, K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := F(pl), A := am, K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil))
   64 40 t shostak))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3579886394 3580217649
   ("" (subtype-tcc) nil nil) unfinished nil 874 700 nil nil)))

