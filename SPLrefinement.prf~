(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3498492438 3584437630 ("" (grind) nil nil) unchecked
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   37 30 t shostak))
 (refFM 0
  (refFM-1 nil 3498492442 3584437630 ("" (grind) nil nil) unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   65 40 t shostak))
 (assetMappingRefinement 0
  (assetMappingRefinement-1 nil 3581433159 3584437630
   ("" (expand* preorder? reflexive? transitive? "|>")
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (assert)
            (("1" (skolem 1 an)
              (("1" (flatten)
                (("1" (instantiate -2 an)
                  (("1" (assert)
                    (("1" (skolem -2 (a1 a2))
                      (("1" (flatten)
                        (("1" (instantiate -6 an)
                          (("1" (assert)
                            (("1" (skolem -6 (a3 a4))
                              (("1"
                                (flatten)
                                (("1"
                                  (typepred y)
                                  (("1"
                                    (expand unique)
                                    (("1"
                                      (instantiate -2 (an a2 a3))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (instantiate 1 (a1 a4))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use assetRefinement)
                                                (("1"
                                                  (expand*
                                                   preorder?
                                                   reflexive?
                                                   transitive?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (instantiate
                                                       -2
                                                       (a1 a3 a4))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use assetRefinement)
        (("2" (expand* preorder? reflexive? transitive?)
          (("2" (flatten)
            (("2" (skolem 1 x)
              (("2" (skolem 1 an)
                (("2" (flatten)
                  (("2" (expand dom -3)
                    (("2" (skolem -3 a)
                      (("2" (instantiate 1 (a a))
                        (("2" (instantiate -1 a)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (\|> const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   118 80 t shostak))
 (amRefCompositional 0
  (amRefCompositional-2 "" 3584455815 3584715029
   ("" (skolem 1 (A1 A2))
    (("" (expand "|>")
      (("" (flatten)
        ((""
          (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
          (("1" (bddsimp)
            (("1" (skolem 1 ans)
              (("1" (flatten)
                (("1"
                  (case "EXISTS(an:AssetName): ans(an) and dom(A1)(an)")
                  (("1" (skolem -1 an)
                    (("1" (flatten)
                      (("1"
                        (lemma sets_lemmas[AssetName].nonempty_member)
                        (("1" (expand member)
                          (("1" (instantiate -1 ans)
                            (("1" (expand nonempty?)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   set_aux_lemmas[AssetName].setMember)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (instantiate -1 (ans an))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 ans2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (instantiate -5 ans2)
                                              (("2"
                                                (lemma
                                                 set_aux_lemmas[AssetName].cardUnion)
                                                (("2"
                                                  (expand member)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (an ans2))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (skolem 3 a)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   RL)
                                                                  (("2"
                                                                    (instantiate
                                                                     -7
                                                                     an)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -7
                                                                         (a1
                                                                          a2))
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (typepred
                                                                             A1)
                                                                            (("2"
                                                                              (lemma
                                                                               "maps[AssetName,Asset].mapAM")
                                                                              (("2"
                                                                                (copy
                                                                                 -1)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   -1
                                                                                   (A1
                                                                                    an
                                                                                    ans2))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (A2
                                                                                        an
                                                                                        ans2))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skolem
                                                                                           -1
                                                                                           ax)
                                                                                          (("2"
                                                                                            (skolem
                                                                                             -2
                                                                                             ay)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 A2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   unique)
                                                                                                  (("2"
                                                                                                    (instantiate
                                                                                                     -2
                                                                                                     (an
                                                                                                      ay
                                                                                                      a2))
                                                                                                    (("2"
                                                                                                      (instantiate
                                                                                                       -8
                                                                                                       (an
                                                                                                        ax
                                                                                                        a1))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                -2
                                                                                                                -3
                                                                                                                -5
                                                                                                                -7
                                                                                                                -8))
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (instantiate
                                                                                                                     -6
                                                                                                                     "union(a,a1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (bddsimp
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           asRefCompositional)
                                                                                                                          (("1"
                                                                                                                            (instantiate
                                                                                                                             -1
                                                                                                                             (a1
                                                                                                                              a2
                                                                                                                              "union(a,map(A2,ans2))"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "union(a, union(singleton[Asset](a1), map(A1, ans2)))=union(union(a, singleton[Asset](a1)), map(A1, ans2))")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (decompose-equality
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand*
                                                                                                                               union
                                                                                                                               singleton
                                                                                                                               member)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "maps[AssetName,Asset].notExists")
                    (("2" (copy -1)
                      (("2" (instantiate -1 (A1 ans))
                        (("2" (instantiate -2 (A2 ans))
                          (("2" (assert)
                            (("2" (bddsimp)
                              (("1"
                                (replace -4)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (skolem 2 a)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (use assetRefinement)
                                        (("2"
                                          (expand*
                                           preorder?
                                           reflexive?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (instantiate
                                               -1
                                               "union(a,emptyset)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 165777 750 t shostak)
  (amRefCompositional-1 nil 3506978924 3584437631
   ("" (skolem 1 (A1 A2))
    (("" (flatten)
      (("" (expand "|>")
        (("" (flatten)
          ((""
            (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
            (("1" (bddsimp)
              (("1" (skolem 1 ans)
                (("1" (flatten)
                  (("1"
                    (case "EXISTS(an:AssetName): ans(an) and dom(A1)(an)")
                    (("1" (skolem -1 an)
                      (("1" (flatten)
                        (("1"
                          (lemma
                           sets_lemmas[AssetName].nonempty_member)
                          (("1" (instantiate -1 ans)
                            (("1" (expand nonempty?)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1"
                                    (expand member)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand member)
                                  (("2"
                                    (lemma
                                     set_aux_lemmas[AssetName].setMember)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (instantiate -1 (ans an))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skolem -1 ans2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (instantiate -5 ans2)
                                                (("2"
                                                  (lemma
                                                   set_aux_lemmas[AssetName].cardUnion)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (an ans2))
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skolem 3 a)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (instantiate
                                                               -9
                                                               an)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "maps[AssetName,Asset].mapAM")
                                                                  (("2"
                                                                    (instantiate
                                                                     -1
                                                                     (A1
                                                                      an
                                                                      ans2))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -10
                                                                         (a1
                                                                          a2))
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           (ax))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               A1)
                                                                              (("2"
                                                                                (expand
                                                                                 unique
                                                                                 -2)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   -2
                                                                                   (an
                                                                                    a1
                                                                                    ax))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -4
                                                                                       RL)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (hide
                                                                                           4)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -3
                                                                                             -1
                                                                                             RL)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "maps[AssetName,Asset].mapAM")
                                                                                                (("2"
                                                                                                  (instantiate
                                                                                                   -1
                                                                                                   (A2
                                                                                                    an
                                                                                                    ans2))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skolem
                                                                                                       -1
                                                                                                       ay)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         A2)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             unique)
                                                                                                            (("2"
                                                                                                              (instantiate
                                                                                                               -2
                                                                                                               (an
                                                                                                                a2
                                                                                                                ay))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   -4
                                                                                                                   RL)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -3))
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -3
                                                                                                                       -1
                                                                                                                       RL)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         asRefCompositional)
                                                                                                                        (("2"
                                                                                                                          (instantiate
                                                                                                                           -1
                                                                                                                           (a1
                                                                                                                            a2
                                                                                                                            "_"))
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (instantiate
                                                                                                                               -1
                                                                                                                               "union(a,map(A2,ans2))")
                                                                                                                              (("2"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "maps[AssetName,Asset].notExists")
                      (("2" (instantiate -1 (A1 ans))
                        (("2" (assert)
                          (("2" (bddsimp)
                            (("2"
                              (lemma "maps[AssetName,Asset].notExists")
                              (("2"
                                (instantiate -1 (A2 ans))
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (replace -4)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (skolem 2 a)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (use assetRefinement)
                                            (("2"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (instantiate
                                                   -1
                                                   "union(a, emptyset)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 424 300 t shostak))
 (eqCK 0
  (eqCK-1 nil 3498492449 3584437631 ("" (grind) nil nil) unchecked
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   32 10 t shostak))
 (weakerEqReflexive 0
  (weakerEqReflexive-1 nil 3583058305 3584437631 ("" (grind) nil nil)
   unchecked ((weakerEqCK const-decl "bool" SPLrefinement nil)) 4 10 t
   shostak))
 (weakerEqSymmetric 0
  (weakerEqSymmetric-1 nil 3583058310 3584437631 ("" (grind) nil nil)
   unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   88 40 t shostak))
 (weakerEqTransitive 0
  (weakerEqTransitive-1 nil 3583058316 3584437631 ("" (grind) nil nil)
   unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   153 130 t shostak))
 (plRef 0
  (plRef-1 nil 3498493452 3584437631
   ("" (expand preorder?)
    (("" (expand reflexive?)
      (("" (expand transitive?)
        (("" (expand plRefinement)
          (("" (bddsimp)
            (("1" (use assetRefinement)
              (("1" (expand preorder?)
                (("1" (expand transitive?)
                  (("1" (flatten)
                    (("1" (copy -2)
                      (("1" (skolem 1 (x y z))
                        (("1" (flatten)
                          (("1" (skolem 1 c1)
                            (("1" (flatten)
                              (("1"
                                (instantiate -4 c1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -4 c2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -6 c2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skolem -6 c3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 1 c3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     ("([||](K(x))(A(x))(c1))"
                                                      "([||](K(y))(A(y))(c2))"
                                                      "([||](K(z))(A(z))(c3))"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 x)
              (("2" (skolem 1 c)
                (("2" (flatten)
                  (("2" (instantiate 1 c)
                    (("2" (assert)
                      (("2" (use assetRefinement)
                        (("2" (expand preorder?)
                          (("2" (expand reflexive?)
                            (("2" (flatten)
                              (("2"
                                (instantiate
                                 -1
                                 "([||](K(x))(A(x))(c))")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   82 30 t shostak))
 (plRefAlt 0
  (plRefAlt-1 nil 3583058561 3584437631
   ("" (expand* preorder? reflexive? transitive? plRefinementAlt)
    (("" (bddsimp)
      (("1" (use assetRefinement)
        (("1" (expand preorder?)
          (("1" (expand transitive?)
            (("1" (flatten)
              (("1" (skolem 1 (x y z))
                (("1" (flatten)
                  (("1" (skolem 1 p1)
                    (("1" (flatten)
                      (("1" (instantiate -3 p1)
                        (("1" (assert)
                          (("1" (skolem -3 p2)
                            (("1" (flatten)
                              (("1"
                                (instantiate -5 p2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -5 p3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -2 (p1 p2 p3))
                                        (("1"
                                          (instantiate 1 p3)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (use assetRefinement)
          (("2" (expand* preorder? reflexive?)
            (("2" (flatten)
              (("2" (skolem 1 p)
                (("2" (flatten)
                  (("2" (instantiate -1 p)
                    (("2" (instantiate 1 p) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRefinementAlt const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   84 50 t shostak))
 (plRefEq 0
  (plRefEq-1 nil 3583058325 3584437631
   ("" (expand* plRefinement plRefinementAlt)
    (("" (skolem 1 (pl1 pl2))
      (("" (bddsimp)
        (("1" (skolem 1 p1)
          (("1" (flatten)
            (("1" (expand products)
              (("1" (skolem -2 c1)
                (("1" (flatten)
                  (("1" (instantiate -1 c1)
                    (("1" (assert)
                      (("1" (skolem -1 c2)
                        (("1" (flatten)
                          (("1"
                            (instantiate 1
                             "([||](K(pl2))(A(pl2))(c2))")
                            (("1" (assert)
                              (("1"
                                (instantiate 1 c2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 c1)
          (("2" (flatten)
            (("2" (expand products)
              (("2" (instantiate -2 "([||](K(pl1))(A(pl1))(c1))")
                (("2" (bddsimp)
                  (("1" (skolem -2 p2)
                    (("1" (flatten)
                      (("1" (skolem -2 c2)
                        (("1" (flatten)
                          (("1" (instantiate 1 c2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (instantiate 2 c1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (plRefinementAlt const-decl "bool" SPLrefinement nil))
   64 30 t shostak))
 (strongerPLref 0
  (strongerPLref-1 nil 3583157931 3584437631
   ("" (expand* strongerPLrefinement preorder? reflexive? transitive?)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 c1)
            (("1" (flatten)
              (("1" (instantiate -1 c1)
                (("1" (instantiate -2 c1)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use assetRefinement)
                              (("1"
                                (expand* preorder? transitive?)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate
                                     -2
                                     ("([||](K(x))(A(x))(c1))"
                                      "([||](K(y))(A(y))(c1))"
                                      "([||](K(z))(A(z))(c1))"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 c)
          (("2" (flatten)
            (("2" (use assetRefinement)
              (("2" (expand* preorder? transitive?)
                (("2" (flatten)
                  (("2" (expand* reflexive?)
                    (("2" (instantiate -1 "([||](K(x))(A(x))(c))")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   72 50 t shostak))
 (plStrongSubset 0
  (plStrongSubset-1 nil 3584179990 3584437631
   ("" (skolem 1 (pl1 pl2))
    (("" (expand* strongerPLrefinement subset? member)
      (("" (flatten)
        (("" (skolem 1 x)
          (("" (flatten)
            (("" (instantiate -1 x) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil))
   21 10 t shostak))
 (weakFMcompositionality 0
  (weakFMcompositionality-3 nil 3498493637 3584437631
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand plRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   30 20 t nil)
  (weakFMcompositionality-2 nil 3498242341 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand splRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   36 20 t nil)
  (weakFMcompositionality-1 nil 3496055293 3496154047
   ("" (skolem 1 (pl F))
    (("" (expand "|=")
      (("" (expand splRefinement)
        (("" (flatten)
          (("" (skolem 1 c1)
            (("" (flatten)
              (("" (instantiate 1 c1)
                (("" (instantiate -1 c1)
                  (("" (assert)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1
                               "([||](K(pl))(A(pl))(c1))")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil))
   20 20 t shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3493396281 3581433134
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   33 20 nil nil))
 (fmEquivalenceCompositionality 0
  (fmEquivalenceCompositionality-3 nil 3498493705 3584437631
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs plRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   44 30 t nil)
  (fmEquivalenceCompositionality-2 nil 3488033545 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs splRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   35 10 t nil)
  (fmEquivalenceCompositionality-1 nil 3484508353 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentFMs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -3 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -1 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   42 20 t shostak))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3493396281 3581433134
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   33 20 nil nil))
 (ckEquivalenceCompositionality 0
  (ckEquivalenceCompositionality-4 nil 3498493784 3584437631
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs plRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   33 20 t nil)
  (ckEquivalenceCompositionality-3 nil 3498311205 3498493765
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-2 nil 3488033595 3496154047
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfSPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-1 nil 3484508370 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentCKs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -1 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -3 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   16 10 t shostak))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3579886394 3581433135
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (Conf type-decl nil SPLrefinement nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   47 40 nil nil))
 (weakerCKcompositionality 0
  (weakerCKcompositionality-1 nil 3583058804 3584437631
   ("" (assert)
    (("" (skolem 1 (pl ck))
      (("" (flatten)
        (("" (lemma weakerCKcompositionality_TCC1)
          (("" (instantiate -1 (pl ck "F(pl)"))
            (("" (instantiate -1 "K(pl)")
              ((""
                (instantiate -1
                 "(# F := F(pl), A := A(pl), K := ck #)")
                (("" (assert)
                  (("" (expand plRefinement)
                    (("" (expand weakerEqCK)
                      (("" (skolem 1 c1)
                        (("" (flatten)
                          (("" (instantiate 1 c1)
                            (("" (assert)
                              ((""
                                (instantiate -2 "A(pl)")
                                ((""
                                  (instantiate -2 c1)
                                  ((""
                                    (assert)
                                    ((""
                                      (use assetRefinement)
                                      ((""
                                        (expand* preorder? reflexive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (instantiate
                                             -1
                                             "([||](K(pl))(A(pl))(c1))")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((weakerCKcompositionality_TCC1 subtype-tcc nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   49 30 t shostak))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3493396281 3581433135
   ("" (skolem 1 (pl am A))
    (("" (flatten)
      (("" (skolem 1 pl2)
        (("" (flatten)
          (("" (lemma amRef)
            (("" (instantiate -1 (A am))
              (("" (assert)
                (("" (typepred pl)
                  (("" (expand wfPL)
                    (("" (replace -5)
                      (("" (assert)
                        (("" (skolem 1 c)
                          (("" (flatten)
                            (("" (instantiate -2 ("K(pl)" c))
                              ((""
                                (instantiate -1 c)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil))
   37 10 t nil))
 (amRefinementCompositionality 0
  (amRefinementCompositionality-3 nil 3498493721 3584437631
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* plRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   56 40 t nil)
  (amRefinementCompositionality-2 nil 3498311229 3498493433
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* splRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   44 20 t nil)
  (amRefinementCompositionality-1 nil 3484508386 3496154047
   ("" (skolem 1 (pl A))
    (("" (flatten)
      (("" (expand* splRefinement wfSPL)
        (("" (lemma amRef)
          (("" (instantiate -1 ("A(pl)" A))
            (("" (assert)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (instantiate -1 ("K(pl)" c))
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (typepred pl)
                          (("1" (expand wfSPL)
                            (("1" (instantiate -1 c)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 c)
                  (("2" (flatten)
                    (("2" (instantiate 1 c)
                      (("2" (assert)
                        (("2" (instantiate -1 ("K(pl)" c))
                          (("2" (bddsimp -1)
                            (("1" (propax) nil nil)
                             ("2" (typepred pl)
                              (("2"
                                (expand wfSPL)
                                (("2"
                                  (instantiate -1 c)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   50 20 t shostak))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3493396281 3581433135
   ("" (skolem 1 (pl fm am ck F))
    (("" (flatten)
      (("" (skolem 1 K)
        (("" (flatten)
          (("" (skolem 1 A)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (typepred pl)
                    (("" (expand wfPL)
                      (("" (replace -8)
                        (("" (assert)
                          (("" (expand* equivalentFMs equivalentCKs)
                            (("" (lemma amRef)
                              ((""
                                (instantiate -1 (A am))
                                ((""
                                  (assert)
                                  ((""
                                    (skolem 1 c)
                                    ((""
                                      (flatten)
                                      ((""
                                        (instantiate -2 c)
                                        ((""
                                          (instantiate -1 (K c))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((amRef formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   40 20 t nil))
 (fullCompositionality 0
  (fullCompositionality-6 nil 3498493744 3584437632
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRef)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   73 40 t nil)
  (fullCompositionality-5 nil 3498311958 3498493433
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   87 40 t nil)
  (fullCompositionality-4 nil 3488035773 3498311948
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand extend)
                                                    ((""
                                                      (instantiate
                                                       -3
                                                       (pl
                                                        "(# F := fm, A := A(pl), K := ck #)"
                                                        "(# F := fm, A := am, K := ck #)"))
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   4450 100 t nil)
  (fullCompositionality-3 nil 3488035651 3488035738
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 85496 190 t nil)
  (fullCompositionality-2 nil 3488035274 3488035629
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                    "((([||](K(pl1)))(A(pl1)))(c2))"
                                                                    "((([||](K(pl1)))(A(pl2)))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                        "((([||](K(pl2)))(A(pl1)))(c3))"
                                                                        "((([||](K(pl2)))(A(pl2)))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 88620 260 t nil)
  (fullCompositionality-1 nil 3484508425 3488035102
   ("" (skolem 1 (pl1 pl2))
    (("" (lemma fmEquivalenceCompositionality)
      (("" (lemma ckEquivalenceCompositionality)
        (("" (lemma amRefinementCompositionality)
          ((""
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("map(A(pl1), [||](K(pl1))(c))"
                                                                    "map(A(pl1), [||](K(pl1))(c2))"
                                                                    "map(A(pl1), [||](K(pl2))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("map(A(pl1), [||](K(pl1))(c))"
                                                                        "map(A(pl1), [||](K(pl2))(c3))"
                                                                        "map(A(pl2), [||](K(pl2))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   18369 220 t shostak))
 (weakFullCompositionality 0
  (weakFullCompositionality-2 nil 3498493759 3584437632
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := am, K := ck #)"
                                  fm))
                                ((""
                                  (assert)
                                  ((""
                                    (use plRef)
                                    ((""
                                      (expand preorder?)
                                      ((""
                                        (expand transitive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (copy -2)
                                            ((""
                                              (instantiate
                                               -1
                                               (pl
                                                "(# F := F(pl), A := A(pl), K := ck #)"
                                                "(# F := F(pl), A := am, K := ck #)"))
                                              ((""
                                                (assert)
                                                ((""
                                                  (instantiate
                                                   -3
                                                   (pl
                                                    "(# F := F(pl), A := am, K := ck #)"
                                                    "(# F := fm, A := am, K := ck #)"))
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRef formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   77 60 t nil)
  (weakFullCompositionality-1 nil 3498242388 3498493434
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (assert)
            (("" (instantiate -1 (pl ck))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    (("" (assert)
                      ((""
                        (instantiate -1
                         ("(# F := F(pl), A := A(pl), K := ck #)" am))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma weakFMcompositionality)
                              ((""
                                (assert)
                                ((""
                                  (instantiate
                                   -1
                                   ("(# F := F(pl), A := am, K := ck #)"
                                    fm))
                                  ((""
                                    (assert)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (expand transitive?)
                                          ((""
                                            (flatten)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := F(pl), A := A(pl), K := ck #)"
                                                  "(# F := F(pl), A := am, K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := F(pl), A := am, K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil))
   64 40 t shostak))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3579886394 3583059262
   ("" (skolem 1 (pl fm am ck F))
    (("" (flatten)
      (("" (skolem 1 K)
        (("" (flatten)
          (("" (skolem 1 A)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (lemma fmEquivalenceCompositionality_TCC1)
                    (("" (instantiate -1 (pl fm F))
                      (("" (assert)
                        ((""
                          (instantiate -1
                           "(# F := fm, A := A(pl), K := K(pl) #)")
                          ((""
                            (lemma amRefinementCompositionality_TCC1)
                            ((""
                              (instantiate -1
                               ("(# F := fm, A := A(pl), K := K(pl) #)"
                                am
                                A))
                              (("1"
                                (assert)
                                (("1"
                                  (instantiate
                                   -1
                                   "(# F := fm, A := am, K := K(pl) #)")
                                  (("1"
                                    (lemma
                                     weakerCKcompositionality_TCC1)
                                    (("1"
                                      (instantiate
                                       -1
                                       ("(# F := fm, A := am, K := K(pl) #)"
                                        ck
                                        fm))
                                      (("1"
                                        (instantiate -1 K)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (instantiate
                                             -1
                                             "(# F := fm, A := am, K := ck #)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand equivalentFMs)
                                                (("1"
                                                  (expand weakerEqCK)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((weakerEqCK const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (weakerCKcompositionality_TCC1 subtype-tcc nil SPLrefinement nil)
    (amRefinementCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (fmEquivalenceCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil))
   301745 90 t nil))
 (fullCompositionality2 0
  (fullCompositionality2-1 nil 3583059282 3584437632
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fullCompositionality2_TCC1)
          (("" (instantiate -1 (pl fm am ck "F(pl)"))
            (("" (instantiate -1 "K(pl)")
              (("" (instantiate -1 "A(pl)")
                (("" (instantiate -1 "(# F := fm, A := am, K := ck #)")
                  (("" (assert)
                    (("" (lemma weakerCKcompositionality)
                      (("" (instantiate -1 (pl ck))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma amRefinementCompositionality)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (lemma
                                       fmEquivalenceCompositionality)
                                      ((""
                                        (instantiate
                                         -1
                                         ("(# F := F(pl), A := am, K := ck #)"
                                          fm))
                                        ((""
                                          (assert)
                                          ((""
                                            (lemma plRef)
                                            ((""
                                              (expand*
                                               preorder?
                                               transitive?)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (copy -2)
                                                  ((""
                                                    (instantiate
                                                     -1
                                                     (pl
                                                      "(# F := F(pl), A := A(pl), K := ck #)"
                                                      "(# F := F(pl), A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (instantiate
                                                         -3
                                                         (pl
                                                          "(# F := F(pl), A := am, K := ck #)"
                                                          "(# F := fm, A := am, K := ck #)"))
                                                        ((""
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((fullCompositionality2_TCC1 subtype-tcc nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (weakerCKcompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (plRef formula-decl nil SPLrefinement nil))
   100 60 t shostak))
 (weakFullCompositionality2 0
  (weakFullCompositionality2-1 nil 3583059505 3584437632
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma weakerCKcompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            ((""
                              (instantiate -1
                               ("(# F := F(pl), A := am, K := ck #)"
                                fm))
                              ((""
                                (assert)
                                ((""
                                  (lemma plRef)
                                  ((""
                                    (expand* preorder? transitive?)
                                    ((""
                                      (flatten)
                                      ((""
                                        (copy -2)
                                        ((""
                                          (instantiate
                                           -1
                                           (pl
                                            "(# F := F(pl), A := A(pl), K := ck #)"
                                            "(# F := F(pl), A := am, K := ck #)"))
                                          ((""
                                            (assert)
                                            ((""
                                              (instantiate
                                               -3
                                               (pl
                                                "(# F := F(pl), A := am, K := ck #)"
                                                "(# F := fm, A := am, K := ck #)"))
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((weakerCKcompositionality formula-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   67 50 t shostak)))

