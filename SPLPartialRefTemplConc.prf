(SPLPartialRefTemplConc
 (sameEvalPairs 0
  (sameEvalPairs-1 nil 3655569386
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (expand syntaxChangeAsset)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (bddsimp)
            (("" (expand semantics)
              (("" (expand eval)
                (("" (expand "<>")
                  (("" (decompose-equality -3)
                    (("" (inst -1 c)
                      (("" (bddsimp)
                        (("" (expand map)
                          (("" (decompose-equality 1)
                            (("" (bddsimp)
                              (("1"
                                (skolem -1 an2)
                                (("1"
                                  (inst 1 an2)
                                  (("1"
                                    (expand assetsCK)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (skolem -1 i)
                                        (("1"
                                          (inst -5 i)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand union)
                                              (("1"
                                                (decompose-equality -7)
                                                (("1"
                                                  (inst -1 "(an2,x!1)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand member)
                                                      (("1"
                                                        (decompose-equality
                                                         -8)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(an2,x!1)")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 an2)
                                (("2"
                                  (inst 1 an2)
                                  (("2"
                                    (expand union)
                                    (("2"
                                      (decompose-equality -5)
                                      (("2"
                                        (inst -1 "(an2,x!1)")
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand member)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil))
   shostak))
 (sameEvalPairs2 0
  (sameEvalPairs2-1 nil 3656675170
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (expand syntaxChangeAsset)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand semantics)
                    (("" (expand map)
                      (("" (decompose-equality 1)
                        (("" (expand union)
                          (("" (decompose-equality -5)
                            (("" (bddsimp)
                              (("1"
                                (skolem -2 an2)
                                (("1"
                                  (inst 1 an2)
                                  (("1"
                                    (inst -1 "(an2,x!1)")
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -2 an2)
                                (("2"
                                  (inst 1 an2)
                                  (("2"
                                    (inst -1 "(an2,x!1)")
                                    (("2"
                                      (bddsimp)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (changeAssetSameProducts 0
  (changeAssetSameProducts-1 nil 3655548533
   ("" (lemma sameEvalPairs)
    (("" (lemma sameEvalPairs2)
      (("" (skolem 1 (pl am2 pairs a1 a2 an s))
        (("" (inst -1 pl am2 pairs a1 a2 an s)
          (("" (inst -2 pl am2 pairs a1 a2 an s)
            (("" (expand syntaxChangeAsset)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (inst -4 c)
                    (("" (inst -5 c)
                      (("" (bddsimp)
                        (("" (replace -5 1) (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sameEvalPairs2 formula-decl nil SPLPartialRefTemplConc nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (sameEvalPairs formula-decl nil SPLPartialRefTemplConc nil))
   shostak))
 (changeAssetStrong_TCC1 0
  (changeAssetStrong_TCC1-1 nil 3655636131 ("" (subtype-tcc) nil nil)
   nil nil))
 (changeAssetStrong_TCC2 0
  (changeAssetStrong_TCC2-1 nil 3656876548 ("" (subtype-tcc) nil nil)
   nil nil))
 (changeAssetStrong 0
  (changeAssetStrong-1 nil 3655416713
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (lemma changeAssetSameProducts)
      (("" (inst -1 pl am2 pairs a1 a2 an s)
        (("" (expand syntaxChangeAsset)
          (("" (bddsimp)
            (("" (expand strongPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (expand prod)
                      (("" (replace -5 1)
                        (("" (use SPLrefinement.assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (inst
                                   -1
                                   "(semantics(K(pl))(am2)(c))")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((changeAssetSameProducts formula-decl nil SPLPartialRefTemplConc
     nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   shostak))
 (changeAssetWeakAlt_TCC1 0
  (changeAssetWeakAlt_TCC1-1 nil 3656876548 ("" (subtype-tcc) nil nil)
   nil nil))
 (changeAssetWeakAlt_TCC2 0
  (changeAssetWeakAlt_TCC2-1 nil 3656876548 ("" (subtype-tcc) nil nil)
   nil nil))
 (changeAssetWeakAlt 0
  (changeAssetWeakAlt-1 nil 3655632850
   ("" (skolem 1 (pl am2 pairs a1 a2 an s t))
    (("" (expand syntaxChangeAsset)
      (("" (bddsimp)
        (("" (expand weakPartialRefinementAlt)
          (("" (skolem 1 p1)
            (("" (bddsimp)
              (("" (expand prod)
                (("" (replace -4 -5)
                  (("" (replace -4 -3)
                    (("" (lemma "changeAssetStrong")
                      (("" (inst -1 pl am2 pairs a1 a2 an s)
                        (("" (expand syntaxChangeAsset)
                          (("" (bddsimp)
                            (("1" (expand strongPartialRefinement)
                              (("1"
                                (skolem -6 c)
                                (("1"
                                  (inst 1 p1)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (use
                                       SPLrefinement.assetRefinement)
                                      (("1"
                                        (expand preorder?)
                                        (("1"
                                          (expand reflexive?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -1 p1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 1 c)
                                      (("2"
                                        (inst -3 c)
                                        (("2"
                                          (expand prod)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (lemma
                                               changeAssetSameProducts)
                                              (("1"
                                                (inst
                                                 -1
                                                 pl
                                                 am2
                                                 pairs
                                                 a1
                                                 a2
                                                 an
                                                 s)
                                                (("1"
                                                  (expand
                                                   syntaxChangeAsset)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (inst -3 c)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           changeAssetSameProducts)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             pl
                                                             am2
                                                             pairs
                                                             a1
                                                             a2
                                                             an
                                                             s)
                                                            (("2"
                                                              (expand
                                                               syntaxChangeAsset)
                                                              (("2"
                                                                (bddsimp)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   c)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 2 p1)
                              (("2"
                                (skolem -5 c)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (use SPLrefinement.assetRefinement)
                                    (("1"
                                      (expand preorder?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand reflexive?)
                                          (("1" (inst -1 p1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 2 c)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (expand prod)
                                        (("2"
                                          (lemma
                                           changeAssetSameProducts)
                                          (("2"
                                            (inst
                                             -1
                                             pl
                                             am2
                                             pairs
                                             a1
                                             a2
                                             an
                                             s)
                                            (("2"
                                              (expand
                                               syntaxChangeAsset)
                                              (("2"
                                                (bddsimp)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (changeAssetStrong formula-decl nil SPLPartialRefTemplConc nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (changeAssetSameProducts formula-decl nil SPLPartialRefTemplConc
     nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (prod const-decl
     "finite_sets[finite_sets[Asset].finite_set].finite_set"
     SPLpartialrefinement nil))
   shostak))
 (changeAssetWeak_TCC1 0
  (changeAssetWeak_TCC1-1 nil 3655846816 ("" (subtype-tcc) nil nil) nil
   nil))
 (changeAssetWeak_TCC2 0
  (changeAssetWeak_TCC2-1 nil 3656876548 ("" (subtype-tcc) nil nil) nil
   nil))
 (changeAssetWeak 0
  (changeAssetWeak-1 nil 3655846829
   ("" (skolem 1 (pl am2 pairs a1 a2 an map))
    (("" (lemma changeAssetSameProducts)
      (("" (inst -1 pl am2 pairs a1 a2 an "domain(map)")
        (("" (expand syntaxChangeAsset)
          (("" (bddsimp)
            (("" (expand weakPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (expand identity?)
                    (("" (inst -5 c)
                      (("" (replace -5 1)
                        (("" (bddsimp)
                          (("" (expand prod)
                            (("" (replace -5 1)
                              ((""
                                (use SPLrefinement.assetRefinement)
                                ((""
                                  (expand preorder?)
                                  ((""
                                    (flatten)
                                    ((""
                                      (expand reflexive?)
                                      ((""
                                        (inst
                                         -1
                                         "(semantics(K(pl))(am2)(c))")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((changeAssetSameProducts formula-decl nil SPLPartialRefTemplConc
     nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplConc nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (identity? const-decl "bool" maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   shostak))
 (transfOptMand_TCC1 0
  (transfOptMand_TCC1-1 nil 3655826326 ("" (subtype-tcc) nil nil) nil
   nil))
 (transOptMandPartRefStrong_TCC1 0
  (transOptMandPartRefStrong_TCC1-1 nil 3655832656
   ("" (subtype-tcc) nil nil) nil nil))
 (transOptMandPartRefStrong_TCC2 0
  (transOptMandPartRefStrong_TCC2-1 nil 3656876548
   ("" (subtype-tcc) nil nil) nil nil))
 (transOptMandPartRefStrong 0
  (transOptMandPartRefStrong-1 nil 3655826327
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand syntaxTransfOptMand)
      (("" (bddsimp)
        (("" (expand strongPartialRefinement)
          (("" (skolem 2 c)
            (("" (expand "<>")
              (("" (decompose-equality)
                (("" (inst -1 c)
                  (("" (expand prod)
                    (("" (lemma SPLrefinement.assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (inst -1 "(semantics(K(pl))(A(pl))(c))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplConc nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (transOptMandPartRefWeak_TCC1 0
  (transOptMandPartRefWeak_TCC1-1 nil 3656876548
   ("" (subtype-tcc) nil nil) nil nil))
 (transOptMandPartRefWeak_TCC2 0
  (transOptMandPartRefWeak_TCC2-1 nil 3656876852
   ("" (subtype-tcc) nil nil) nil nil))
 (transOptMandPartRefWeak 0
  (transOptMandPartRefWeak-1 nil 3656876549
   ("" (skolem 1 (pl fm2 m P Q))
    (("" (expand syntaxTransfOptMand)
      (("" (bddsimp)
        (("" (expand weakPartialRefinement)
          (("" (skolem 2 c)
            (("" (bddsimp)
              (("" (expand prod)
                (("" (expand identity?)
                  (("" (inst -6 c)
                    (("" (replace -6 2)
                      (("" (use SPLrefinement.assetRefinement)
                        (("" (expand preorder?)
                          (("" (flatten)
                            (("" (expand reflexive?)
                              ((""
                                (inst
                                 -1
                                 "(semantics(K(pl))(A(pl))(c))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplConc nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (identity? const-decl "bool" maps_identity nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil))
   shostak))
 (conditionsChangeFeatureExp_TCC1 0
  (conditionsChangeFeatureExp_TCC1-1 nil 3657447041
   ("" (subtype-tcc) nil nil) nil nil))
 (changeFeatureExpSameEvalCK_TCC1 0
  (changeFeatureExpSameEvalCK_TCC1-1 nil 3657447639
   ("" (subtype-tcc) nil nil) nil nil))
 (changeFeatureExpSameEvalCK 0
  (changeFeatureExpSameEvalCK-4 nil 3657448045
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand prod)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeFeatureExp)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplConc nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplConc
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil))
   nil)
  (changeFeatureExpSameEvalCK-3 nil 3657447915
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (expand prod)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (expand "<>")
              (("" (decompose-equality -3)
                (("" (inst -1 c)
                  (("" (expand syntaxChangeFeatureExp)
                    (("" (flatten)
                      (("" (expand union)
                        (("" (decompose-equality -2)
                          (("" (decompose-equality -3)
                            (("" (expand semantics)
                              ((""
                                (expand map)
                                ((""
                                  (decompose-equality 1)
                                  ((""
                                    (bddsimp)
                                    (("1"
                                      (skolem -1 an)
                                      (("1"
                                        (inst 1 an)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand eval)
                                            (("1"
                                              (expand evalCK)
                                              (("1"
                                                (expand assetsCK)
                                                (("1"
                                                  (skolem -1 i)
                                                  (("1"
                                                    (inst 1 i)
                                                    (("1"
                                                      (inst -3 i)
                                                      (("1"
                                                        (inst -4 i)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand
                                                               singleton)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))
                                     ("2"
                                      (skolem -1 an)
                                      (("2"
                                        (inst 1 an)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -2 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (expand evalCK)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (inst -6 i)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (grind)
                                                                nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeFeatureExpSameEvalCK-2 nil 3657447658
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeFeatureExp)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeFeatureExpSameEvalCK-1 nil 3657447042
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (expand syntaxChangeFeatureExp)
                (("" (flatten)
                  (("" (expand union)
                    (("" (decompose-equality -2)
                      (("" (decompose-equality -3)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand eval)
                                        (("1"
                                          (expand evalCK)
                                          (("1"
                                            (expand assetsCK)
                                            (("1"
                                              (skolem -1 i)
                                              (("1"
                                                (inst 1 i)
                                                (("1"
                                                  (inst -3 i)
                                                  (("1"
                                                    (inst -4 i)
                                                    (("1"
                                                      (expand member)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           singleton)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (expand eval)
                                        (("2"
                                          (expand assetsCK)
                                          (("2"
                                            (skolem -2 i)
                                            (("2"
                                              (inst 1 i)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (expand evalCK)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -6 i)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplConc nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplConc
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (changeFeatureExpStrongPartRef_TCC1 0
  (changeFeatureExpStrongPartRef_TCC1-1 nil 3657448092
   ("" (subtype-tcc) nil nil) nil nil))
 (changeFeatureExpStrongPartRef_TCC2 0
  (changeFeatureExpStrongPartRef_TCC2-1 nil 3657448092
   ("" (subtype-tcc) nil nil) nil nil))
 (changeFeatureExpStrongPartRef 0
  (changeFeatureExpStrongPartRef-1 nil 3657448093
   ("" (lemma changeFeatureExpSameEvalCK)
    (("" (skolem 1 (pl ck2 item1 item2 items s))
      (("" (inst -1 pl ck2 item1 item2 items s)
        (("" (expand strongPartialRefinement)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (replace -5 1)
                      (("" (use SPLrefinement.assetRefinement)
                        (("" (expand preorder?)
                          (("" (flatten)
                            (("" (expand reflexive?)
                              ((""
                                (inst -1 "(semantics(ck2)(A(pl))(c))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (changeFeatureExpSameEvalCK formula-decl nil SPLPartialRefTemplConc
     nil))
   shostak))
 (itsNotIncluded 0
  (itsNotIncluded-4 nil 3657555293
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (expand member)
                                      (("1"
                                        (expand satisfies)
                                        (("1"
                                          (expand satisfies)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplConc
     nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplConc nil))
   nil)
  (itsNotIncluded-3 nil 3657554425
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplConc
     nil)
    nil)
   nil)
  (itsNotIncluded-2 nil 3657553584
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplConc
     nil)
    nil)
   nil)
  (itsNotIncluded-1 nil 3657533313
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -10)
                                      (("1"
                                        (skolem -12 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (difference const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplConc
     nil))
   shostak))
 (pairsNotIncluded 0
  (pairsNotIncluded-1 nil 3657539564
   ("" (lemma itsNotIncluded)
    (("" (skolem 1 (pl pl2 s its pairs P Q))
      (("" (inst -1 pl pl2 s its pairs P Q)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (inst -4 c)
              (("" (bddsimp)
                (("" (skolem 1 an)
                  (("" (expand conditionsRemoveFeature)
                    (("" (flatten)
                      (("" (expand eval)
                        (("" (expand assetsCK)
                          (("" (skolem -7 i)
                            (("" (inst -3 i)
                              ((""
                                (inst -6 i)
                                ((""
                                  (bddsimp)
                                  ((""
                                    (inst -3 an)
                                    (("" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((itsNotIncluded formula-decl nil SPLPartialRefTemplConc nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplConc
     nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil))
   shostak))
 (removeFeatureSameProducts 0
  (removeFeatureSameProducts-9 nil 3657556116
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pairsNotIncluded formula-decl nil SPLPartialRefTemplConc nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (itsNotIncluded formula-decl nil SPLPartialRefTemplConc nil))
   nil)
  (removeFeatureSameProducts-8 nil 3657555864
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-7 nil 3657555685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-6 nil 3657555648
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -5)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-5 nil 3657555612
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-4 nil 3657555537
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-3 nil 3657555381
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-2 nil 3657553685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pairsNotIncluded formula-decl nil SPLPartialRefTemplConc nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (itsNotIncluded formula-decl nil SPLPartialRefTemplConc nil))
   nil)
  (removeFeatureSameProducts-1 nil 3657408487
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -9)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -10)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -8)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -9)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((itsNotIncluded formula-decl nil SPLPartialRefTemplConc nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplConc nil)
    (difference const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (pairsNotIncluded formula-decl nil SPLPartialRefTemplConc nil))
   shostak))
 (removeFeaturePartRefStrong_TCC1 0
  (removeFeaturePartRefStrong_TCC1-1 nil 3657408486
   ("" (subtype-tcc) nil nil) nil nil))
 (removeFeaturePartRefStrong 0
  (removeFeaturePartRefStrong-1 nil 3657553054
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (bddsimp)
      (("" (lemma removeFeatureSameProducts)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (bddsimp)
            (("" (expand strongPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (replace -5 1)
                      (("" (use SPLrefinement.assetRefinement)
                        (("" (expand preorder?)
                          (("" (flatten)
                            (("" (expand reflexive?)
                              (("" (inst -1 "prod(pl2, c)") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((removeFeatureSameProducts formula-decl nil SPLPartialRefTemplConc
     nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   shostak)))

