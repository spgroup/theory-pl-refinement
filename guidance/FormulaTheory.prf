(FormulaTheory
 (names_TCC1 0
  (names_TCC1-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (names_TCC2 0
  (names_TCC2-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (names_TCC3 0
  (names_TCC3-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (names_TCC4 0
  (names_TCC4-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (names_TCC5 0
  (names_TCC5-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (replace_TCC1 0
  (replace_TCC1-1 nil 3707652523 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC2 0
  (replace_TCC2-1 nil 3707689223 ("" (termination-tcc) nil nil) nil
   nil))
 (wt_TCC1 0
  (wt_TCC1-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (wt_TCC2 0
  (wt_TCC2-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (wt_TCC3 0
  (wt_TCC3-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (wt_TCC4 0
  (wt_TCC4-1 nil 3659802846 ("" (termination-tcc) nil nil) nil nil))
 (satisfies_TCC1 0
  (satisfies_TCC1-1 nil 3659802846 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Formula_ -> nat]" Formula__adt nil)
    (complexity const-decl "nat" FormulaTheory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (satisfies_TCC2 0
  (satisfies_TCC2-1 nil 3659802846 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Formula_ -> nat]" Formula__adt nil)
    (complexity const-decl "nat" FormulaTheory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (satisfies_TCC3 0
  (satisfies_TCC3-1 nil 3659802846 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Formula_ -> nat]" Formula__adt nil)
    (complexity const-decl "nat" FormulaTheory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (satisfies_TCC4 0
  (satisfies_TCC4-1 nil 3659802846 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Formula_ -> nat]" Formula__adt nil)
    (complexity const-decl "nat" FormulaTheory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (replaceWithoutEffect 0
  (replaceWithoutEffect-1 nil 3707688845
   ("" (induct f)
    (("1" (skolem 1 n)
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 n)
      (("2" (bddsimp)
        (("2" (expand replace) (("2" (propax) nil nil)) nil)) nil))
      nil)
     ("3" (skolem 1 f)
      (("3" (skolem 1 n)
        (("3" (bddsimp)
          (("3" (expand replace)
            (("3" (expand names)
              (("3" (lift-if) (("3" (bddsimp) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 f)
      (("4" (bddsimp)
        (("4" (skolem 1 n)
          (("4" (bddsimp)
            (("4" (inst -1 n)
              (("4" (bddsimp)
                (("1" (expand names 1) (("1" (propax) nil nil)) nil)
                 ("2" (expand names 1)
                  (("2" (expand replace 2) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 n)
          (("5" (bddsimp)
            (("5" (expand replace 2)
              (("5" (inst -1 n)
                (("5" (expand names 1)
                  (("5" (bddsimp)
                    (("5" (replace -1 3)
                      (("5" (inst -2 n)
                        (("5" (bddsimp)
                          (("5" (replace -2 3) (("5" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 n)
          (("6" (bddsimp)
            (("6" (expand replace 2)
              (("6" (expand names 1)
                (("6" (bddsimp)
                  (("6" (inst -1 n)
                    (("6" (inst -2 n)
                      (("6" (bddsimp)
                        (("6" (replace -1 3)
                          (("6" (replace -2 3) (("6" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula_ type-decl nil Formula__adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Formula__induction formula-decl nil Formula__adt nil))
   shostak))
 (replaceWithoutEffect2 0
  (replaceWithoutEffect2-1 nil 3709460011
   ("" (induct f)
    (("1" (skolem 1 (x x2))
      (("1" (bddsimp) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 (x x2))
      (("2" (bddsimp) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2))
        (("3" (bddsimp) (("3" (grind) nil nil)) nil)) nil))
      nil)
     ("4" (skolem 1 notFormula)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2))
          (("4" (expand names 1)
            (("4" (inst -1 x x2)
              (("4" (bddsimp) (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2))
          (("5" (bddsimp)
            (("5" (expand names 1)
              (("5" (bddsimp)
                (("5" (inst -1 x x2)
                  (("5" (inst -2 x x2)
                    (("5" (bddsimp) (("5" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (x x2))
          (("6" (expand names 1)
            (("6" (bddsimp)
              (("6" (inst -1 x x2)
                (("6" (inst -2 x x2) (("6" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace 0
  (satisfiesPreservesReplace-1 nil 3707695696
   ("" (induct f)
    (("1" (skolem 1 (n c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (n c))
      (("2" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 n1)
      (("3" (skolem 1 (n c))
        (("3" (bddsimp)
          (("1" (expand replace)
            (("1" (lift-if)
              (("1" (bddsimp)
                (("1" (assert)
                  (("1" (expand satisfies)
                    (("1" (assert)
                      (("1" (skolem -1 n2)
                        (("1" (bddsimp) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand replace)
            (("2" (lift-if)
              (("2" (bddsimp)
                (("2" (expand satisfies) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 f)
      (("4" (bddsimp)
        (("4" (skolem 1 (n c))
          (("4" (bddsimp)
            (("1" (inst -1 n c)
              (("1" (bddsimp)
                (("1" (expand replace 2)
                  (("1" (expand satisfies 2)
                    (("1" (expand satisfies -3)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand replace 4)
                  (("2" (expand satisfies -1)
                    (("2" (expand satisfies 5) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 n c)
              (("2" (bddsimp)
                (("1" (expand satisfies 2) (("1" (grind) nil nil)) nil)
                 ("2" (expand satisfies 4) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (n c))
          (("5" (bddsimp)
            (("1" (inst -1 n c)
              (("1" (inst -2 n c)
                (("1" (bddsimp)
                  (("1" (expand replace 2)
                    (("1" (expand satisfies 2)
                      (("1" (bddsimp) nil nil)) nil))
                    nil)
                   ("2" (expand replace 4)
                    (("2" (expand satisfies 4)
                      (("2" (bddsimp)
                        (("2" (expand satisfies -3)
                          (("2" (bddsimp) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand satisfies -3)
                    (("3" (expand replace 4)
                      (("3" (expand satisfies 4)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (expand satisfies -1)
                    (("4" (expand replace 6)
                      (("4" (expand satisfies 6)
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 n c)
              (("2" (inst -2 n c)
                (("2" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (n c))
          (("6" (inst -1 n c)
            (("6" (inst -2 n c)
              (("6" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace2 0
  (satisfiesPreservesReplace2-1 nil 3709460367
   ("" (induct f)
    (("1" (skolem 1 (x x2 c))
      (("1" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (x x2 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (grind) nil nil)
           ("2" (lemma replaceWithoutEffect2)
            (("2" (expand satisfies 3)
              (("2" (inst 3 n)
                (("2" (hide -1)
                  (("2" (expand replace -1)
                    (("2" (lift-if)
                      (("2" (bddsimp)
                        (("1" (expand satisfies -2)
                          (("1" (skolem -2 x3)
                            (("1" (flatten)
                              (("1"
                                (replace -3 2 RL)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies -1)
                          (("2" (skolem -1 x3)
                            (("2" (flatten)
                              (("2"
                                (replace -2 3 RL)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notFormula)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2 c))
          (("5" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (inst -2 x x2 c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (x x2 c))
          (("6" (inst -1 x x2 c)
            (("6" (inst -2 x x2 c)
              (("6" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((replaceWithoutEffect2 formula-decl nil FormulaTheory nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace3 0
  (satisfiesPreservesReplace3-1 nil 3709461343
   ("" (induct f)
    (("1" (skolem 1 (x x2 c))
      (("1" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (x x2 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -3)
            (("1" (skolem -3 n2)
              (("1" (flatten)
                (("1" (expand replace)
                  (("1" (lift-if)
                    (("1" (bddsimp)
                      (("1" (expand satisfies)
                        (("1" (expand remove)
                          (("1" (expand member)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand satisfies)
                        (("2" (inst 3 n) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand replace)
            (("2" (lift-if)
              (("2" (bddsimp)
                (("1" (expand satisfies)
                  (("1" (inst 2 n)
                    (("1" (replace -3 2) (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand satisfies)
                  (("2" (skolem -3 x3)
                    (("2" (flatten)
                      (("2" (expand remove)
                        (("2" (flatten)
                          (("2" (expand member)
                            (("2" (inst 2 x3) (("2" (bddsimp) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notFormula)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2 c))
          (("5" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (inst -2 x x2 c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (x x2 c))
          (("6" (inst -1 x x2 c)
            (("6" (inst -2 x x2 c)
              (("6" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula_ type-decl nil Formula__adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (satisfiesPreservesReplace4 0
  (satisfiesPreservesReplace4-1 nil 3710677704
   ("" (induct f)
    (("1" (skolem 1 (x x2 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (x x2 c))
      (("2" (expand replace) (("2" (propax) nil nil)) nil)) nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -1)
            (("1" (skolem -1 n2)
              (("1" (flatten)
                (("1" (replace -2 -1)
                  (("1" (expand replace)
                    (("1" (lift-if)
                      (("1" (bddsimp)
                        (("1" (replace -3 1 RL)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand satisfies)
                          (("2" (inst 4 n) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 3)
            (("2" (inst 3 n)
              (("2" (expand replace)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (flatten)
                        (("1" (expand satisfies)
                          (("1" (skolem -2 n2)
                            (("1" (flatten)
                              (("1"
                                (replace -3 1 RL)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (skolem -1 n2)
                        (("2" (flatten)
                          (("2" (replace -2 3 RL)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 f)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (expand satisfies -2)
                (("1" (bddsimp)
                  (("1" (expand replace 5)
                    (("1" (expand satisfies 5) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 x x2 c)
              (("2" (expand satisfies 3)
                (("2" (bddsimp)
                  (("2" (expand replace -3)
                    (("2" (expand satisfies -3)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2 c))
          (("5" (bddsimp)
            (("1" (expand satisfies -3)
              (("1" (flatten)
                (("1" (inst -1 x x2 c)
                  (("1" (inst -2 x x2 c)
                    (("1" (bddsimp)
                      (("1" (expand replace 3)
                        (("1" (expand satisfies 3)
                          (("1" (bddsimp) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand replace -3)
              (("2" (expand satisfies -3)
                (("2" (flatten)
                  (("2" (expand satisfies 3)
                    (("2" (bddsimp)
                      (("1" (inst -2 x x2 c) (("1" (bddsimp) nil nil))
                        nil)
                       ("2" (inst -1 x x2 c) (("2" (bddsimp) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (x x2 c))
          (("6" (bddsimp)
            (("1" (expand replace 3)
              (("1" (expand satisfies 3)
                (("1" (bddsimp) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula_ type-decl nil Formula__adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (Formula__induction formula-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace5 0
  (satisfiesPreservesReplace5-1 nil 3710681066
   ("" (induct f)
    (("1" (skolem 1 (x x2 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (x x2 c))
      (("2" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -1)
            (("1" (skolem -1 n2)
              (("1" (flatten)
                (("1" (replace -2 -1)
                  (("1" (expand replace)
                    (("1" (lift-if)
                      (("1" (bddsimp)
                        (("1" (replace -3 1 RL)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand satisfies)
                          (("2" (inst 4 n) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 3)
            (("2" (inst 3 n)
              (("2" (expand replace)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (skolem -2 n2)
                            (("1" (flatten)
                              (("1"
                                (replace -3 2 RL)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (expand satisfies)
                            (("2" (skolem -2 n2)
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -3 1 RL)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (skolem -1 n2)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 f)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (inst -1 x x2 c)
              (("1" (expand satisfies -2)
                (("1" (bddsimp)
                  (("1" (expand replace 5)
                    (("1" (expand satisfies 5) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand satisfies 3)
              (("2" (inst -1 x x2 c)
                (("2" (bddsimp)
                  (("2" (expand replace -3)
                    (("2" (expand satisfies -3)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2 c))
          (("5" (bddsimp)
            (("1" (expand replace 3)
              (("1" (expand satisfies 3)
                (("1" (bddsimp)
                  (("1" (expand satisfies -3)
                    (("1" (flatten)
                      (("1" (inst -2 x x2 c) (("1" (bddsimp) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies -3)
                    (("2" (flatten)
                      (("2" (inst -1 x x2 c) (("2" (bddsimp) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (x x2 c))
          (("6" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" FormulaTheory nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace6 0
  (satisfiesPreservesReplace6-1 nil 3711277360
   ("" (induct f)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (expand replace)
            (("1" (lift-if)
              (("1" (expand names)
                (("1" (bddsimp)
                  (("1" (expand satisfies -2)
                    (("1" (skolem -2 n2)
                      (("1" (expand satisfies)
                        (("1" (inst 2 x2)
                          (("1" (expand add) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies)
                    (("2" (skolem -2 n2)
                      (("2" (flatten)
                        (("2" (inst 3 n2)
                          (("2" (bddsimp)
                            (("2" (expand add)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand member)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand replace)
            (("2" (lift-if)
              (("2" (expand names)
                (("2" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (inst 2 n)
                      (("1" (replace -2 -1 RL) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies)
                    (("2" (skolem -2 n2)
                      (("2" (flatten)
                        (("2" (expand add)
                          (("2" (bddsimp)
                            (("1" (replace -3 -2)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand member)
                              (("2"
                                (inst 2 n2)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notF)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (expand names 1)
              (("1" (inst -1 x x2 c)
                (("1" (bddsimp)
                  (("1" (expand satisfies -4) (("1" (propax) nil nil))
                    nil)
                   ("2" (expand satisfies -2)
                    (("2" (expand replace 5)
                      (("2" (expand satisfies 5)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 x x2 c)
              (("2" (bddsimp)
                (("1" (expand names 1) (("1" (propax) nil nil)) nil)
                 ("2" (expand names 1)
                  (("2" (expand satisfies 2)
                    (("2" (expand replace -5)
                      (("2" (expand satisfies -5)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand names 3)
                  (("3" (expand satisfies 4) (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (x x2 c))
          (("5" (bddsimp)
            (("1" (expand names 1)
              (("1" (bddsimp)
                (("1" (inst -1 x x2 c)
                  (("1" (bddsimp)
                    (("1" (inst -4 x x2 c)
                      (("1" (bddsimp)
                        (("1" (expand satisfies -6)
                          (("1" (bddsimp)
                            (("1" (expand replace 3)
                              (("1"
                                (expand satisfies 3)
                                (("1" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies -4)
                          (("2" (bddsimp) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand satisfies -3)
                      (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand names 1)
              (("2" (bddsimp)
                (("2" (inst -1 x x2 c)
                  (("2" (bddsimp)
                    (("1" (inst -4 x x2 c)
                      (("1" (bddsimp)
                        (("1" (expand satisfies 3)
                          (("1" (bddsimp) nil nil)) nil)
                         ("2" (expand satisfies 5)
                          (("2" (bddsimp)
                            (("2" (expand replace -4)
                              (("2"
                                (expand satisfies -4)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 x x2 c)
                      (("2" (bddsimp)
                        (("1" (expand replace -4)
                          (("1" (expand satisfies -4)
                            (("1" (bddsimp) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" FormulaTheory nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (satisfiesPreservesReplace7 0
  (satisfiesPreservesReplace7-1 nil 3711281022
   ("" (induct f)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (x x2 c))
        (("3" (bddsimp)
          (("1" (expand names 1)
            (("1" (expand satisfies -2)
              (("1" (expand replace)
                (("1" (lift-if)
                  (("1" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (inst 2 x2)
                            (("1" (expand add) (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (inst 2 x)
                            (("2" (expand add)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand member)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (skolem -2 n2)
                        (("2" (inst 3 n2)
                          (("2" (expand add)
                            (("2" (expand member)
                              (("2"
                                (assert)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand names)
            (("2" (expand replace)
              (("2" (lift-if)
                (("2" (expand satisfies)
                  (("2" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (inst 2 x)
                        (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skolem -2 n2)
                      (("2" (expand add)
                        (("2" (bddsimp)
                          (("1" (replace -3 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand member)
                            (("2" (inst 2 n)
                              (("2"
                                (replace -3 -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notF)
      (("4" (bddsimp)
        (("4" (skolem 1 (x x2 c))
          (("4" (bddsimp)
            (("1" (expand satisfies -3)
              (("1" (expand names 1)
                (("1" (inst -1 x x2 c)
                  (("1" (bddsimp) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (replace def-decl "Formula_" FormulaTheory nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceSameNames 0
  (replaceSameNames-1 nil 3708251195
   ("" (induct f)
    (("1" (skolem 1 n)
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 n)
      (("2" (bddsimp)
        (("2" (expand replace) (("2" (propax) nil nil)) nil)) nil))
      nil)
     ("3" (skolem 1 n1)
      (("3" (skolem 1 n)
        (("3" (bddsimp)
          (("3" (expand replace)
            (("3" (lift-if)
              (("3" (bddsimp)
                (("3" (expand names 1) (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 f)
      (("4" (bddsimp)
        (("4" (skolem 1 n)
          (("4" (inst -1 n)
            (("4" (bddsimp)
              (("1" (expand names 1) (("1" (propax) nil nil)) nil)
               ("2" (expand names 1)
                (("2" (expand replace 2)
                  (("2" (expand names 2) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 n)
          (("5" (bddsimp)
            (("5" (expand names 1)
              (("5" (bddsimp)
                (("5" (inst -1 n)
                  (("5" (inst -2 n)
                    (("5" (bddsimp)
                      (("5" (expand replace 3)
                        (("5" (assert) (("5" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 n)
          (("6" (bddsimp)
            (("6" (expand names 1)
              (("6" (bddsimp)
                (("6" (inst -1 n)
                  (("6" (inst -2 n)
                    (("6" (bddsimp) (("6" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (notInNames 0
  (notInNames-1 nil 3707733320
   ("" (induct f)
    (("1" (skolem 1 (x y))
      (("1" (flatten)
        (("1" (expand names)
          (("1" (expand rename) (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (expand rename) (("2" (propax) nil nil)) nil)
     ("3" (skolem 1 namef)
      (("3" (expand rename)
        (("3" (skolem 1 (x y))
          (("3" (flatten)
            (("3" (lift-if)
              (("3" (bddsimp)
                (("3" (expand names) (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (flatten)
        (("4" (skolem 1 (x y))
          (("4" (flatten)
            (("4" (instantiate -1 (x y))
              (("4" (bddsimp)
                (("1" (expand rename)
                  (("1" (expand names 1) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (expand names 1)
                  (("2" (replace -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (and1 and2))
      (("5" (flatten) (("5" (grind) nil nil)) nil)) nil)
     ("6" (skolem 1 (impl1 impl2))
      (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (rename def-decl "Formula_" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak)))

