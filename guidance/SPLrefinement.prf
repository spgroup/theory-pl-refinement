(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3592752661 ("" (grind) nil nil)
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (refFM 0
  (refFM-1 nil 3592752709 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   shostak))
 (assetMappingRefinement 0
  (assetMappingRefinement-1 nil 3662300297
   ("" (expand* preorder? reflexive? transitive? "|>")
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (assert)
            (("1" (skolem 1 an)
              (("1" (flatten)
                (("1" (instantiate -2 an)
                  (("1" (assert)
                    (("1" (skolem -2 (a1 a2))
                      (("1" (flatten)
                        (("1" (instantiate -6 an)
                          (("1" (assert)
                            (("1" (skolem -6 (a3 a4))
                              (("1"
                                (flatten)
                                (("1"
                                  (typepred y)
                                  (("1"
                                    (expand unique)
                                    (("1"
                                      (instantiate -2 (an a2 a3))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (instantiate 1 (a1 a4))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use assetRefinement)
                                                (("1"
                                                  (expand*
                                                   preorder?
                                                   reflexive?
                                                   transitive?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (instantiate
                                                       -2
                                                       (a1 a3 a4))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use assetRefinement)
        (("2" (expand* preorder? reflexive? transitive?)
          (("2" (flatten)
            (("2" (skolem 1 x)
              (("2" (skolem 1 an)
                (("2" (flatten)
                  (("2" (expand dom -3)
                    (("2" (skolem -3 a)
                      (("2" (instantiate 1 (a a))
                        (("2" (instantiate -1 a)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (\|> const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (amRefCompositional 0
  (amRefCompositional-1 nil 3662301964
   ("" (skolem 1 (a1 a2))
    (("" (expand "|>")
      (("" (flatten)
        ((""
          (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
          (("1" (bddsimp)
            (("1" (skolem 1 ans)
              (("1" (flatten)
                (("1" (lemma sets_lemmas[AssetName].nonempty_member)
                  (("1" (expand member)
                    (("1" (instantiate -1 ans)
                      (("1" (expand nonempty?)
                        (("1" (bddsimp)
                          (("1" (postpone) nil nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eqCK 0
  (eqCK-1 nil 3661768885 ("" (grind) nil nil)
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (weakerEqReflexive 0
  (weakerEqReflexive-1 nil 3661768915 ("" (grind) nil nil)
   ((weakerEqCK const-decl "bool" SPLrefinement nil)) shostak))
 (weakerEqSymmetric 0
  (weakerEqSymmetric-1 nil 3661768925 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   shostak))
 (weakerEqTransitive 0
  (weakerEqTransitive-1 nil 3661768931 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   shostak))
 (plRef 0
  (plRef-1 nil 3655053684
   ("" (expand* preorder? plRefinement)
    (("" (bddsimp)
      (("1" (expand transitive?)
        (("1" (skolem 1 (x y z))
          (("1" (flatten)
            (("1" (skolem 1 c1)
              (("1" (flatten)
                (("1" (instantiate -1 c1)
                  (("1" (assert)
                    (("1" (skolem -1 c2)
                      (("1" (flatten)
                        (("1" (instantiate -3 c2)
                          (("1" (assert)
                            (("1" (skolem -3 c3)
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate 1 c3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma assetRefinement)
                                      (("1"
                                        (expand* preorder? transitive?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate
                                             -2
                                             ("([||](K(x))(A(x))(c1))"
                                              "([||](K(y))(A(y))(c2))"
                                              "([||](K(z))(A(z))(c3))"))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand reflexive?)
        (("2" (skolem 1 x)
          (("2" (skolem 1 c)
            (("2" (flatten)
              (("2" (typepred x)
                (("2" (expand wfPL)
                  (("2" (instantiate -1 c)
                    (("2" (assert)
                      (("2" (instantiate 1 c)
                        (("2" (assert)
                          (("2" (lemma assetRefinement)
                            (("2" (expand* preorder? reflexive?)
                              (("2"
                                (flatten)
                                (("2"
                                  (instantiate
                                   -1
                                   "([||](K(x))(A(x))(c))")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assetRefinement formula-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (plRefAlt 0
  (plRefAlt-1 nil 3655127891
   ("" (expand* preorder? reflexive? transitive? plRefinementAlt)
    (("" (bddsimp)
      (("1" (use assetRefinement)
        (("1" (expand preorder?)
          (("1" (expand transitive?)
            (("1" (flatten)
              (("1" (skolem 1 (x y z))
                (("1" (flatten)
                  (("1" (skolem 1 p1)
                    (("1" (flatten)
                      (("1" (instantiate -3 p1)
                        (("1" (assert)
                          (("1" (skolem -3 p2)
                            (("1" (flatten)
                              (("1"
                                (instantiate -5 p2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -5 p3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -2 (p1 p2 p3))
                                        (("1"
                                          (instantiate 1 p3)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (use assetRefinement)
          (("2" (expand* preorder? reflexive?)
            (("2" (flatten)
              (("2" (skolem 1 p)
                (("2" (flatten)
                  (("2" (instantiate -1 p)
                    (("2" (instantiate 1 p) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRefinementAlt const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (plRefEq 0
  (plRefEq-1 nil 3655128751
   ("" (skolem 1 (pl1 pl2))
    (("" (bddsimp)
      (("1" (expand* plRefinement plRefinementAlt)
        (("1" (skolem 1 p1)
          (("1" (bddsimp)
            (("1" (expand products)
              (("1" (skolem -2 c1)
                (("1" (inst -1 c1)
                  (("1" (bddsimp)
                    (("1" (skolem -2 c2)
                      (("1" (bddsimp)
                        (("1" (inst 1 "([||](K(pl2))(A(pl2))(c2))")
                          (("1" (bddsimp)
                            (("1" (assert) nil nil)
                             ("2" (inst 1 c2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* plRefinementAlt plRefinement)
        (("2" (skolem 1 c1)
          (("2" (bddsimp)
            (("2" (inst -2 "([||](K(pl1))(A(pl1))(c1))")
              (("2" (bddsimp)
                (("1" (skolem -2 p2)
                  (("1" (expand products)
                    (("1" (bddsimp)
                      (("1" (skolem -2 c2)
                        (("1" (inst 1 c2)
                          (("1" (bddsimp) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand products) (("2" (inst 2 c1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (plRefinementAlt const-decl "bool" SPLrefinement nil))
   shostak))
 (strongerPLref 0
  (strongerPLref-1 nil 3662300538
   ("" (expand* strongerPLrefinement preorder? reflexive? transitive?)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 c1)
            (("1" (flatten)
              (("1" (instantiate -1 c1)
                (("1" (instantiate -2 c1)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use assetRefinement)
                              (("1"
                                (expand* preorder? transitive?)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate
                                     -2
                                     ("([||](K(x))(A(x))(c1))"
                                      "([||](K(y))(A(y))(c1))"
                                      "([||](K(z))(A(z))(c1))"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 c)
          (("2" (flatten)
            (("2" (use assetRefinement)
              (("2" (expand* preorder? transitive?)
                (("2" (flatten)
                  (("2" (expand* reflexive?)
                    (("2" (instantiate -1 "([||](K(x))(A(x))(c))")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   shostak))
 (plStrongSubset 0
  (plStrongSubset-1 nil 3662300668
   ("" (skolem 1 (pl1 pl2))
    (("" (expand* strongerPLrefinement subset? member)
      (("" (flatten)
        (("" (skolem 1 x)
          (("" (flatten)
            (("" (instantiate -1 x) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil))
   shostak))
 (totalRefIFFExistsFun_TCC1 0
  (totalRefIFFExistsFun_TCC1-1 nil 3662729501
   ("" (subtype-tcc) nil nil) nil nil))
 (totalRefIFFExistsFun 0
  (totalRefIFFExistsFun-2 nil 3662729534
   ("" (skolem 1 (pl1 pl2))
    (("" (bddsimp)
      (("1" (expand plRefinement)
        (("1" (expand plRefinementFun)
          (("1"
            (inst 1
             "LAMBDA (c1:Conf | member(c1,{||}(F(pl1)))) : choose({c2: Conf | member(c2,{||}(F(pl2))) AND (prod(pl1,c1) |- prod(pl2,c2))})")
            (("1" (skolem 1 c1)
              (("1" (inst -1 c1)
                (("1" (bddsimp)
                  (("1" (expand prod)
                    (("1" (skolem -2 c2) (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 c1)
              (("2" (expand member) (("2" (propax) nil nil)) nil)) nil)
             ("3" (skolem 1 c1)
              (("3" (inst -1 c1)
                (("3" (bddsimp)
                  (("1" (skolem -1 c2)
                    (("1" (expand member) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (typepred c1)
                    (("2" (expand member) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skolem 1 c1)
              (("4" (inst -1 c1)
                (("4" (bddsimp)
                  (("1" (skolem -1 c2) (("1" (grind) nil nil)) nil)
                   ("2" (typepred c1)
                    (("2" (expand member) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand plRefinement)
        (("2" (skolem -1 f)
          (("2" (expand plRefinementFun)
            (("2" (skolem 1 c)
              (("2" (inst -1 c)
                (("2" (typepred "f(c)")
                  (("1" (expand prod)
                    (("1" (bddsimp)
                      (("1" (inst 1 "f(c)") (("1" (bddsimp) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (bddsimp) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" SPLrefinement
     nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (pl2 skolem-const-decl "PL" SPLrefinement nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (pl1 skolem-const-decl "PL" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (choose const-decl "(p)" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (plRefinementFun const-decl "bool" SPLrefinement nil))
   nil)
  (totalRefIFFExistsFun-1 nil 3662729502 ("" (postpone) nil nil) nil
   shostak))
 (weakFMcompositionality 0
  (weakFMcompositionality-1 nil 3662300689
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand plRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (fmEquivalenceCompositionality 0
  (fmEquivalenceCompositionality-1 nil 3662300735
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs plRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   shostak))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (ckEquivalenceCompositionality 0
  (ckEquivalenceCompositionality-1 nil 3662300801
   ("" (skolem 1 (pl k))
    (("" (typepred pl)
      (("" (expand* equivalentCKs plRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (weakerCKcompositionality 0
  (weakerCKcompositionality-1 nil 3662300846
   ("" (assert)
    (("" (skolem 1 (pl ck))
      (("" (flatten)
        (("" (lemma weakerCKcompositionality_TCC1)
          (("" (instantiate -1 (pl ck "F(pl)"))
            (("" (instantiate -1 "K(pl)")
              ((""
                (instantiate -1
                 "(# F := F(pl), A := A(pl), K := ck #)")
                (("" (assert)
                  (("" (expand plRefinement)
                    (("" (expand weakerEqCK)
                      (("" (skolem 1 c1)
                        (("" (flatten)
                          (("" (instantiate 1 c1)
                            (("" (assert)
                              ((""
                                (instantiate -2 "A(pl)")
                                ((""
                                  (instantiate -2 c1)
                                  ((""
                                    (assert)
                                    ((""
                                      (use assetRefinement)
                                      ((""
                                        (expand* preorder? reflexive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (instantiate
                                             -1
                                             "([||](K(pl))(A(pl))(c1))")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakerCKcompositionality_TCC1 subtype-tcc nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3592752552
   ("" (skolem 1 (pl am a))
    (("" (flatten)
      (("" (skolem 1 pl2)
        (("" (flatten)
          (("" (lemma amRef)
            (("" (instantiate -1 (a am))
              (("" (assert)
                (("" (typepred pl)
                  (("" (expand wfPL)
                    (("" (replace -5)
                      (("" (assert)
                        (("" (skolem 1 c)
                          (("" (flatten)
                            (("" (instantiate -2 ("K(pl)" c))
                              ((""
                                (instantiate -1 c)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil))
   nil))
 (amRefinementCompositionality 0
  (amRefinementCompositionality-1 nil 3662300855
   ("" (skolem 1 (pl a))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* plRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" a))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   shostak))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3592752552
   ("" (skolem 1 (pl fm am ck f))
    (("" (flatten)
      (("" (skolem 1 k)
        (("" (flatten)
          (("" (skolem 1 a)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (typepred pl)
                    (("" (expand wfPL)
                      (("" (replace -8)
                        (("" (assert)
                          (("" (expand* equivalentFMs equivalentCKs)
                            (("" (lemma amRef)
                              ((""
                                (instantiate -1 (a am))
                                ((""
                                  (assert)
                                  ((""
                                    (skolem 1 c)
                                    ((""
                                      (flatten)
                                      ((""
                                        (instantiate -2 c)
                                        ((""
                                          (instantiate -1 (k c))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((amRef formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (fullCompositionality 0
  (fullCompositionality-1 nil 3662301214
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRef)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   shostak))
 (weakFullCompositionality 0
  (weakFullCompositionality-1 nil 3662301677
   ("" (lemma fmEquivalenceCompositionality_TCC1)
    (("" (assert)
      (("" (lemma amRefinementCompositionality_TCC1)
        (("" (assert)
          (("" (lemma weakerCKcompositionality_TCC1)
            (("" (skolem 1 (pl fm am ck))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    (("" (instantiate -1 (pl ck))
                      (("" (assert)
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma amRefinementCompositionality)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (lemma weakFMcompositionality)
                                      ((""
                                        (assert)
                                        ((""
                                          (instantiate
                                           -1
                                           ("(# F := F(pl), A := am, K := ck #)"
                                            fm))
                                          ((""
                                            (assert)
                                            ((""
                                              (use plRef)
                                              ((""
                                                (expand preorder?)
                                                ((""
                                                  (expand transitive?)
                                                  ((""
                                                    (flatten)
                                                    ((""
                                                      (copy -2)
                                                      ((""
                                                        (instantiate
                                                         -1
                                                         (pl
                                                          "(# F := F(pl), A := A(pl), K := ck #)"
                                                          "(# F := F(pl), A := am, K := ck #)"))
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (instantiate
                                                             -3
                                                             (pl
                                                              "(# F := F(pl), A := am, K := ck #)"
                                                              "(# F := fm, A := am, K := ck #)"))
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (weakerCKcompositionality_TCC1 subtype-tcc nil SPLrefinement nil)
    (amRefinementCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil)
    (fmEquivalenceCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil))
   shostak))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3592752552
   ("" (skolem 1 (pl fm am ck f))
    (("" (flatten)
      (("" (skolem 1 k)
        (("" (flatten)
          (("" (skolem 1 a)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (lemma fmEquivalenceCompositionality_TCC1)
                    (("" (instantiate -1 (pl fm f))
                      (("" (assert)
                        ((""
                          (instantiate -1
                           "(# F := fm, A := A(pl), K := K(pl) #)")
                          ((""
                            (lemma amRefinementCompositionality_TCC1)
                            ((""
                              (instantiate -1
                               ("(# F := fm, A := A(pl), K := K(pl) #)"
                                am
                                a))
                              (("1"
                                (assert)
                                (("1"
                                  (instantiate
                                   -1
                                   "(# F := fm, A := am, K := K(pl) #)")
                                  (("1"
                                    (lemma
                                     weakerCKcompositionality_TCC1)
                                    (("1"
                                      (instantiate
                                       -1
                                       ("(# F := fm, A := am, K := K(pl) #)"
                                        ck
                                        fm))
                                      (("1"
                                        (instantiate -1 k)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (instantiate
                                             -1
                                             "(# F := fm, A := am, K := ck #)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand equivalentFMs)
                                                (("1"
                                                  (expand weakerEqCK)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakerEqCK const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil) nil nil nil
    (weakerCKcompositionality_TCC1 subtype-tcc nil SPLrefinement nil)
    (amRefinementCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (fmEquivalenceCompositionality_TCC1 subtype-tcc nil SPLrefinement
     nil))
   nil))
 (fullCompositionality2 0
  (fullCompositionality2-1 nil 3662301762
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fullCompositionality2_TCC1)
          (("" (instantiate -1 (pl fm am ck "F(pl)"))
            (("" (instantiate -1 "K(pl)")
              (("" (instantiate -1 "A(pl)")
                (("" (instantiate -1 "(# F := fm, A := am, K := ck #)")
                  (("" (assert)
                    (("" (lemma weakerCKcompositionality)
                      (("" (instantiate -1 (pl ck))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma amRefinementCompositionality)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (lemma
                                       fmEquivalenceCompositionality)
                                      ((""
                                        (instantiate
                                         -1
                                         ("(# F := F(pl), A := am, K := ck #)"
                                          fm))
                                        ((""
                                          (assert)
                                          ((""
                                            (lemma plRef)
                                            ((""
                                              (expand*
                                               preorder?
                                               transitive?)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (copy -2)
                                                  ((""
                                                    (instantiate
                                                     -1
                                                     (pl
                                                      "(# F := F(pl), A := A(pl), K := ck #)"
                                                      "(# F := F(pl), A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (instantiate
                                                         -3
                                                         (pl
                                                          "(# F := F(pl), A := am, K := ck #)"
                                                          "(# F := fm, A := am, K := ck #)"))
                                                        ((""
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullCompositionality2_TCC1 subtype-tcc nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (weakerCKcompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (plRef formula-decl nil SPLrefinement nil))
   shostak))
 (weakFullCompositionality2 0
  (weakFullCompositionality2-1 nil 3662301917
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma weakerCKcompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            ((""
                              (instantiate -1
                               ("(# F := F(pl), A := am, K := ck #)"
                                fm))
                              ((""
                                (assert)
                                ((""
                                  (lemma plRef)
                                  ((""
                                    (expand* preorder? transitive?)
                                    ((""
                                      (flatten)
                                      ((""
                                        (copy -2)
                                        ((""
                                          (instantiate
                                           -1
                                           (pl
                                            "(# F := F(pl), A := A(pl), K := ck #)"
                                            "(# F := F(pl), A := am, K := ck #)"))
                                          ((""
                                            (assert)
                                            ((""
                                              (instantiate
                                               -3
                                               (pl
                                                "(# F := F(pl), A := am, K := ck #)"
                                                "(# F := fm, A := am, K := ck #)"))
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakerCKcompositionality formula-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   shostak)))

