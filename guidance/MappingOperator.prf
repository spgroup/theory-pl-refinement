(MappingOperator
 (replace_TCC1 0
  (replace_TCC1-1 nil 3711728977 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC2 0
  (replace_TCC2-1 nil 3711728977 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC3 0
  (replace_TCC3-1 nil 3711728977 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC4 0
  (replace_TCC4-1 nil 3711728977 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC5 0
  (replace_TCC5-1 nil 3711728977 ("" (termination-tcc) nil nil) nil
   nil))
 (replace_TCC6 0
  (replace_TCC6-1 nil 3711728977 ("" (subtype-tcc) nil nil) nil nil))
 (replaceMultiple_TCC1 0
  (replaceMultiple_TCC1-1 nil 3711728977 ("" (subtype-tcc) nil nil) nil
   nil))
 (replaceFalseSatisfies 0
  (replaceFalseSatisfies-1 nil 3711729325
   ("" (induct f)
    (("1" (skolem 1 (f0 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 c))
      (("2" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 c))
        (("3" (bddsimp)
          (("1" (expand replace)
            (("1" (lift-if)
              (("1" (expand satisfies -1)
                (("1" (skolem -1 n2)
                  (("1" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (replace -2 -1)
                        (("1" (replace -3 1 RL)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (inst 3 n2) (("2" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand replace)
            (("2" (expand satisfies 2)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand satisfies) (("1" (propax) nil nil))
                    nil)
                   ("2" (expand satisfies) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notF)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f0 c))
          (("5" (bddsimp)
            (("1" (inst -1 f0 c)
              (("1" (bddsimp)
                (("1" (inst -3 f0 c)
                  (("1" (bddsimp)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f0 c))
          (("6" (bddsimp)
            (("1" (inst -1 f0 c)
              (("1" (inst -2 f0 c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula_ type-decl nil Formula__adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (FALSE? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (FALSE_FORMULA adt-constructor-decl "(FALSE?)" Formula__adt nil)
    (Formula__induction formula-decl nil Formula__adt nil))
   shostak))
 (replaceRemoveSemantics 0
  (replaceRemoveSemantics-1 nil 3711736912
   ("" (skolem 1 (c i i2 m f0))
    (("" (bddsimp)
      (("" (expand subset?)
        (("" (expand semantics)
          (("" (expand map)
            (("" (lemma replaceFalseSatisfies)
              (("" (decompose-equality)
                (("" (bddsimp)
                  (("1" (skolem -1 an)
                    (("1" (flatten)
                      (("1" (inst 1 an)
                        (("1" (expand eval)
                          (("1" (expand assetsCK)
                            (("1" (skolem -1 it)
                              (("1"
                                (flatten)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (inst -5 "(an, x!1)")
                                    (("1"
                                      (expand member)
                                      (("1" (bddsimp) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     1
                                     "replace(it,f0,FALSE_FORMULA)")
                                    (("2"
                                      (bddsimp)
                                      (("1"
                                        (expand evalCK)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (inst -5 "exp(it)" f0 c)
                                            (("1"
                                              (bddsimp)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem -1 an)
                    (("2" (expand eval)
                      (("2" (expand assetsCK)
                        (("2" (bddsimp)
                          (("2" (skolem -1 it)
                            (("2" (bddsimp)
                              (("2"
                                (expand evalCK)
                                (("2"
                                  (bddsimp)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantics const-decl "finite_sets[Asset].finite_set" CKComp nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil CKComp nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set" CKComp
     nil)
    (CK type-eq-decl nil CKComp nil) (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (evalCK const-decl "finite_sets[Item].finite_set" CKComp nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (replace const-decl "CKComp.CK" MappingOperator nil)
    (FALSE? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (FALSE_FORMULA adt-constructor-decl "(FALSE?)" Formula__adt nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (eval const-decl "finite_sets[AssetName].finite_set" CKComp nil)
    (replaceFalseSatisfies formula-decl nil MappingOperator nil))
   shostak))
 (replacePreservesWf 0
  (replacePreservesWf-1 nil 3728283467
   ("" (skolem 1 (i m f0 f))
    (("" (bddsimp)
      (("" (expand assetsInCK)
        (("" (skolem 1 item)
          (("" (bddsimp)
            (("" (expand replace)
              (("" (skolem -2 item2)
                (("" (bddsimp)
                  (("" (inst -1 item2)
                    (("" (bddsimp)
                      (("" (expand replace)
                        (("" (expand subset?)
                          (("" (skolem 1 an)
                            (("" (bddsimp)
                              ((""
                                (expand member)
                                ((""
                                  (inst -2 an)
                                  ((""
                                    (bddsimp)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((replace const-decl "CKComp.CK" MappingOperator nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (Item type-eq-decl nil CKComp nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (assetsInCK const-decl "bool" CKComp nil))
   shostak))
 (replaceMultiplePreservesWf 0
  (replaceMultiplePreservesWf-1 nil 3729526727
   ("" (skolem 1 (i m f0 f1))
    (("" (bddsimp)
      (("" (expand assetsInCK)
        (("" (skolem 1 item)
          (("" (bddsimp)
            (("" (expand replaceMultiple)
              (("" (skolem -2 item2)
                (("" (bddsimp)
                  (("1" (inst -1 item)
                    (("1" (bddsimp)
                      (("1" (replace -2 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma replacePreservesWf)
                    (("2" (inst -1 i m f0 "NAME_FORMULA(f1)")
                      (("2" (expand assetsInCK)
                        (("2" (bddsimp) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma replacePreservesWf)
                    (("3" (inst -1 i m f0 "NAME_FORMULA(f1)")
                      (("3" (expand assetsInCK)
                        (("3" (bddsimp) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma replacePreservesWf)
                    (("4"
                      (inst -1 i m f0
                       "IMPLIES_FORMULA(NOT_FORMULA(NAME_FORMULA(f0)),NAME_FORMULA(f1))")
                      (("4" (expand assetsInCK)
                        (("4" (bddsimp) (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((replaceMultiple const-decl "CKComp.CK" MappingOperator nil)
    (Item type-eq-decl nil CKComp nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (CK type-eq-decl nil CKComp nil) (Name type-decl nil Name nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (replace const-decl "CKComp.CK" MappingOperator nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (replacePreservesWf formula-decl nil MappingOperator nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (assetsInCK const-decl "bool" CKComp nil))
   shostak))
 (replaceNameSatisfies 0
  (replaceNameSatisfies-1 nil 3711737220
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 f1 c))
        (("3" (bddsimp)
          (("1" (expand replace)
            (("1" (expand satisfies -1)
              (("1" (skolem -1 n2)
                (("1" (flatten)
                  (("1" (lift-if)
                    (("1" (bddsimp)
                      (("1" (expand satisfies) (("1" (grind) nil nil))
                        nil)
                       ("2" (expand satisfies)
                        (("2" (inst 4 n2) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 3)
            (("2" (expand replace)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (skolem -2 n1) (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notF)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceNameSatisfiesRemConf 0
  (replaceNameSatisfiesRemConf-1 nil 3711737565
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (grind) nil nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 f1 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -3)
            (("1" (expand replace)
              (("1" (lift-if)
                (("1" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (skolem -3 n2)
                      (("1" (bddsimp)
                        (("1" (inst 2 f1)
                          (("1" (expand remove)
                            (("1" (bddsimp)
                              (("1"
                                (expand member)
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies)
                    (("2" (skolem -3 n2)
                      (("2" (bddsimp)
                        (("2" (inst 3 n2)
                          (("2" (expand remove)
                            (("2" (expand member)
                              (("2"
                                (bddsimp)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 2)
            (("2" (expand replace)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (skolem -4 n2)
                      (("1" (flatten)
                        (("1" (expand remove)
                          (("1" (expand member)
                            (("1" (flatten)
                              (("1"
                                (inst 2 f0)
                                (("1"
                                  (bddsimp)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies)
                    (("2" (skolem -3 n2)
                      (("2" (bddsimp)
                        (("2" (inst 2 n2)
                          (("2" (expand remove)
                            (("2" (expand member)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notF)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c) (("1" (grind) nil nil)) nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceMergeSemanticsNonePresent 0
  (replaceMergeSemanticsNonePresent-1 nil 3711743204
   ("" (lemma replaceNameSatisfies)
    (("" (skolem 1 (c i m f0 f1))
      (("" (bddsimp)
        (("" (expand semantics)
          (("" (expand map)
            (("" (decompose-equality)
              (("" (bddsimp)
                (("1" (skolem -1 an)
                  (("1" (inst 1 an)
                    (("1" (expand eval)
                      (("1" (expand assetsCK)
                        (("1" (bddsimp)
                          (("1" (skolem -1 it)
                            (("1" (bddsimp)
                              (("1"
                                (inst
                                 1
                                 "replace(it,f0,NAME_FORMULA(f1))")
                                (("1"
                                  (bddsimp)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem -1 an)
                  (("2" (inst 1 an)
                    (("2" (expand eval)
                      (("2" (bddsimp)
                        (("2" (expand assetsCK)
                          (("2" (skolem -2 it2)
                            (("2" (bddsimp)
                              (("2"
                                (expand evalCK)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand replace -3)
                                    (("2"
                                      (skolem -3 it)
                                      (("2"
                                        (inst 1 it)
                                        (("2"
                                          (bddsimp)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantics const-decl "finite_sets[Asset].finite_set" CKComp nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil CKComp nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKComp nil) (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (eval const-decl "finite_sets[AssetName].finite_set" CKComp nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (replace const-decl "CKComp.CK" MappingOperator nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set" CKComp nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set" CKComp
     nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (replaceNameSatisfies formula-decl nil MappingOperator nil))
   shostak))
 (replaceMergeSemanticsBothPresent 0
  (replaceMergeSemanticsBothPresent-1 nil 3711743422
   ("" (lemma replaceNameSatisfiesRemConf)
    (("" (skolem 1 (c i m f0 f1))
      (("" (bddsimp)
        (("" (expand semantics)
          (("" (expand map)
            (("" (decompose-equality 2)
              (("" (bddsimp)
                (("1" (skolem -1 an)
                  (("1" (inst 1 an)
                    (("1" (bddsimp)
                      (("1" (expand eval)
                        (("1" (expand assetsCK)
                          (("1" (skolem -1 it)
                            (("1"
                              (inst 1
                               "replace(it,f0,NAME_FORMULA(f1))")
                              (("1"
                                (bddsimp)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem -1 an)
                  (("2" (inst 1 an)
                    (("2" (bddsimp)
                      (("2" (expand eval)
                        (("2" (expand assetsCK)
                          (("2" (skolem -2 i2)
                            (("2" (flatten)
                              (("2"
                                (expand evalCK)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand replace -3)
                                    (("2"
                                      (skolem -3 it)
                                      (("2"
                                        (inst 1 it)
                                        (("2"
                                          (bddsimp)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantics const-decl "finite_sets[Asset].finite_set" CKComp nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil CKComp nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKComp nil) (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (eval const-decl "finite_sets[AssetName].finite_set" CKComp nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (replace const-decl "CKComp.CK" MappingOperator nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (remove const-decl "set" sets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set" CKComp
     nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (evalCK const-decl "finite_sets[Item].finite_set" CKComp nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (replaceNameSatisfiesRemConf formula-decl nil MappingOperator nil))
   shostak))
 (replaceAndSatisfies 0
  (replaceAndSatisfies-1 nil 3711738227
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 f1 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -1)
            (("1" (skolem -1 n2)
              (("1" (bddsimp)
                (("1" (expand replace)
                  (("1" (lift-if)
                    (("1" (bddsimp)
                      (("1" (expand satisfies)
                        (("1" (expand satisfies)
                          (("1" (bddsimp)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand satisfies)
                        (("2" (inst 4 n2) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand replace)
            (("2" (lift-if)
              (("2" (expand satisfies 3)
                (("2" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (flatten)
                      (("1" (expand satisfies)
                        (("1" (skolem -2 n2)
                          (("1" (skolem -3 n3)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand satisfies) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceImpliesSatisfies 0
  (replaceImpliesSatisfies-1 nil 3711738539
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp)
        (("1" (expand replace) (("1" (propax) nil nil)) nil)
         ("2" (expand replace) (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 f1 c))
        (("3" (bddsimp)
          (("1" (expand satisfies -1)
            (("1" (skolem -1 n2)
              (("1" (flatten)
                (("1" (expand replace)
                  (("1" (lift-if)
                    (("1" (bddsimp)
                      (("1" (expand satisfies) (("1" (grind) nil nil))
                        nil)
                       ("2" (expand satisfies)
                        (("2" (inst 4 n2) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 3)
            (("2" (expand replace)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand satisfies) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (inst -2 f g c)
            (("5" (bddsimp)
              (("1" (inst -1 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil)
               ("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Formula__induction formula-decl nil Formula__adt nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceNameSatisfiesAddConf 0
  (replaceNameSatisfiesAddConf-1 nil 3711738763
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f g c))
        (("3" (bddsimp)
          (("1" (expand satisfies -2)
            (("1" (skolem -2 n2)
              (("1" (flatten)
                (("1" (expand names)
                  (("1" (expand replace)
                    (("1" (lift-if)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (inst 2 g)
                            (("1" (expand add) (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (inst 3 n2)
                            (("2" (expand add)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand member)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand names)
            (("2" (expand satisfies 2)
              (("2" (expand replace)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (skolem -3 n2)
                        (("1" (flatten)
                          (("1" (expand add)
                            (("1" (expand member)
                              (("1"
                                (bddsimp)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (skolem -2 n2)
                        (("2" (flatten)
                          (("2" (inst 2 n2)
                            (("2" (expand add)
                              (("2"
                                (bddsimp)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand member)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (bddsimp)
        (("4" (skolem 1 (f g c))
          (("4" (bddsimp)
            (("1" (inst -1 f g c) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (grind) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil) ("8" (grind) nil nil)
                   ("9" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (grind) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil) ("8" (grind) nil nil)
                   ("9" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceAndSatisfiesAddConf 0
  (replaceAndSatisfiesAddConf-1 nil 3711739083
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (f g c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f g c))
        (("3" (bddsimp)
          (("1" (expand names)
            (("1" (expand satisfies -2)
              (("1" (expand replace)
                (("1" (skolem -2 n2)
                  (("1" (flatten)
                    (("1" (lift-if)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (bddsimp)
                            (("1" (expand satisfies)
                              (("1"
                                (inst 2 g)
                                (("1"
                                  (expand add)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand satisfies)
                              (("2"
                                (inst 2 n)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (inst 3 n2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand satisfies 2)
            (("2" (expand replace)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand satisfies)
                    (("1" (flatten)
                      (("1" (expand satisfies)
                        (("1" (expand names) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand names)
                    (("2" (expand satisfies)
                      (("2" (skolem -2 n2)
                        (("2" (inst 2 n2)
                          (("2" (bddsimp) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (inst -1 f g c)
              (("1" (inst -2 f g c)
                (("1" (bddsimp)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (grind) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil) ("8" (grind) nil nil)
                   ("9" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceImpliesSatisfiesAddConf 0
  (replaceImpliesSatisfiesAddConf-1 nil 3711744846
   ("" (induct f)
    (("1" (skolem 1 (f0 f1 c))
      (("1" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("2" (skolem 1 (f0 f1 c))
      (("2" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skolem 1 n)
      (("3" (skolem 1 (f0 f1 c))
        (("3" (bddsimp)
          (("1" (expand names)
            (("1" (expand satisfies -2)
              (("1" (skolem -2 n2)
                (("1" (flatten)
                  (("1" (expand replace)
                    (("1" (lift-if)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (inst 3 n2)
                            (("2" (bddsimp)
                              (("2"
                                (expand add)
                                (("2"
                                  (expand member)
                                  (("2" (bddsimp) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand names)
            (("2" (expand satisfies 2)
              (("2" (expand replace)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (expand satisfies)
                      (("1" (bddsimp)
                        (("1" (expand satisfies)
                          (("1" (skolem -3 n2)
                            (("1" (flatten)
                              (("1"
                                (inst 2 n)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satisfies)
                          (("2" (expand satisfies)
                            (("2" (skolem -3 n2)
                              (("2"
                                (inst 2 n2)
                                (("2"
                                  (bddsimp)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satisfies)
                      (("2" (skolem -2 n2)
                        (("2" (inst 2 n2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 notf)
      (("4" (bddsimp)
        (("4" (skolem 1 (f0 f1 c))
          (("4" (bddsimp)
            (("1" (inst -1 f0 f1 c)
              (("1" (bddsimp)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 (f1 f2))
      (("5" (bddsimp)
        (("5" (skolem 1 (f g c))
          (("5" (bddsimp)
            (("1" (expand names 1)
              (("1" (bddsimp)
                (("1" (inst -1 f g c)
                  (("1" (inst -2 f g c)
                    (("1" (bddsimp)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil) ("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 (f1 f2))
      (("6" (bddsimp)
        (("6" (skolem 1 (f g c))
          (("6" (bddsimp)
            (("1" (expand names 1)
              (("1" (bddsimp)
                (("1" (inst -1 f g c)
                  (("1" (inst -2 f g c)
                    (("1" (bddsimp)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil) ("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Formula__induction formula-decl nil Formula__adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (replace def-decl "Formula_" MappingOperator nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Formula_ type-decl nil Formula__adt nil))
   shostak))
 (replaceExtractNonePresent 0
  (replaceExtractNonePresent-1 nil 3711743586
   ("" (skolem 1 (c i M f0 f1))
    (("" (bddsimp)
      (("" (expand semantics)
        (("" (expand map)
          (("" (decompose-equality)
            (("" (bddsimp)
              (("1" (skolem -1 an)
                (("1" (inst 1 an)
                  (("1" (bddsimp)
                    (("1" (expand eval)
                      (("1" (expand assetsCK)
                        (("1" (skolem -1 it)
                          (("1" (bddsimp)
                            (("1" (inst 1 it)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand evalCK)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand replaceMultiple)
                                        (("1" (inst 1 it) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem -1 an)
                (("2" (inst 1 an)
                  (("2" (bddsimp)
                    (("2" (expand eval)
                      (("2" (expand assetsCK)
                        (("2" (skolem -2 it2)
                          (("2" (bddsimp)
                            (("2" (expand evalCK)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand replaceMultiple)
                                  (("2"
                                    (skolem -3 it)
                                    (("2"
                                      (bddsimp)
                                      (("1"
                                        (inst 1 it)
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 1 it)
                                        (("2"
                                          (lemma replaceNameSatisfies)
                                          (("2"
                                            (inst -1 "exp(it)" f0 f1 c)
                                            (("2"
                                              (bddsimp)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst 1 it)
                                        (("3"
                                          (lemma replaceAndSatisfies)
                                          (("3"
                                            (inst -1 "exp(it)" f0 f1 c)
                                            (("3"
                                              (bddsimp)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (inst 1 it)
                                        (("4"
                                          (lemma
                                           replaceImpliesSatisfies)
                                          (("4"
                                            (inst -1 "exp(it)" f0 f1 c)
                                            (("4"
                                              (bddsimp)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map const-decl "finite_sets[T].finite_set" maps nil)
    (evalCK const-decl "finite_sets[Item].finite_set" CKComp nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set" CKComp
     nil)
    (replaceNameSatisfies formula-decl nil MappingOperator nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (replaceAndSatisfies formula-decl nil MappingOperator nil)
    (replaceImpliesSatisfies formula-decl nil MappingOperator nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (replaceMultiple const-decl "CKComp.CK" MappingOperator nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (eval const-decl "finite_sets[AssetName].finite_set" CKComp nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil) (CK type-eq-decl nil CKComp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Item type-eq-decl nil CKComp nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKComp nil))
   shostak))
 (replaceExtractBothPresent 0
  (replaceExtractBothPresent-1 nil 3711744033
   ("" (skolem 1 (c i M f0 f1))
    (("" (bddsimp)
      (("" (expand semantics)
        (("" (expand map)
          (("" (decompose-equality 1)
            (("" (bddsimp)
              (("1" (skolem -1 an)
                (("1" (inst 1 an)
                  (("1" (bddsimp)
                    (("1" (expand eval)
                      (("1" (expand assetsCK)
                        (("1" (skolem -1 it)
                          (("1" (flatten)
                            (("1" (inst 1 it)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand evalCK)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand replaceMultiple)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (lemma satisfies1)
                                          (("1"
                                            (inst -7 it)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (inst
                                                 -1
                                                 "exp(it)"
                                                 c
                                                 f1)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (inst 1 it) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem -1 an)
                (("2" (inst 1 an)
                  (("2" (bddsimp)
                    (("2" (expand eval)
                      (("2" (expand assetsCK)
                        (("2" (skolem -2 it2)
                          (("2" (bddsimp)
                            (("2" (expand evalCK)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand replaceMultiple)
                                  (("2"
                                    (skolem -3 it)
                                    (("2"
                                      (bddsimp)
                                      (("1"
                                        (inst 1 it)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (lemma satisfies1)
                                            (("1"
                                              (inst -8 it)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "exp(it)"
                                                   c
                                                   f1)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -4 3 RL)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         replaceNameSatisfiesAddConf)
                                        (("2"
                                          (inst 1 it)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (inst -8 it)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "exp(it)"
                                                   f0
                                                   f1
                                                   c)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -5 -6)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         replaceAndSatisfiesAddConf)
                                        (("3"
                                          (inst 1 it)
                                          (("3"
                                            (bddsimp)
                                            (("1"
                                              (inst -8 it)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "exp(it)"
                                                   f0
                                                   f1
                                                   c)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -5 -6)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lemma
                                         replaceImpliesSatisfiesAddConf)
                                        (("4"
                                          (inst -8 it)
                                          (("4"
                                            (bddsimp)
                                            (("4"
                                              (inst
                                               -1
                                               "exp(it)"
                                               f0
                                               f1
                                               c)
                                              (("4"
                                                (bddsimp)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantics const-decl "finite_sets[Asset].finite_set" CKComp nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil CKComp nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKComp nil) (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (eval const-decl "finite_sets[AssetName].finite_set" CKComp nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (replaceMultiple const-decl "CKComp.CK" MappingOperator nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (replaceImpliesSatisfiesAddConf formula-decl nil MappingOperator
     nil)
    (replaceAndSatisfiesAddConf formula-decl nil MappingOperator nil)
    (replaceNameSatisfiesAddConf formula-decl nil MappingOperator nil)
    (replace const-decl "CKComp.Item" MappingOperator nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set" CKComp
     nil)
    (satisfies1 formula-decl nil FormulaTheory nil)
    (evalCK const-decl "finite_sets[Item].finite_set" CKComp nil)
    (map const-decl "finite_sets[T].finite_set" maps nil))
   shostak)))

