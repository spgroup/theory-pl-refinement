SPLrefinement: THEORY
BEGIN
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%% FEATURE MODELS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  % Assumption <Feature model semantics>
  Conf: TYPE
  FM: TYPE
  {||} : [FM -> set[Conf]]

  fm,fm1,fm2: VAR FM
  c,c1,c2: VAR Conf

  % Definition <Feature model refinement> -- definir com forall e exists
  |=(fm1,fm2): bool = 
    subset?({| fm1 |},{| fm2 |})

  % Definition <Feature model equivalence>
  equivalentFMs(fm1,fm2): bool = {|fm1|}={|fm2|}

  % Theorems <Feature model equivalence and refinement properties>
  eqFM:  THEOREM relations[FM].equivalence?( equivalentFMs ) 
  refFM: THEOREM orders[FM].preorder?( |= ) 

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%% ASSET MAPPING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 IMPORTING AssetMapping

  a1,a2: VAR Asset
  an,an1,an2: VAR AssetName
  aSet, S1,S2: VAR set[Asset]
  anSet: VAR finite_sets[AssetName].finite_set
  am,am1,am2: VAR AM


 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%% CONFIGURATION KNOWLEDGE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  CK: TYPE
  [||] : [CK->[AM->[Conf->finite_sets[Asset].finite_set]]]
  
  ck,ck1,ck2: VAR CK

  % Definition <CK equivalence>
  equivalentCKs(ck1,ck2): bool =
    [|ck1|]=[|ck2|]

  % Theorem <CK equivalence properties>
  eqCK: THEOREM relations[CK].equivalence?( equivalentCKs ) 

  % Axiom over ck evaluation 
  amRef: AXIOM
    FORALL(am1,am2): |>(am1,am2) =>
      FORALL(K:CK,c:Conf): 
      	 wfProduct(([| K |](am1))(c)) 
      => wfProduct(([| K |](am2))(c)) AND
      	    (([| K |](am1))(c) |- ([| K |](am2))(c) ) 

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%% SPL DEFINITION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  SPL : TYPE = [# F:FM, A:AM, K:CK #]

  % Definition <Well-formed SPL>
  wfPL(pl:SPL): bool =
    (FORALL c : {| F(pl) |}(c) =>  
		  wfProduct( ([| K(pl) |](A(pl)))(c) ) )


  % Definition <Product line> 
  PL : TYPE = (wfPL)

  pl,pl1,pl2: VAR PL

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%% PL REFINEMENT DEFINITION AND PROPERTIES %%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  % Definition <Product line refinement>
  plRefinement(pl1,pl2) : bool =
    (FORALL c1: {|F(pl1)|}(c1) => 
    		(EXISTS c2: {|F(pl2)|}(c2) AND
		    (
		    	( ([| K(pl1) |] (A(pl1))) (c1) )
			|- 
			( ([| K(pl2) |] (A(pl2))) (c2) )
    		    )
     ))

  % Theorem <Product line refinement is a pre-order>
  plRef: THEOREM orders[PL].preorder?( plRefinement ) 

 % PL Refinement compositionality
  weakFMcompositionality: THEOREM
    FORALL(pl,fm):
    ( 
      (F |= fm) AND wfPL(pl2)
     => 
        plRefinement(pl,pl2) 
    )
    WHERE F=F(pl),pl2=(# F := fm, A := A(pl), K := K(pl) #)

  % Theorem <Feature model equivalence compositionality>
  fmEquivalenceCompositionality: THEOREM
    FORALL(pl,fm):
    ( 
      equivalentFMs(F,fm) 
     => 
        plRefinement(pl,pl2) AND wfPL(pl2)
    )
    WHERE F=F(pl),pl2=(# F := fm, A := A(pl), K := K(pl) #)

  % Theorem <CK equivalence compositionality>
  ckEquivalenceCompositionality: THEOREM
    FORALL(pl,ck):
    ( 
      equivalentCKs(K,ck)
     => 
        plRefinement(pl,pl2) AND wfPL(pl2)
    )
    WHERE K=K(pl),pl2=(# F := F(pl), A := A(pl), K := ck #)

  % Theorem <Asset mapping refinement compositionality>
  amRefinementCompositionality: THEOREM
    FORALL(pl,am):
    ( 
      |>(A,am)
      => 
        plRefinement(pl,pl2) AND wfPL(pl2)
    )
    WHERE A=A(pl),pl2=(# F := F(pl), A := am, K := K(pl) #)

  % Theorem <Full compositionality>
  fullCompositionality: THEOREM
    FORALL(pl,fm,am,ck):
    ( 
      equivalentFMs(F,fm) AND
      equivalentCKs(K,ck) AND
      |>(A,am)
      => 
        plRefinement(pl,pl2) AND wfPL(pl2)
    )
    WHERE F=F(pl),K=K(pl),A=A(pl),pl2=(# F := fm, A := am, K := ck #)

  weakFullCompositionality: THEOREM
    FORALL(pl,fm,am,ck):
    ( 
      (F |= fm) AND
      equivalentCKs(K,ck) AND
      |>(A,am) AND wfPL(pl2)
      => 
        plRefinement(pl,pl2) 
    )
    WHERE F=F(pl),K=K(pl),A=A(pl),pl2=(# F := fm, A := am, K := ck #)


END SPLrefinement
