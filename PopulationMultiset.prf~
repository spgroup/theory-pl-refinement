(PopulationMultiset
 (popRef 0
  (popRef-1 nil 3583158422 3583162865
   ("" (expand* preorder? reflexive? transitive?)
    (("" (expand popRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 (x y z))
          (("1" (flatten)
            (("1" (skolem 1 p1)
              (("1" (flatten)
                (("1" (instantiate -1 p1)
                  (("1" (assert)
                    (("1" (skolem -1 p2)
                      (("1" (flatten)
                        (("1" (instantiate -3 p2)
                          (("1" (assert)
                            (("1" (skolem -3 p3)
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate 1 p3)
                                  (("1"
                                    (use assetRefinement)
                                    (("1"
                                      (expand* preorder? transitive?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (instantiate -2 (p1 p2 p3))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 x)
          (("2" (skolem 1 p)
            (("2" (flatten)
              (("2" (use assetRefinement)
                (("2" (expand* preorder? reflexive?)
                  (("2" (flatten)
                    (("2" (instantiate -1 p)
                      (("2" (instantiate 1 p) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((popRefinement const-decl "bool" PopulationMultiset nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil))
   4443608 90 t shostak))
 (productsUnion 0
  (productsUnion-1 nil 3583162946 3583167878
   ("" (skolem 1 (pl pop))
    (("" (decompose-equality 1)
      (("" (expand* products union msingleton products member)
        (("" (bddsimp)
          (("1" (skolem -1 pl1)
            (("1" (flatten)
              (("1" (expand add -1)
                (("1" (skolem -2 c1)
                  (("1" (flatten)
                    (("1" (expand emptymultiset)
                      (("1" (case "pl=pl1")
                        (("1" (instantiate 1 c1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert)
                          (("2" (instantiate 3 pl1)
                            (("2" (assert)
                              (("2"
                                (instantiate 3 c1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem -1 c)
            (("2" (flatten)
              (("2" (expand add)
                (("2" (expand emptymultiset)
                  (("2" (assert)
                    (("2" (instantiate 1 pl)
                      (("2" (assert)
                        (("2" (assert)
                          (("2" (instantiate 1 c)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skolem -1 pl1)
            (("3" (flatten)
              (("3" (instantiate 1 pl1)
                (("3" (assert)
                  (("3" (expand add)
                    (("3" (expand emptymultiset)
                      (("3" (assert)
                        (("3" (bddsimp)
                          (("3" (case "pl=pl1")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Population type-eq-decl nil PopulationMultiset nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     PopulationMultiset nil)
    (multiset type-eq-decl nil multiset nil)
    (union const-decl "multiset" multiset nil)
    (msingleton const-decl "multiset" multiset nil)
    (union const-decl "set" sets nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (emptymultiset const-decl "multiset" multiset nil)
    (Conf type-decl nil SPLrefinement nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (add const-decl "multiset" multiset nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" multiset nil)
    (member const-decl "bool" sets nil))
   250884 210 t shostak)))

