CKmultiple: THEORY
BEGIN
  IMPORTING AssetMapping
  
  AssetIfdef: TYPE = [AssetName,boolean]

  AssetNames: TYPE = finite_sets[AssetName].finite_set

  ans: VAR AssetNames
  n,an: VAR AssetName
  a,b,a1,a2: VAR Asset
  tag: VAR bool
  am,amt: VAR AM
  t: VAR AssetIfdef
  assets: VAR finite_sets[Asset].finite_set 

  selectAssets(ans,am,amt):AM = 
    overw(filter(ans,am),amt)


  preprocessfile(a,tag):Asset

  preprocessRefinement(a,b):bool =
   FORALL(tag):|-(preprocessfile(a,tag),preprocessfile(b,tag))
 
  ifdefrefinement: AXIOM
    |-(a,b) <=> FORALL(tag):|-(preprocessfile(a,tag),preprocessfile(b,tag))

  preprocess(t,am,amt):AM = 
    IF (dom(amt)(t`1)) THEN ow((t`1,preprocessfile(map(amt,singleton(t`1)),t`2)),amt)
    ELSE amt
    ENDIF

  keepdom: LEMMA
    dom(amt) = dom(preprocess(t,am,amt))
  
  Transformations: DATATYPE
   BEGIN
    IFDEF(an:AssetName,tag:boolean): IFDEF?
    SELECT(ans:AssetNames): SELECT?
   END Transformations

  ckevaluation(ts:Transformations,am,amt:AM):AM =
    CASES ts OF 
      IFDEF(an,tag): preprocess((an,tag),am,amt),
      SELECT(ans): selectAssets(ans,am,amt)
    ENDCASES

  ckPreserves: THEOREM
   FORALL (am1: AM, am2: AM, t: Transformations, amt1: AM, amt2: AM):
    (am1 |> am2) AND (amt1 |> amt2) =>
     (ckevaluation(t, am1, amt1) |> ckevaluation(t, am2, amt2));


  IMPORTING CKtrans{{
  	    Transformation:=Transformations,
	    transform:=ckevaluation
  }}
  
  ck: VAR CK
  it: VAR Item
  c: VAR Configuration

  domainPreserved: LEMMA FORALL ck,am,c,amt: subset?(dom(semanticCK(ck,am,c,amt)),union(dom(am),dom(amt)))   

END CKmultiple
