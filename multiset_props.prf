(multiset_props
 (sum_union 0
  (sum_union-1 nil 3569086946 3569087370
   ("" (skolem * ("tm1" "tm2" "_"))
    (("" (auto-rewrite "sum_emptyset_rew" "sum_add" "member" "union")
      (("" (rewrite "finite_set_ind_modified")
        (("" (skolem 1 (t ts))
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((sum_emptyset_rew formula-decl nil finite_sets_sum_real
     "finite_sets/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finite_emptyset name-judgement "finite_set[T]" multiset_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nil application-judgement "nat" multiset_props nil)
    (nil application-judgement "int" multiset_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" multiset_props nil)
    (sum_add formula-decl nil finite_sets_sum "finite_sets/")
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil multiset_props nil)
    (union const-decl "multiset" multiset nil)
    (multiset type-eq-decl nil multiset nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   46818 140 t shostak))
 (sum_msingleton 0
  (sum_msingleton-1 nil 3569087109 3569087303
   ("" (skolem 1 ("t" "_"))
    (("" (rewrite "finite_set_ind_modified")
      (("1" (hide 2)
        (("1" (rewrite "sum_emptyset_rew")
          (("1" (rewrite emptyset) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (skolem 1 (tt ts))
          (("2" (ground)
            (("2" (rewrite "sum_add")
              (("2" (rewrite "member")
                (("2" (lift-if)
                  (("2" (name-replace "n" "sum(ts,msingleton(t))")
                    (("2" (ground)
                      (("1" (rewrite "msingleton_if")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand add)
                        (("2" (expand member) (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (rewrite "msingleton_if")
                        (("3" (expand add)
                          (("3" (expand member)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (expand* add member)
                        (("4" (rewrite "msingleton_if")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (multiset type-eq-decl nil multiset nil)
    (msingleton const-decl "multiset" multiset nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T formal-type-decl nil multiset_props nil)
    (finite_emptyset name-judgement "finite_set[T]" multiset_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nil application-judgement "nat" multiset_props nil)
    (nil application-judgement "int" multiset_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" multiset_props nil)
    (emptyset const-decl "set" sets nil)
    (sum_emptyset_rew formula-decl nil finite_sets_sum_real
     "finite_sets/")
    (sum_add formula-decl nil finite_sets_sum "finite_sets/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (msingleton_if formula-decl nil multiset nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil))
   193780 150 t shostak)))

