(Population
 (popRef 0
  (popRef-1 nil 3581431558 3581431644
   ("" (expand* preorder? reflexive? transitive? popRefinement)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 p1)
            (("1" (flatten)
              (("1" (instantiate -1 p1)
                (("1" (assert)
                  (("1" (skolem -1 p2)
                    (("1" (flatten)
                      (("1" (instantiate -3 p2)
                        (("1" (assert)
                          (("1" (skolem -3 p3)
                            (("1" (flatten)
                              (("1"
                                (instantiate 1 p3)
                                (("1"
                                  (use assetRefinement)
                                  (("1"
                                    (expand* preorder? transitive?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -2 (p1 p2 p3))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 p)
          (("2" (flatten)
            (("2" (instantiate 1 p)
              (("2" (use assetRefinement)
                (("2" (expand* preorder? reflexive?)
                  (("2" (flatten)
                    (("2" (instantiate -1 p) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (popRefinement const-decl "bool" Population nil)
    (reflexive? const-decl "bool" relations nil))
   85639 50 t shostak))
 (productsUnion 0
  (productsUnion-1 nil 3581431649 3581431771
   ("" (skolem 1 (pl pop))
    (("" (expand* products products union singleton member)
      (("" (decompose-equality 1)
        (("" (bddsimp)
          (("1" (skolem -1 pl1)
            (("1" (flatten)
              (("1" (skolem -2 c)
                (("1" (flatten)
                  (("1" (instantiate 1 c)
                    (("1" (bddsimp)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (instantiate 2 pl1)
                        (("3" (assert)
                          (("3" (instantiate 2 c)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (instantiate 2 pl1)
                        (("4" (assert)
                          (("4" (instantiate 2 c)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem -1 c)
            (("2" (flatten)
              (("2" (instantiate 1 pl)
                (("2" (instantiate 1 c) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (skolem -1 pl1)
            (("3" (flatten)
              (("3" (skolem -2 c)
                (("3" (flatten)
                  (("3" (instantiate 1 pl1)
                    (("3" (assert)
                      (("3" (instantiate 1 c) (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     Population nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (AssetName type-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Population type-eq-decl nil Population nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil))
   122811 100 t shostak))
 (popCompositional 0
  (popCompositional-1 nil 3581431783 3581431931
   ("" (skolem 1 (pl1 pl2 pop))
    (("" (flatten)
      (("" (expand* plRefinement popRefinement union singleton member)
        (("" (expand products)
          (("" (expand member)
            (("" (skolem 1 p1)
              (("" (flatten)
                (("" (skolem -2 pl)
                  (("" (flatten)
                    (("" (expand products)
                      (("" (skolem -3 c)
                        (("" (flatten)
                          (("" (bddsimp)
                            (("1" (instantiate -1 c)
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 c2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (instantiate
                                       1
                                       "([||](K(pl2))(A(pl2))(c2))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (instantiate 1 pl2)
                                          (("1"
                                            (instantiate 1 c2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (instantiate 1 p1)
                              (("2"
                                (use assetRefinement)
                                (("2"
                                  (expand* preorder? reflexive?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (instantiate -1 p1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (instantiate 1 pl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (instantiate 1 c)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((products const-decl "set[finite_sets[Asset].finite_set]"
     Population nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (AssetName type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (popRefinement const-decl "bool" Population nil))
   148053 90 t shostak))
 (plRefPop 0
  (plRefPop-1 nil 3581431935 3581432008
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      ((""
        (expand* plRefinement popRefinement products products singleton
         member)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (skolem -2 pl)
              (("" (flatten)
                (("" (skolem -3 c1)
                  (("" (flatten)
                    (("" (instantiate -1 c1)
                      (("" (replace -2)
                        (("" (assert)
                          (("" (skolem -1 c2)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 1
                                 "([||](K(pl2))(A(pl2))(c2))")
                                ((""
                                  (assert)
                                  ((""
                                    (instantiate 1 pl2)
                                    ((""
                                      (instantiate 1 c2)
                                      (("" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     Population nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (popRefinement const-decl "bool" Population nil))
   72552 50 t shostak)))

