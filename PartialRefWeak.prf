(PartialRefWeak
 (weakPartialRefinement_TCC1 0
  (weakPartialRefinement_TCC1-1 nil 3656408682
   ("" (skolem 1 (pl1 pl2 m))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (bddsimp)
          (("" (expand domain)
            (("" (expand dom) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((dom const-decl "set[S]" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil))
   nil))
 (weakPartRefReflexive 0
  (weakPartRefReflexive-1 nil 3655065773
   ("" (skolem 1 (pl m))
    (("" (bddsimp)
      (("" (expand* identity? weakPartialRefinement)
        (("" (expand subset?)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -1 c)
                (("1" (replace -1 1)
                  (("1" (bddsimp)
                    (("1" (use assetRefinement)
                      (("1" (expand preorder?)
                        (("1" (flatten)
                          (("1" (expand reflexive?)
                            (("1" (inst -1 "prod(pl,c)") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 c)
              (("2" (expand member)
                (("2" (bddsimp)
                  (("2" (expand image)
                    (("2" (skolem -2 l)
                      (("2" (inst -1 l)
                        (("2" (typepred m)
                          (("2" (expand subset?)
                            (("2" (inst -3 c)
                              (("2"
                                (expand member)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand domain)
                                    (("2"
                                      (inst 1 c)
                                      (("2"
                                        (lemma
                                         "maps[Conf,Conf].getRightResult")
                                        (("2"
                                          (inst -1 m c l)
                                          (("2"
                                            (bddsimp)
                                            (("2"
                                              (replace -2 -5)
                                              (("2"
                                                (replace -5 -1)
                                                (("2"
                                                  (replace -5 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil PartialRefWeak nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "set[S]" maps nil)
    (getRightResult formula-decl nil maps nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM formal-type-decl nil PartialRefWeak nil)
    (Asset formal-type-decl nil PartialRefWeak nil)
    (AssetName formal-type-decl nil PartialRefWeak nil)
    (CK formal-type-decl nil PartialRefWeak nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     PartialRefWeak nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     PartialRefWeak nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (Conf formal-type-decl nil PartialRefWeak nil)
    (identity? const-decl "bool" maps_identity nil)
    (weakPartialRefinement const-decl "bool" PartialRefWeak
     nil))
   shostak))
 (weakPartRefTransitive 0
  (weakPartRefTransitive-4 nil 3656760663
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (inst -1 c)
            (("1" (inst -2 "getRight(m,c)")
              (("1" (expand image)
                (("1" (decompose-equality -3)
                  (("1" (bddsimp)
                    (("1" (use assetRefinement)
                      (("1" (expand preorder?)
                        (("1" (expand transitive?)
                          (("1" (flatten)
                            (("1"
                              (inst -2 "prod(pl1,c)"
                               "prod(pl2,getRight(m,c))"
                               "prod(pl3,getRight(n,getRight(m,c)))")
                              (("1"
                                (lemma
                                 "maps_composite[Conf,Conf,Conf].same_img")
                                (("1"
                                  (inst -1 m n c)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand domain)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "getRight(m,c)")
                      (("2" (bddsimp)
                        (("2" (inst 1 c)
                          (("2" (expand domain)
                            (("2" (skolem -2 c3)
                              (("2"
                                (expand composeMaps)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (expand domain)
                                      (("2"
                                        (skolem -2 c2)
                                        (("2"
                                          (typepred m)
                                          (("2"
                                            (expand unique)
                                            (("2"
                                              (lemma
                                               "maps[Conf,Conf].getRightResult")
                                              (("2"
                                                (inst -1 m c2 c)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand composeMaps)
                      (("3" (expand domain)
                        (("3" (skolem -3 c3) (("3" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (expand domain)
                        (("4" (skolem -2 c3) (("4" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand domain)
                  (("1" (expand composeMaps)
                    (("1" (skolem -3 c3)
                      (("1" (bddsimp)
                        (("1" (expand dom)
                          (("1" (expand domain)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand dom)
                  (("2" (expand domain)
                    (("2" (expand composeMaps)
                      (("2" (skolem -2 c3)
                        (("2" (expand domain) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (expand member)
              (("2" (lemma "maps_composite[Conf,Conf,Conf].imgCompos")
                (("2" (inst -1 m n)
                  (("2" (bddsimp)
                    (("2" (replace -2 -5)
                      (("2" (typepred n)
                        (("2" (expand subset?)
                          (("2" (inst -4 c)
                            (("2" (expand member)
                              (("2" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "maps_composite[Conf,Conf,Conf].domCompos")
          (("3" (inst -1 m n)
            (("3" (expand subset?)
              (("3" (skolem 1 c)
                (("3" (inst -1 c)
                  (("3" (bddsimp)
                    (("3" (typepred m)
                      (("3" (expand subset?)
                        (("3" (inst -3 c) (("3" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Conf formal-type-decl nil PartialRefWeak nil)
    (preorder? const-decl "bool" orders nil)
    (same_img formula-decl nil maps_composite nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (getRightResult formula-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getRight const-decl "T" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (CM type-eq-decl nil PartialRefWeak nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (FM formal-type-decl nil PartialRefWeak nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     PartialRefWeak nil)
    (Asset formal-type-decl nil PartialRefWeak nil)
    (AssetName formal-type-decl nil PartialRefWeak nil)
    (CK formal-type-decl nil PartialRefWeak nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     PartialRefWeak nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (pl1 skolem-const-decl
     "PL[Conf, FM, Asset, AssetName, CK, {||}, [||]]"
     PartialRefWeak nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (pl2 skolem-const-decl
     "PL[Conf, FM, Asset, AssetName, CK, {||}, [||]]"
     PartialRefWeak nil)
    (m skolem-const-decl "{m: CM |
         subset?(domain(m), {||}(F(pl1))) AND
          subset?(image(m), {||}(F(pl2)))}" PartialRefWeak
     nil)
    (c skolem-const-decl "Conf" PartialRefWeak nil)
    (imgCompos formula-decl nil maps_composite nil)
    (member const-decl "bool" sets nil)
    (domCompos formula-decl nil maps_composite nil)
    (weakPartialRefinement const-decl "bool" PartialRefWeak
     nil))
   nil)
  (weakPartRefTransitive-3 nil 3656759693
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-2 nil 3656759126
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-1 nil 3656329560
   ("" (skolem 1 (pl1 pl2 pl3 m n q))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" PartialRefWeak
     nil)
    (same_img formula-decl nil maps_composite nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (getRightResult formula-decl nil maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (getRight const-decl "T" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (CM type-eq-decl nil PartialRefWeak nil))
   shostak)))

