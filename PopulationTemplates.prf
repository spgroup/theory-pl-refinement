(PopulationTemplates
 (IMP_SPLrefinement_assetRefinement_TCC1 0
  (IMP_SPLrefinement_assetRefinement_TCC1-1 nil 3569157358 3569157571
   ("" (use "Assets.assetRefinement") nil nil) unchecked
   ((assetRefinement formula-decl nil Assets nil)) 5 10 t nil))
 (addPL 0
  (addPL-1 nil 3569157574 3569157728
   ("" (skolem 1 (pl pop))
    (("" (expand popRefinement)
      (("" (skolem 1 p)
        (("" (flatten)
          (("" (instantiate 1 p)
            (("" (bddsimp)
              (("1" (use assetRefinement)
                (("1" (expand preorder?)
                  (("1" (expand reflexive?)
                    (("1" (flatten)
                      (("1" (instantiate -1 p) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand products)
                (("2" (expand member)
                  (("2" (expand add)
                    (("2" (skolem -1 spl1)
                      (("2" (flatten)
                        (("2" (instantiate 1 spl1)
                          (("2" (assert)
                            (("2" (case "pl = spl1")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((popRefinement const-decl "bool" SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" multiset nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "multiset" multiset nil) nil)
   153992 80 t shostak))
 (clonePL 0
  (clonePL-1 nil 3569164420 3569164435
   ("" (lemma addPL)
    (("" (skolem 1 (pl pop))
      (("" (flatten)
        (("" (instantiate -1 (pl pop)) (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (addPL formula-decl nil PopulationTemplates nil))
   15270 10 t shostak)))

