(PartialRefTemplatesComp
 (transfOptMand_TCC1 0
  (transfOptMand_TCC1-1 nil 3655826326 ("" (subtype-tcc) nil nil)
   ((singleton const-decl "(singleton?)" sets nil)) nil))
 (wfTransfOptMand_TCC1 0
  (wfTransfOptMand_TCC1-1 nil 3658137889 ("" (subtype-tcc) nil nil)
   ((conditionsTransfOptMand const-decl "bool" PartialRefTemplatesComp
     nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (syntaxTransfOptMand const-decl "bool" PartialRefTemplatesComp nil)
    (transfOptMand const-decl "bool" PartialRefTemplatesComp nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (wfTransfOptMand 0
  (wfTransfOptMand-2 nil 3658138827
   ("" (skolem 1 (pl fm2 P Q))
    (("" (expand wfPL)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (typepred pl)
            (("1" (expand wfPL)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (expand semantics)
                    (("1" (expand satImpConsts)
                      (("1" (expand satExpConsts)
                        (("1" (flatten)
                          (("1" (bddsimp)
                            (("1" (skolem 1 f)
                              (("1"
                                (inst -4 f)
                                (("1"
                                  (expand syntaxTransfOptMand)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand transfOptMand)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand union)
                                          (("1"
                                            (decompose-equality -3)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 n)
                              (("2"
                                (inst -3 n)
                                (("2"
                                  (expand syntaxTransfOptMand)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand transfOptMand)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2 1)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma wtFormSameFeatures)
          (("2" (inst -1 "F(pl)" fm2)
            (("2" (expand syntaxTransfOptMand)
              (("2" (flatten)
                (("2" (expand transfOptMand)
                  (("2" (flatten)
                    (("2" (expand wfTree)
                      (("2" (bddsimp)
                        (("2" (typepred "F(pl)")
                          (("2" (expand wfFM)
                            (("2" (expand wfTree)
                              (("2"
                                (expand wfFormulae)
                                (("2"
                                  (skolem 1 f)
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (expand singleton)
                                          (("2"
                                            (inst -1 f)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (lemma
                                                 wtFormSameFeatures)
                                                (("1"
                                                  (typepred "F(pl)")
                                                  (("1"
                                                    (expand wfFM)
                                                    (("1"
                                                      (expand wfTree)
                                                      (("1"
                                                        (expand
                                                         wfFormulae)
                                                        (("1"
                                                          (inst -1 f)
                                                          (("1"
                                                            (inst -5 f)
                                                            (("1"
                                                              (decompose-equality
                                                               -6)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 f)
                                                                (("1"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 f)
                                                  (("1"
                                                    (inst -3 f)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (replace -2 3)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand wt)
                                                            (("1"
                                                              (expand
                                                               wt)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   Q)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     2
                                                                     RL)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   2
                                                                   P)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     2
                                                                     RL)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand wt)
                                                  (("2"
                                                    (expand wt)
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (inst 4 Q)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst 4 P)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (union const-decl "set" sets nil) nil nil
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wtFormSameFeatures formula-decl nil FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil)
  (wfTransfOptMand-1 nil 3658135256
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand wfPL)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (typepred pl)
            (("1" (expand wfPL)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (expand semantics)
                    (("1" (expand satImpConsts)
                      (("1" (expand satExpConsts)
                        (("1" (flatten)
                          (("1" (bddsimp)
                            (("1" (skolem 1 f)
                              (("1"
                                (inst -4 f)
                                (("1"
                                  (expand syntaxTransfOptMand)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand transfOptMand)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand union)
                                          (("1"
                                            (decompose-equality -3)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 n)
                              (("2"
                                (inst -3 n)
                                (("2"
                                  (expand syntaxTransfOptMand)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand transfOptMand)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2 1)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma wtFormSameFeatures)
          (("2" (inst -1 "F(pl)" fm2)
            (("2" (expand syntaxTransfOptMand)
              (("2" (flatten)
                (("2" (expand transfOptMand)
                  (("2" (flatten)
                    (("2" (expand wfTree)
                      (("2" (bddsimp)
                        (("2" (typepred "F(pl)")
                          (("2" (expand wfFM)
                            (("2" (expand wfTree)
                              (("2"
                                (expand wfFormulae)
                                (("2"
                                  (skolem 1 f)
                                  (("2"
                                    (inst -1 f)
                                    (("2"
                                      (inst -3 f)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand union)
                                          (("2"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -2 3)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand wt)
                                                          (("1"
                                                            (expand wt)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 Q)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   RL)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 2
                                                                 P)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   RL)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfPL const-decl "bool" SPLrefinement nil)
    (wtFormSameFeatures formula-decl nil FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil) nil nil
    (union const-decl "set" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil))
   shostak))
 (transOptMandPartRefStrong_TCC1 0
  (transOptMandPartRefStrong_TCC1-1 nil 3655832656
   ("" (lemma wfTransfOptMand)
    (("" (skolem 1 (pl fm2 s P Q pl2))
      (("" (inst -1 pl fm2 P Q)
        (("" (bddsimp)
          (("1" (replace -5 -1 RL)
            (("1" (replace -5 -1)
              (("1" (expand syntaxTransfOptMand)
                (("1" (bddsimp)
                  (("1" (replace -8 1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand wfPL)
            (("2" (bddsimp)
              (("2" (replace -6 1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfTransfOptMand formula-decl nil PartialRefTemplatesComp nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (conditionsTransfOptMand const-decl "bool" PartialRefTemplatesComp
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (transfOptMand const-decl "bool" PartialRefTemplatesComp nil)
    (syntaxTransfOptMand const-decl "bool" PartialRefTemplatesComp
     nil))
   nil))
 (transOptMandPartRefStrong 0
  (transOptMandPartRefStrong-1 nil 3655826327
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (expand prod)
            (("1" (bddsimp)
              (("1" (use SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (inst -1 "(semantics(K(pl))(A(pl))(c))")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "<>")
          (("2" (decompose-equality)
            (("2" (expand subset?)
              (("2" (expand member)
                (("2" (skolem 1 c)
                  (("2" (inst -1 c)
                    (("2" (expand syntaxTransfOptMand)
                      (("2" (bddsimp)
                        (("2" (expand semantics)
                          (("2" (bddsimp)
                            (("1" (expand satExpConsts)
                              (("1"
                                (skolem 1 f)
                                (("1"
                                  (inst -3 f)
                                  (("1"
                                    (expand conditionsTransfOptMand)
                                    (("1"
                                      (inst -8 c)
                                      (("1"
                                        (expand transfOptMand)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand union)
                                              (("1"
                                                (decompose-equality -5)
                                                (("1"
                                                  (inst -1 f)
                                                  (("1"
                                                    (expand member)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         singleton)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand member)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand singleton)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand union)
                                              (("2"
                                                (decompose-equality -5)
                                                (("1"
                                                  (inst -1 f)
                                                  (("1"
                                                    (expand member)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         singleton)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand member)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand member)
                                                  (("3"
                                                    (expand singleton)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand satImpConsts)
                              (("2"
                                (skolem 1 n)
                                (("2"
                                  (inst -2 n)
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (expand transfOptMand)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 1 RL)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "<>")
          (("3" (decompose-equality)
            (("3" (expand subset?)
              (("3" (skolem 1 c)
                (("3" (inst -1 c)
                  (("3" (expand member) (("3" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil) nil
    (subset? const-decl "bool" sets nil))
   shostak))
 (transOptMandPartRefWeak_TCC1 0
  (transOptMandPartRefWeak_TCC1-1 nil 3656876548
   ("" (lemma wfTransfOptMand)
    (("" (skolem 1 (pl fm2 m P Q pl2))
      (("" (inst -1 pl fm2 P Q)
        (("" (bddsimp)
          (("1" (expand syntaxTransfOptMand)
            (("1" (bddsimp)
              (("1" (replace -9 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (expand wfPL)
            (("2" (bddsimp) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((wfTransfOptMand formula-decl nil PartialRefTemplatesComp nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (transfOptMand const-decl "bool" PartialRefTemplatesComp nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (conditionsTransfOptMand const-decl "bool" PartialRefTemplatesComp
     nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (dom const-decl "set[S]" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (getRight const-decl "T" maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (syntaxTransfOptMand const-decl "bool" PartialRefTemplatesComp
     nil))
   nil))
 (transOptMandPartRefWeak 0
  (transOptMandPartRefWeak-1 nil 3656876549
   ("" (skolem 1 (pl fm2 m P Q))
    (("" (lemma transOptMandPartRefStrong)
      (("" (inst -1 pl fm2 "domain(m)" P Q)
        (("" (expand* strongPartialRefinement weakPartialRefinement)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -6 c)
                (("1" (expand identity?)
                  (("1" (inst -7 c)
                    (("1" (replace -7 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand subset?)
              (("2" (skolem 1 c)
                (("2" (inst -5 c)
                  (("2" (expand member)
                    (("2"
                      (lemma "maps_identity[Configuration].sameDomImg")
                      (("2" (inst -1 m)
                        (("2" (flatten)
                          (("2" (bddsimp)
                            (("2" (replace -2 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subset? const-decl "bool" sets nil)
    (sameDomImg formula-decl nil maps_identity nil)
    (member const-decl "bool" sets nil)
    (identity? const-decl "bool" maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (conditionsChangeCKLine_TCC1 0
  (conditionsChangeCKLine_TCC1-1 nil 3657447041
   ("" (subtype-tcc) nil nil)
   ((wfTree const-decl "bool" FeatureModel nil)) nil))
 (changeCKLineSameEvalCK 0
  (changeCKLineSameEvalCK-5 nil 3657620202
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand predChangeCKLine)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeCKLine)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    nil
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil) nil
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil)
  (changeCKLineSameEvalCK-4 nil 3657448045
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand prod)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeCKLine)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    nil
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil) nil
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   nil)
  (changeCKLineSameEvalCK-3 nil 3657447915
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (expand prod)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (expand "<>")
              (("" (decompose-equality -3)
                (("" (inst -1 c)
                  (("" (expand syntaxChangeCKLine)
                    (("" (flatten)
                      (("" (expand union)
                        (("" (decompose-equality -2)
                          (("" (decompose-equality -3)
                            (("" (expand semantics)
                              ((""
                                (expand map)
                                ((""
                                  (decompose-equality 1)
                                  ((""
                                    (bddsimp)
                                    (("1"
                                      (skolem -1 an)
                                      (("1"
                                        (inst 1 an)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand eval)
                                            (("1"
                                              (expand evalCK)
                                              (("1"
                                                (expand assetsCK)
                                                (("1"
                                                  (skolem -1 i)
                                                  (("1"
                                                    (inst 1 i)
                                                    (("1"
                                                      (inst -3 i)
                                                      (("1"
                                                        (inst -4 i)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand
                                                               singleton)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))
                                     ("2"
                                      (skolem -1 an)
                                      (("2"
                                        (inst 1 an)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -2 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (expand evalCK)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (inst -6 i)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (grind)
                                                                nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeCKLineSameEvalCK-2 nil 3657447658
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeCKLine)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeCKLineSameEvalCK-1 nil 3657447042
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (expand syntaxChangeCKLine)
                (("" (flatten)
                  (("" (expand union)
                    (("" (decompose-equality -2)
                      (("" (decompose-equality -3)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand eval)
                                        (("1"
                                          (expand evalCK)
                                          (("1"
                                            (expand assetsCK)
                                            (("1"
                                              (skolem -1 i)
                                              (("1"
                                                (inst 1 i)
                                                (("1"
                                                  (inst -3 i)
                                                  (("1"
                                                    (inst -4 i)
                                                    (("1"
                                                      (expand member)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           singleton)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (expand eval)
                                        (("2"
                                          (expand assetsCK)
                                          (("2"
                                            (skolem -2 i)
                                            (("2"
                                              (inst 1 i)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (expand evalCK)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -6 i)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    nil
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil) nil
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (changeCKLineStrongPartRef_TCC1 0
  (changeCKLineStrongPartRef_TCC1-1 nil 3657448092
   ("" (skolem 1 (pl ck2 item1 item2 items s pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -4 1)
                (("" (expand semantics)
                  (("" (lemma changeCKLineSameEvalCK)
                    (("" (inst -1 pl ck2 item1 item2 items s)
                      (("" (bddsimp)
                        (("" (expand predChangeCKLine)
                          (("" (bddsimp)
                            (("1" (inst -4 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -4 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -7 c)
                                  (("2"
                                    (bddsimp)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 c2)
                              (("2"
                                (inst -7 c2)
                                (("2"
                                  (expand semantics)
                                  (("2"
                                    (replace -8 -7)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (changeCKLineSameEvalCK formula-decl nil PartialRefTemplatesComp
     nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (conditionsChangeCKLine const-decl "bool" PartialRefTemplatesComp
     nil)
    (syntaxChangeCKLine const-decl "bool" PartialRefTemplatesComp nil)
    (predChangeCKLine const-decl "bool" PartialRefTemplatesComp nil))
   nil))
 (changeCKLineStrongPartRef 0
  (changeCKLineStrongPartRef-2 nil 3657620296
   ("" (lemma changeCKLineSameEvalCK)
    (("" (expand predChangeCKLine)
      (("" (skolem 1 (pl ck2 item1 item2 items s))
        (("" (inst -1 pl ck2 item1 item2 items s)
          (("" (expand strongPartialRefinement)
            (("" (expand prod)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (bddsimp)
                    (("1" (use SPLrefinement.assetRefinement)
                      (("1" (expand preorder?)
                        (("1" (flatten)
                          (("1" (expand reflexive?)
                            (("1"
                              (inst -1 "(semantics(ck2)(A(pl))(c))")
                              (("1"
                                (inst -7 c)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (replace -8 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "<>")
                  (("2" (decompose-equality)
                    (("2" (expand subset?)
                      (("2" (skolem 1 c)
                        (("2" (inst -1 c)
                          (("2" (expand member)
                            (("2" (bddsimp) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil)
  (changeCKLineStrongPartRef-1 nil 3657448093
   ("" (lemma changeCKLineSameEvalCK)
    (("" (skolem 1 (pl ck2 item1 item2 items s))
      (("" (inst -1 pl ck2 item1 item2 items s)
        (("" (expand strongPartialRefinement)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (replace -5 1)
                      (("" (use SPLrefinement.assetRefinement)
                        (("" (expand preorder?)
                          (("" (flatten)
                            (("" (expand reflexive?)
                              ((""
                                (inst -1 "(semantics(ck2)(A(pl))(c))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil) nil)
   shostak))
 (changeCKLineWeakPartRef_TCC1 0
  (changeCKLineWeakPartRef_TCC1-1 nil 3659802432
   ("" (skolem 1 (pl ck2 item1 item2 items m pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -5 1)
                (("" (expand semantics)
                  (("" (lemma changeCKLineSameEvalCK)
                    (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
                      (("" (expand predChangeCKLine)
                        (("" (bddsimp)
                          (("1" (inst -4 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand semantics)
                                (("1"
                                  (replace -4 1 RL)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -7 c)
                                (("2"
                                  (bddsimp)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -9 -7)
                            (("2" (expand map)
                              (("2"
                                (expand semantics)
                                (("2"
                                  (expand map)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (changeCKLineSameEvalCK formula-decl nil PartialRefTemplatesComp
     nil)
    (predChangeCKLine const-decl "bool" PartialRefTemplatesComp nil)
    (syntaxChangeCKLine const-decl "bool" PartialRefTemplatesComp nil)
    (conditionsChangeCKLine const-decl "bool" PartialRefTemplatesComp
     nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (dom const-decl "set[S]" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (getRight const-decl "T" maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (CM type-eq-decl nil PartialRefWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil))
   nil))
 (changeCKLineWeakPartRef 0
  (no "" 3659802795
   ("" (skolem 1 (pl ck2 item1 item2 items m))
    (("" (lemma changeCKLineStrongPartRef)
      (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
        (("" (expand* strongPartialRefinement weakPartialRefinement)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -4 c)
                (("1" (expand identity?)
                  (("1" (inst -5 c)
                    (("1" (replace -5 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "maps_identity[Configuration].sameDomImg")
              (("2" (inst -1 m)
                (("2" (bddsimp)
                  (("2" (replace -2 1 RL) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (sameDomImg formula-decl nil maps_identity nil)
    (identity? const-decl "bool" maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak)
  (changeCKLineWeakPartRef-1 nil 3659802433
   ("" (lemma changeCKLineSameEvalCK)
    (("" (skolem 1 (s pl ck2 item1 item2 items m))
      (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
        (("" (expand predChangeCKLine)
          (("" (bddsimp)
            (("1" (expand weakPartialRefinement)
              (("1" (skolem 1 c)
                (("1" (inst -5 c)
                  (("1" (inst -4 c)
                    (("1" (bddsimp)
                      (("1" (expand identity?)
                        (("1" (decompose-equality)
                          (("1" (inst -1 c)
                            (("1" (inst -7 c)
                              (("1"
                                (replace -7 1)
                                (("1"
                                  (replace -5 1 RL)
                                  (("1"
                                    (use SPLrefinement.assetRefinement)
                                    (("1"
                                      (expand preorder?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand reflexive?)
                                          (("1"
                                            (inst -1 "prod(pl,c)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand identity?)
                        (("2" (inst -7 c)
                          (("2" (replace -7 1)
                            (("2" (replace -5 1 RL)
                              (("2"
                                (use SPLrefinement.assetRefinement)
                                (("2"
                                  (expand preorder?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand reflexive?)
                                      (("2"
                                        (inst -1 "prod(pl,c)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (addCKLinesStrongPartRef_TCC1 0
  (addCKLinesStrongPartRef_TCC1-1 nil 3680358355
   ("" (skolem 1 (pl ck2 items s pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -5 1)
                (("" (expand semantics)
                  (("" (bddsimp)
                    (("" (inst -6 c)
                      (("" (replace -7 -6)
                        (("" (bddsimp)
                          (("1" (case "eval(K(pl),c) = eval(ck2,c)")
                            (("1" (replace -1 1 RL)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (expand eval)
                                (("2"
                                  (expand assetsCK)
                                  (("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (bddsimp)
                                      (("1"
                                        (skolem -1 i)
                                        (("1"
                                          (inst 1 i)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand evalCK)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (expand
                                                   syntaxAddCKLines)
                                                  (("1"
                                                    (expand union)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (inst -1 i)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem -1 i)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst 1 i)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (expand evalCK)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand
                                                     syntaxAddCKLines)
                                                    (("2"
                                                      (expand union)
                                                      (("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (inst -1 i)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (expand
                                                                 "<>")
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     c)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "exp(i)")
                                                                        (("2"
                                                                          (bddsimp)
                                                                          (("2"
                                                                            (expand
                                                                             exps)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               i)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (syntaxAddCKLines const-decl "bool" PartialRefTemplatesComp nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<> const-decl "set[Configuration]" FeatureModelSemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (addCKLinesStrongPartRef 0
  (addCKLinesStrongPartRef-1 nil 3680358356
   ("" (skolem 1 (pl ck2 items s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1"
                (case "(semantics(K(pl))(A(pl))(c)) = (semantics(ck2)(A(pl))(c))")
                (("1" (replace -1 1)
                  (("1" (use SPLrefinement.assetRefinement)
                    (("1" (expand preorder?)
                      (("1" (flatten)
                        (("1" (expand reflexive?)
                          (("1" (inst -1 "(semantics(ck2)(A(pl))(c))")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand semantics)
                    (("2" (expand map)
                      (("2" (decompose-equality)
                        (("2" (bddsimp)
                          (("1" (skolem -1 an)
                            (("1" (flatten)
                              (("1"
                                (expand syntaxAddCKLines)
                                (("1"
                                  (inst 1 an)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand eval)
                                      (("1"
                                        (expand assetsCK)
                                        (("1"
                                          (skolem -1 i)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 1 i)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (expand evalCK)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand union)
                                                      (("1"
                                                        (decompose-equality)
                                                        (("1"
                                                          (inst -1 i)
                                                          (("1"
                                                            (expand
                                                             member)
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem -1 an)
                            (("2" (inst 1 an)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand eval)
                                  (("2"
                                    (expand assetsCK)
                                    (("2"
                                      (skolem -2 i)
                                      (("2"
                                        (inst 1 i)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand evalCK)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (expand "<>")
                                                (("2"
                                                  (decompose-equality)
                                                  (("2"
                                                    (inst -1 c)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (case
                                                         "items(i)")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "exp(i)")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand
                                                               exps)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 i)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           syntaxAddCKLines)
                                                          (("2"
                                                            (expand
                                                             union)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 i)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (bddsimp)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "<>")
          (("2" (decompose-equality)
            (("2" (expand subset?)
              (("2" (skolem 1 c)
                (("2" (expand member)
                  (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil) nil
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (removeCKLinesStrongPartRef_TCC1 0
  (removeCKLinesStrongPartRef_TCC1-1 nil 3680434012
   ("" (subtype-tcc) nil nil) nil nil))
 (removeCKLinesStrongPartRef 0
  (removeCKLinesStrongPartRef-1 nil 3680434013
   ("" (skolem 1 (pl ck2 items s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1"
                (case "(semantics(K(pl))(A(pl))(c)) = (semantics(ck2)(A(pl))(c))")
                (("1" (use SPLrefinement.assetRefinement)
                  (("1" (expand preorder?)
                    (("1" (flatten)
                      (("1" (expand reflexive?)
                        (("1" (replace -3 1)
                          (("1" (inst -1 "(semantics(ck2)(A(pl))(c))")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand semantics)
                    (("2" (expand map)
                      (("2" (decompose-equality 1)
                        (("2" (bddsimp)
                          (("1" (skolem -1 an)
                            (("1" (inst 1 an)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand eval)
                                  (("1"
                                    (expand assetsCK)
                                    (("1"
                                      (skolem -1 i)
                                      (("1"
                                        (inst 1 i)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand
                                                 syntaxAddCKLines)
                                                (("1"
                                                  (expand union)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst -1 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             "<>")
                                                            (("1"
                                                              (decompose-equality)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 c)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "exp(i)")
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         exps)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           i)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem -1 an)
                            (("2" (inst 1 an)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand eval)
                                  (("2"
                                    (expand assetsCK)
                                    (("2"
                                      (skolem -2 i)
                                      (("2"
                                        (inst 1 i)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand evalCK)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (expand "<>")
                                                (("2"
                                                  (decompose-equality)
                                                  (("2"
                                                    (inst -1 c)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "exp(i)")
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (expand
                                                             exps)
                                                            (("2"
                                                              (inst
                                                               1
                                                               i)
                                                              (("2"
                                                                (expand
                                                                 syntaxAddCKLines)
                                                                (("2"
                                                                  (expand
                                                                   union)
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       i)
                                                                      (("2"
                                                                        (expand
                                                                         member)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "<>")
          (("2" (expand subset?)
            (("2" (skolem 1 c)
              (("2" (decompose-equality)
                (("2" (inst -1 c)
                  (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (Asset nonempty-type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   shostak))
 (itsNotIncluded 0
  (itsNotIncluded-5 nil 3657619248
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand predRemoveFeature)
          (("" (flatten)
            (("" (expand "<>")
              (("" (decompose-equality)
                (("" (inst -1 c)
                  (("" (expand conditionsRemoveFeature)
                    (("" (flatten)
                      (("" (skolem 1 i)
                        (("" (inst -4 i)
                          (("" (bddsimp)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    nil (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    nil nil (overw const-decl "mapping" maps nil) nil
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    nil nil)
   nil)
  (itsNotIncluded-4 nil 3657555293
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (expand member)
                                      (("1"
                                        (expand satisfies)
                                        (("1"
                                          (expand satisfies)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    nil (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    nil)
   nil)
  (itsNotIncluded-3 nil 3657554425
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    nil (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    nil)
   nil)
  (itsNotIncluded-2 nil 3657553584
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    nil (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    nil)
   nil)
  (itsNotIncluded-1 nil 3657533313
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -10)
                                      (("1"
                                        (skolem -12 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    nil (difference const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    nil)
   shostak))
 (pairsNotIncluded 0
  (pairsNotIncluded-2 nil 3657619364
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand predRemoveFeature)
          (("" (flatten)
            (("" (skolem 1 an)
              (("" (expand conditionsRemoveFeature)
                (("" (flatten)
                  (("" (lemma itsNotIncluded)
                    (("" (inst -1 pl pl2 s its pairs P Q)
                      (("" (expand predRemoveFeature)
                        (("" (bddsimp)
                          (("1" (inst -3 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand eval)
                                (("1"
                                  (expand assetsCK)
                                  (("1"
                                    (skolem -9 i)
                                    (("1"
                                      (inst -4 i)
                                      (("1"
                                        (inst -6 i)
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil (overw const-decl "mapping" maps nil) nil
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satisfies def-decl "boolean" FormulaTheory nil) nil
    (dom const-decl "set[S]" maps nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil)
  (pairsNotIncluded-1 nil 3657539564
   ("" (lemma itsNotIncluded)
    (("" (skolem 1 (pl pl2 s its pairs P Q))
      (("" (inst -1 pl pl2 s its pairs P Q)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (inst -4 c)
              (("" (bddsimp)
                (("" (skolem 1 an)
                  (("" (expand conditionsRemoveFeature)
                    (("" (flatten)
                      (("" (expand eval)
                        (("" (expand assetsCK)
                          (("" (skolem -7 i)
                            (("" (inst -3 i)
                              ((""
                                (inst -6 i)
                                ((""
                                  (bddsimp)
                                  ((""
                                    (inst -3 an)
                                    (("" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil) nil
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil))
   shostak))
 (removeFeatureSameProducts 0
  (removeFeatureSameProducts-10 nil 3657619438
   ("" (lemma itsNotIncluded)
    (("" (lemma pairsNotIncluded)
      (("" (skolem 1 (pl pl2 s its pairs P Q))
        (("" (inst -1 pl pl2 s its pairs P Q)
          (("" (inst -2 pl pl2 s its pairs P Q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -3 c)
                  (("" (inst -2 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand predRemoveFeature)
                          (("" (flatten)
                            (("" (expand semantics)
                              ((""
                                (expand map)
                                ((""
                                  (decompose-equality)
                                  ((""
                                    (decompose-equality 1)
                                    ((""
                                      (bddsimp)
                                      (("1"
                                        (skolem -1 an)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand eval)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 an)
                                                  (("1"
                                                    (expand
                                                     syntaxRemoveFeature)
                                                    (("1"
                                                      (inst -3 c)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           overw)
                                                          (("1"
                                                            (expand
                                                             union)
                                                            (("1"
                                                              (expand
                                                               difference)
                                                              (("1"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     i)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "(an,x!1)")
                                                                      (("1"
                                                                        (expand
                                                                         member)
                                                                        (("1"
                                                                          (expand
                                                                           remove)
                                                                          (("1"
                                                                            (expand
                                                                             domain)
                                                                            (("1"
                                                                              (expand
                                                                               evalCK)
                                                                              (("1"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   2
                                                                                   i)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("5"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("6"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem -1 an)
                                        (("2"
                                          (inst 1 an)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand
                                               syntaxRemoveFeature)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand overw)
                                                  (("2"
                                                    (expand difference)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (expand
                                                           assetsCK)
                                                          (("2"
                                                            (skolem
                                                             -3
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "(an,x!1)")
                                                                (("2"
                                                                  (expand
                                                                   union)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (expand
                                                                       remove)
                                                                      (("2"
                                                                        (expand
                                                                         domain)
                                                                        (("2"
                                                                          (inst
                                                                           -12
                                                                           i)
                                                                          (("2"
                                                                            (inst
                                                                             -11
                                                                             an)
                                                                            (("2"
                                                                              (bddsimp)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("6"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("7"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("8"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("9"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("10"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("11"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("12"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil (union const-decl "set" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (remove const-decl "mapping" maps nil)
    (mapping type-eq-decl nil maps nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil nil
    (dom const-decl "set[S]" maps nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil) nil
    (satisfies def-decl "boolean" FormulaTheory nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (difference const-decl "set" sets nil)
    (overw const-decl "mapping" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil)
  (removeFeatureSameProducts-9 nil 3657556116
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil) nil
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil) nil)
   nil)
  (removeFeatureSameProducts-8 nil 3657555864
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-7 nil 3657555685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-6 nil 3657555648
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -5)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-5 nil 3657555612
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-4 nil 3657555537
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-3 nil 3657555381
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-2 nil 3657553685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil) nil
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil) nil)
   nil)
  (removeFeatureSameProducts-1 nil 3657408487
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -9)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -10)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -8)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -9)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    nil (difference const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (map const-decl "finite_sets[T].finite_set" maps nil) nil)
   shostak))
 (removeFeaturePartRefStrong 0
  (removeFeaturePartRefStrong-1 nil 3657619515
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (lemma removeFeatureSameProducts)
      (("" (inst -1 pl pl2 s its pairs P Q)
        (("" (bddsimp)
          (("" (expand strongPartialRefinement)
            (("" (bddsimp)
              (("1" (use SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (skolem 1 c)
                        (("1" (inst -4 c)
                          (("1" (bddsimp)
                            (("1" (replace -5 1)
                              (("1" (inst -1 "prod(pl2,c)") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand predRemoveFeature)
                (("2" (bddsimp)
                  (("2" (expand "<>")
                    (("2" (decompose-equality)
                      (("2" (expand subset?)
                        (("2" (skolem 1 c)
                          (("2" (inst -1 c)
                            (("2" (expand member)
                              (("2"
                                (expand syntaxRemoveFeature)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand semantics)
                                    (("2"
                                      (bddsimp)
                                      (("1"
                                        (expand satExpConsts)
                                        (("1"
                                          (skolem 1 f)
                                          (("1"
                                            (inst -3 f)
                                            (("1"
                                              (expand removeFeature)
                                              (("1"
                                                (expand filterFormulae)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst -1 f)
                                                      (("1"
                                                        (bddsimp)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand satImpConsts)
                                        (("2"
                                          (skolem 1 n)
                                          (("2"
                                            (inst -2 n)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (expand removeFeature)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand remove)
                                                    (("2"
                                                      (decompose-equality
                                                       -7)
                                                      (("2"
                                                        (inst -1 n)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand predRemoveFeature)
                (("3" (bddsimp)
                  (("3" (expand "<>")
                    (("3" (decompose-equality -3)
                      (("3" (expand subset?)
                        (("3" (skolem 1 c)
                          (("3" (inst -1 c)
                            (("3" (expand member)
                              (("3" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil) nil
    (subset? const-decl "bool" sets nil) nil
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (remove const-decl "set" sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    nil nil nil (dom const-decl "set[S]" maps nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (overw const-decl "mapping" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil) nil
    (names def-decl "set[Name]" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    nil (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil) nil)
   shostak))
 (removeFeaturePartRefWeak 0
  (removeFeaturePartRefWeak-1 nil 3657619841
   ("" (skolem 1 (pl pl2 m its pairs P Q))
    (("" (lemma removeFeaturePartRefStrong)
      (("" (inst -1 pl pl2 "domain(m)" its pairs P Q)
        (("" (bddsimp)
          (("" (expand* strongPartialRefinement weakPartialRefinement)
            (("" (bddsimp)
              (("1" (skolem 1 c)
                (("1" (inst -4 c)
                  (("1" (expand identity?)
                    (("1" (inst -5 c)
                      (("1" (replace -5 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "maps_identity[Configuration].sameDomImg")
                (("2" (inst -1 m)
                  (("2" (bddsimp)
                    (("2" (replace -2 1 RL) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (identity? const-decl "bool" maps_identity nil)
    (sameDomImg formula-decl nil maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (addAssetsPartRefStrong_TCC1 0
  (addAssetsPartRefStrong_TCC1-1 nil 3657621413
   ("" (skolem 1 (pl am2 ck2 s its pairs pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -6 1)
                (("" (expand semantics)
                  (("" (lemma addAssetsSameProducts)
                    (("" (inst -1 pl am2 ck2 s its pairs)
                      (("" (bddsimp)
                        (("" (expand syntaxAddAssets)
                          (("" (bddsimp)
                            (("1" (inst -4 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -4 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -8 c)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -9 -7)
                              (("2"
                                (expand "<>")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (overw const-decl "mapping" maps nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset? const-decl "bool" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (addAssetsPartRefStrong 0
  (addAssetsPartRefStrong-2 nil 3681745160
   ("" (lemma addUnusedAssets)
    (("" (skolem 1 (pl am2 ck2 s its pairs))
      (("" (inst -1 pl am2 pairs)
        (("" (expand conditionsAddAssets)
          (("" (expand conditionsAddUnusedAssets)
            (("" (bddsimp)
              (("1" (expand strongPartialRefinement)
                (("1" (bddsimp)
                  (("1" (skolem 1 c)
                    (("1" (expand prod)
                      (("1" (bddsimp)
                        (("1" (expand strongerPLrefinement)
                          (("1" (inst -2 c)
                            (("1" (bddsimp)
                              (("1"
                                (lemma addCKLinesStrongPartRef)
                                (("1"
                                  (inst
                                   -1
                                   "(# F:=F(pl),A:=am2,K:=K(pl) #)"
                                   ck2
                                   its
                                   s)
                                  (("1"
                                    (expand strongPartialRefinement)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (inst -4 c)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand prod)
                                            (("1"
                                              (use
                                               SPLrefinement.assetRefinement)
                                              (("1"
                                                (expand preorder?)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     transitive?)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(semantics(K(pl))(A(pl))(c))"
                                                       "(semantics(K(pl))(am2)(c))"
                                                       "(semantics(ck2)(am2)(c))")
                                                      (("1"
                                                        (bddsimp)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand syntaxAddCKLines)
                                        (("2"
                                          (expand syntaxAddAssets)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "<>")
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst -1 c)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand subset?)
                    (("2" (skolem 1 c)
                      (("2" (expand "<>")
                        (("2" (decompose-equality)
                          (("2" (inst -1 c)
                            (("2" (expand member)
                              (("2" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand syntaxAddUnusedAssets)
                (("2" (expand syntaxAddAssets)
                  (("2" (bddsimp) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((addUnusedAssets formula-decl nil SpecificSPL nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (conditionsAddUnusedAssets const-decl "bool" SpecificSPL nil)
    (syntaxAddUnusedAssets const-decl "bool" SpecificSPL nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil) nil nil nil
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    nil)
   nil)
  (addAssetsPartRefStrong-1 nil 3657626188
   ("" (lemma addUnusedAssets)
    (("" (skolem 1 (pl am2 ck2 s its pairs))
      (("" (inst -1 pl am2 pairs)
        (("" (expand conditionsAddAssets)
          (("" (expand conditionsAddUnusedAssets)
            (("" (bddsimp)
              (("1" (expand strongPartialRefinement)
                (("1" (bddsimp)
                  (("1" (skolem 1 c)
                    (("1" (expand prod)
                      (("1" (bddsimp)
                        (("1" (expand strongerPLrefinement)
                          (("1" (inst -2 c)
                            (("1" (bddsimp)
                              (("1"
                                (lemma addCKLinesStrongPartRef)
                                (("1"
                                  (inst
                                   -1
                                   "(# F:=F(pl),A:=am2,K:=K(pl) #)"
                                   ck2
                                   its
                                   s)
                                  (("1"
                                    (expand strongPartialRefinement)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (inst -4 c)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand prod)
                                            (("1"
                                              (use
                                               SPLrefinement.assetRefinement)
                                              (("1"
                                                (expand preorder?)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     transitive?)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(semantics(K(pl))(A(pl))(c))"
                                                       "(semantics(K(pl))(am2)(c))"
                                                       "(semantics(ck2)(am2)(c))")
                                                      (("1"
                                                        (bddsimp)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand syntaxAddCKLines)
                                        (("2"
                                          (expand syntaxAddAssets)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "<>")
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst -1 c)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand subset?)
                    (("2" (skolem 1 c)
                      (("2" (expand "<>")
                        (("2" (decompose-equality)
                          (("2" (inst -1 c)
                            (("2" (expand member)
                              (("2" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand syntaxAddUnusedAssets)
                (("2" (expand syntaxAddAssets)
                  (("2" (bddsimp) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((addUnusedAssets formula-decl nil SpecificSPL nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (conditionsAddUnusedAssets const-decl "bool" SpecificSPL nil)
    (syntaxAddUnusedAssets const-decl "bool" SpecificSPL nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil) nil nil nil
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    nil)
   shostak))
 (addAssetsPartRefWeak_TCC1 0
  (addAssetsPartRefWeak_TCC1-1 nil 3659808577
   ("" (lemma addAssetsPartRefStrong_TCC1)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp) nil nil)) nil))
      nil))
    nil)
   ((domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil))
 (addAssetsPartRefWeak 0
  (addAssetsPartRefWeak-2 nil 3681745050
   ("" (skolem 1 (pl am2 ck2 m its pairs))
    (("" (lemma addAssetsPartRefStrong)
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs)
        (("" (expand* strongPartialRefinement weakPartialRefinement)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -6 c)
                (("1" (expand identity?)
                  (("1" (inst -7 c)
                    (("1" (replace -7 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "maps_identity[Configuration].sameDomImg")
              (("2" (inst -1 m)
                (("2" (bddsimp)
                  (("2" (replace -2 1 RL) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil PartialRefWeak nil)
    (identity? const-decl "bool" maps_identity nil)
    (sameDomImg formula-decl nil maps_identity nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (weakPartialRefinement const-decl "bool" PartialRefWeak nil) nil)
   nil)
  (addAssetsPartRefWeak-1 nil 3659808578
   ("" (skolem 1 (pl am2 ck2 m its pairs))
    (("" (lemma addAssetsPartRefStrong)
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs)
        (("" (expand* strongPartialRefinement weakPartialRefinement)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -6 c)
                (("1" (expand identity?)
                  (("1" (inst -7 c)
                    (("1" (replace -7 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "maps_identity[Configuration].sameDomImg")
              (("2" (inst -1 m)
                (("2" (bddsimp)
                  (("2" (replace -2 1 RL) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (sameDomImg formula-decl nil maps_identity nil)
    (identity? const-decl "bool" maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (removeAssetsPartRefStrong_TCC1 0
  (removeAssetsPartRefStrong_TCC1-1 nil 3657634542
   ("" (skolem 1 (pl am2 ck2 s its pairs pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -6 1)
                (("" (expand semantics)
                  (("" (bddsimp)
                    (("" (lemma removeAssetsSameProducts)
                      (("" (inst -1 pl am2 ck2 s its pairs)
                        (("" (expand syntaxAddAssets)
                          (("" (bddsimp)
                            (("1" (inst -5 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -5 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -8 c)
                                  (("2"
                                    (replace -9 -8)
                                    (("2"
                                      (bddsimp)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand semantics)
                              (("2"
                                (replace -9 -8)
                                (("2"
                                  (expand map)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (map const-decl "finite_sets[T].finite_set" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (overw const-decl "mapping" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (removeAssetsPartRefStrong 0
  (removeAssetsPartRefStrong-1 nil 3657634543
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1" (lemma removeCKLinesStrongPartRef)
                (("1" (lemma removeUnusedAssets)
                  (("1" (inst -1 pl am2 pairs)
                    (("1" (expand conditionsAddUnusedAssets)
                      (("1" (expand conditionsAddAssets)
                        (("1" (bddsimp)
                          (("1" (expand strongerPLrefinement)
                            (("1" (inst -2 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (inst
                                   -4
                                   "(#F:=F(pl),A:=am2,K:=K(pl)#)"
                                   ck2
                                   its
                                   s)
                                  (("1"
                                    (expand syntaxAddCKLines)
                                    (("1"
                                      (expand syntaxAddAssets)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand
                                           strongPartialRefinement)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (inst -8 c)
                                              (("1"
                                                (expand prod)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (use
                                                     SPLrefinement.assetRefinement)
                                                    (("1"
                                                      (expand
                                                       preorder?)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           transitive?)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "(semantics(K(pl))(A(pl))(c))"
                                                             "(semantics(K(pl))(am2)(c))"
                                                             "(semantics(ck2)(am2)(c))")
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "<>")
                                  (("2"
                                    (decompose-equality -4)
                                    (("2"
                                      (inst -1 c)
                                      (("2" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (expand* syntaxAddAssets
                             syntaxAddUnusedAssets)
                            (("2" (bddsimp) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "<>")
          (("2" (decompose-equality)
            (("2" (expand subset?)
              (("2" (skolem 1 c)
                (("2" (inst -1 c)
                  (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (removeUnusedAssets formula-decl nil SpecificSPL nil)
    (conditionsAddUnusedAssets const-decl "bool" SpecificSPL nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil) nil
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (syntaxAddUnusedAssets const-decl "bool" SpecificSPL nil) nil
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   shostak))
 (removeAssetsPartRefWeak_TCC1 0
  (removeAssetsPartRefWeak_TCC1-1 nil 3659808943
   ("" (lemma removeAssetsPartRefStrong_TCC1)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp) nil nil)) nil))
      nil))
    nil)
   ((domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil) nil)
   nil))
 (removeAssetsPartRefWeak 0
  (removeAssetsPartRefWeak-1 nil 3659808943
   ("" (skolem 1 (pl am2 ck2 m its pairs))
    (("" (lemma removeAssetsPartRefStrong)
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs)
        (("" (expand* strongPartialRefinement weakPartialRefinement)
          (("" (bddsimp)
            (("1" (skolem 1 c)
              (("1" (inst -6 c)
                (("1" (expand identity?)
                  (("1" (inst -7 c)
                    (("1" (replace -7 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "maps_identity[Configuration].sameDomImg")
              (("2" (inst -1 m)
                (("2" (bddsimp)
                  (("2" (replace -2 1 RL) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (sameDomImg formula-decl nil maps_identity nil)
    (identity? const-decl "bool" maps_identity nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak)))

