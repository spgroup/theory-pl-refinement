(Specific_FMpCKt
 (IMP_SPLrefinement_assetRefinement_TCC1 0
  (IMP_SPLrefinement_assetRefinement_TCC1-1 nil 3562496029 3567276877
   ("" (use "Assets.assetRefinement") nil nil) proved
   ((assetRefinement formula-decl nil Assets nil)) 104 30 t nil))
 (conditionsReplaceFeatureExp_TCC1 0
  (conditionsReplaceFeatureExp_TCC1-1 nil 3562497515 3567276877
   ("" (subtype-tcc) nil nil) proved
   ((wfTree const-decl "bool" FeatureModel nil)) 26 10 t nil))
 (replaceFeatureExp_EqualCKeval 0
  (replaceFeatureExp_EqualCKeval-1 nil 3562497542 3567277317
   ("" (skolem 1 (pl ck2 it1 it2 its))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* syntaxReplaceFeatureExp
               conditionsReplaceFeatureExp)
              (("" (flatten)
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (hide (-2 -3))
                      (("" (expand semanticsCK)
                        (("" (instantiate -4 c)
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (bddsimp)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((conditionsReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (syntaxReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil))
   40 30 t shostak))
 (replaceFeatureExpression_TCC1 0
  (replaceFeatureExpression_TCC1-1 nil 3562497515 3567276877
   ("" (skolem 1 (pl ck2 it1 it2 its pl2))
    (("" (assert)
      (("" (flatten)
        (("" (replace -4)
          (("" (hide -4)
            (("" (typepred pl)
              (("" (expand wfPL)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (assert)
                        ((""
                          (expand* syntaxReplaceFeatureExp
                           conditionsReplaceFeatureExp)
                          (("" (flatten)
                            (("" (replace -3)
                              ((""
                                (replace -4)
                                ((""
                                  (expand semantics (-1 1))
                                  ((""
                                    (expand semanticsCK)
                                    ((""
                                      (replace -5)
                                      ((""
                                        (instantiate -7 c)
                                        ((""
                                          (assert)
                                          (("" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (conditionsReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (syntaxReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil))
   144 60 t nil))
 (replaceFeatureExpression 0
  (replaceFeatureExpression-1 nil 3563550148 3567277317
   ("" (skolem 1 (pl ck2 it1 it2 its))
    (("" (assert)
      (("" (bddsimp)
        (("1" (use replaceFeatureExpression_TCC1)
          (("1" (assert) nil nil)) nil)
         ("2"
          (expand* wfCK syntaxReplaceFeatureExp
           conditionsReplaceFeatureExp)
          (("2" (flatten)
            (("2" (skolem 1 e)
              (("2" (flatten)
                (("2" (replace -2)
                  (("2" (replace -3)
                    (("2" (hide (-2 -3))
                      (("2" (expand exps)
                        (("2" (expand* union singleton member)
                          (("2" (bddsimp)
                            (("1" (assert) nil nil)
                             ("2" (instantiate -1 e)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand plRefinement)
          (("3"
            (expand* syntaxReplaceFeatureExp
             conditionsReplaceFeatureExp)
            (("3" (flatten)
              (("3" (skolem 1 c)
                (("3" (flatten)
                  (("3" (instantiate 1 c)
                    (("3" (assert)
                      (("3" (replace -2)
                        (("3" (replace -3)
                          (("3" (instantiate -6 c)
                            (("3" (assert)
                              (("3"
                                (hide (-2 -3))
                                (("3"
                                  (expand semantics +)
                                  (("3"
                                    (expand semanticsCK)
                                    (("3"
                                      (replace -2)
                                      (("3"
                                        (bddsimp)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use assetRefinement)
                                            (("1"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (instantiate
                                                   -1
                                                   "semanticsCK(its, A(pl), c,
                        transform(tasks(it2), A(pl), emptyset))")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (use assetRefinement)
                                            (("2"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (instantiate
                                                   -1
                                                   "semanticsCK(its, A(pl), c, emptyset)")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (emptyset const-decl "set" sets nil)
    (transform const-decl "AM" CKtrans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (syntaxReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (conditionsReplaceFeatureExp const-decl "bool" Specific_FMpCKt nil)
    (wfCK const-decl "bool" CKtrans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (replaceFeatureExpression_TCC1 subtype-tcc nil Specific_FMpCKt nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   142 110 t shostak))
 (evalCKdeadFeature 0
  (evalCKdeadFeature-1 nil 3563551271 3567277317
   ("" (induct ck)
    (("1" (expand semanticsCK) (("1" (propax) nil nil)) nil)
     ("2" (skolem 1 (it its))
      (("2" (flatten)
        (("2" (skolem 1 (fm am opt amt))
          (("2" (flatten)
            (("2" (skolem 2 c)
              (("2" (flatten)
                (("2" (lemma formNames2)
                  (("2" (lemma satisfies1)
                    (("2" (expand semanticsCK +)
                      (("2" (instantiate -2 (fm "exp(it)" opt))
                        (("1" (assert)
                          (("1" (bddsimp)
                            (("1" (instantiate -1 ("exp(it)" c opt))
                              (("1"
                                (assert)
                                (("1"
                                  (case "satisfies(exp(it),c)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (instantiate
                                       -3
                                       (fm
                                        am
                                        opt
                                        "transform(tasks(it), am, amt)"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (instantiate -2 c)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand wfCK)
                                            (("2"
                                              (skolem 2 e)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (instantiate -3 e)
                                                  (("2"
                                                    (expand exps -3)
                                                    (("2"
                                                      (expand*
                                                       union
                                                       singleton
                                                       member)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (instantiate -2 (fm am opt amt))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (instantiate -1 c)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand wfCK)
                                            (("2"
                                              (skolem 3 e)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (instantiate -2 (e))
                                                  (("2"
                                                    (expand exps -2)
                                                    (("2"
                                                      (expand*
                                                       union
                                                       singleton
                                                       member)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand wfCK)
                              (("2"
                                (instantiate -3 "exp(it)")
                                (("2"
                                  (expand exps -3)
                                  (("2"
                                    (expand* union singleton member)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand wfTree) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((formNames2 formula-decl nil FormulaTheory nil)
    (fm skolem-const-decl "WFM" Specific_FMpCKt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (member const-decl "bool" sets nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (transform const-decl "AM" CKtrans nil)
    (satisfies1 formula-decl nil FormulaTheory nil)
    (list_induction formula-decl nil list_adt nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (wfCK const-decl "bool" CKtrans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (CK type-eq-decl nil CKtrans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   179 110 t shostak))
 (addMandatoryFeat_TCC1 0
  (addMandatoryFeat_TCC1-1 nil 3563559353 3567276877
   ("" (lemma addMandatoryTWF)
    (("" (skolem 1 (pl F G fm2 pl2))
      (("" (typepred pl)
        (("" (flatten)
          (("" (instantiate -2 ("F(pl)" F G fm2))
            (("" (expand syntaxConditionsAddMandatoryFeat)
              (("" (assert)
                (("" (flatten)
                  (("" (expand wfPL)
                    (("" (skolem 1 c)
                      (("" (flatten)
                        (("" (instantiate -3 c)
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (lemma satisfies2)
                                (("1"
                                  (lemma formNames2)
                                  (("1"
                                    (instantiate -3 "remove(G,c)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma evalCKdeadFeature)
                                        (("1"
                                          (instantiate
                                           -1
                                           ("F(pl)"
                                            "A(pl)"
                                            "K(pl)"
                                            G
                                            emptyset))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand
                                                 addMandatoryNode)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 semantics
                                                 (-4 1))
                                                (("2"
                                                  (instantiate
                                                   -1
                                                   "remove(G,c)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "c=union(remove(G, c), singleton(G))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (expand*
                                                             union
                                                             remove
                                                             singleton
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand* unique emptyset)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (instantiate -1 c)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((syntaxConditionsAddMandatoryFeat const-decl "bool" Specific_FMpCKt
     nil)
    (formNames2 formula-decl nil FormulaTheory nil)
    (remove const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (addMandatoryNode const-decl "bool" FeatureModelRefinements nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (evalCKdeadFeature formula-decl nil Specific_FMpCKt nil)
    (satisfies2 formula-decl nil FormulaTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (list type-decl nil list_adt nil) (CK type-eq-decl nil CKtrans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (addMandatoryTWF formula-decl nil FeatureModelRefinements nil))
   263 120 t nil))
 (addMandatoryFeat 0
  (addMandatoryFeat-1 nil 3563559780 3567277318
   ("" (skolem 1 (pl F G fm2))
    (("" (assert)
      (("" (lemma addMandatoryFeat_TCC1)
        ((""
          (instantiate -1
           (pl F G fm2 "(# F := fm2, A := A(pl), K := K(pl) #)"))
          (("" (flatten)
            (("" (assert)
              (("" (bddsimp)
                (("1" (expand wfCK)
                  (("1" (skolem 1 e)
                    (("1" (flatten)
                      (("1" (instantiate -3 e)
                        (("1" (assert)
                          (("1"
                            (expand syntaxConditionsAddMandatoryFeat)
                            (("1" (lemma wtFormRefinement)
                              (("1"
                                (instantiate -1 ("F(pl)" fm2))
                                (("1"
                                  (expand addMandatoryNode)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand*
                                         union
                                         singleton
                                         member)
                                        (("1"
                                          (expand wfTree)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (instantiate -1 e)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (skolem 1 nm)
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma evalCKdeadFeature)
                  (("2" (expand plRefinement)
                    (("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (lemma addMandatoryTWF)
                          (("2" (instantiate -1 ("F(pl)" F G fm2))
                            (("2" (assert)
                              (("2"
                                (expand
                                 syntaxConditionsAddMandatoryFeat)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (instantiate -1 c)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (instantiate
                                             1
                                             "union(c,G)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (instantiate
                                                 -4
                                                 ("F(pl)"
                                                  "A(pl)"
                                                  "K(pl)"
                                                  G
                                                  emptyset))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     addMandatoryNode)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (instantiate
                                                           -4
                                                           c)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               semantics
                                                               2)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 2
                                                                 RL)
                                                                (("1"
                                                                  (use
                                                                   assetRefinement)
                                                                  (("1"
                                                                    (expand*
                                                                     preorder?
                                                                     reflexive?)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (instantiate
                                                                         -1
                                                                         "semanticsCK(K(pl), A(pl), c, emptyset)")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand unique)
                                                  (("2"
                                                    (expand emptyset)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (instantiate 2 c)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use assetRefinement)
                                                (("2"
                                                  (expand*
                                                   preorder?
                                                   reflexive?)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (instantiate
                                                       -1
                                                       "(semantics(K(pl))(A(pl))(c))")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((evalCKdeadFeature formula-decl nil Specific_FMpCKt nil)
    (addMandatoryTWF formula-decl nil FeatureModelRefinements nil)
    (singleton? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (wfCK const-decl "bool" CKtrans nil)
    (wtFormRefinement formula-decl nil FeatureModelSemantics nil)
    (addMandatoryNode const-decl "bool" FeatureModelRefinements nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (syntaxConditionsAddMandatoryFeat const-decl "bool" Specific_FMpCKt
     nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (addMandatoryFeat_TCC1 subtype-tcc nil Specific_FMpCKt nil))
   203 140 t shostak))
 (syntaxAddOptionalFeature_TCC1 0
  (syntaxAddOptionalFeature_TCC1-1 nil 3563622688 3567276877
   ("" (skolem 1 (fm1 am1 ck1 fm2 am2 ck2 F G its m))
    (("" (flatten)
      (("" (typepred am1)
        (("" (replace -6)
          (("" (hide (-1 -5 -6 -7 -8 -9))
            (("" (expand* unique dom)
              (("" (skolem 1 (an a1 a2))
                (("" (instantiate -1 (an a1 a2))
                  (("" (instantiate -2 an)
                    (("" (instantiate -3 (an a1 a2))
                      (("" (expand* union member)
                        (("" (flatten)
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (instantiate 2 a1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (instantiate 2 a2)
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (instantiate 2 a2)
                                (("3" (propax) nil nil))
                                nil)
                               ("4"
                                (instantiate 2 a1)
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((dom const-decl "set[S]" maps nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil))
   80 30 t nil))
 (semanticEmpty 0
  (semanticEmpty-1 nil 3563802294 3567277318
   ("" (skolem 1 (fm am "_" opt amt))
    (("" (induct ck)
      (("1" (flatten)
        (("1" (expand semanticCK) (("1" (propax) nil nil)) nil)) nil)
       ("2" (skolem 1 (it its))
        (("2" (flatten)
          (("2" (assert)
            (("2" (bddsimp)
              (("1" (skolem 2 c)
                (("1" (instantiate -1 c)
                  (("1" (instantiate -2 c)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (case "satisfies(exp(it),c)")
                          (("1" (instantiate -3 "exp(it)")
                            (("1" (bddsimp)
                              (("1"
                                (expand satisfies -3)
                                (("1"
                                  (expand* semantics satImpConsts)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skolem -3 n1)
                                      (("1"
                                        (instantiate -4 n1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand exps)
                                (("2"
                                  (expand* union singleton member)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand semanticCK 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem 1 c)
                (("2" (skolem 1 e)
                  (("2" (flatten)
                    (("2" (instantiate -3 c)
                      (("2" (instantiate -3 e)
                        (("2" (expand exps -3)
                          (("2" (expand* union singleton member)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-eq-decl nil CKtrans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semanticCK def-decl "AM" CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (list_induction formula-decl nil list_adt nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil))
   75 60 t shostak))
 (semanticsEmpty 0
  (semanticsEmpty-1 nil 3563715528 3567277318
   ("" (skolem 1 (fm am "_" G amt))
    (("" (induct ck)
      (("1" (flatten)
        (("1" (expand semanticsCK 2) (("1" (propax) nil nil)) nil))
        nil)
       ("2" (skolem 1 (it its))
        (("2" (flatten)
          (("2" (assert)
            (("2" (bddsimp)
              (("1" (skolem 2 c)
                (("1" (flatten)
                  (("1" (instantiate -1 c)
                    (("1" (instantiate -2 c)
                      (("1" (assert)
                        (("1" (expand semanticsCK +)
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (case "satisfies(exp(it),c)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (instantiate -3 "exp(it)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand exps -3)
                                        (("1"
                                          (expand*
                                           union
                                           singleton
                                           member)
                                          (("1"
                                            (expand satisfies -3)
                                            (("1"
                                              (skolem -3 n1)
                                              (("1"
                                                (expand*
                                                 semantics
                                                 satImpConsts)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate -5 n1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem 1 c)
                (("2" (skolem 1 e)
                  (("2" (flatten)
                    (("2" (instantiate -3 c)
                      (("2" (instantiate -3 e)
                        (("2" (assert)
                          (("2" (expand exps 3)
                            (("2" (expand* union singleton member) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-eq-decl nil CKtrans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (mapping type-eq-decl nil maps nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (list_induction formula-decl nil list_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil))
   91 60 t shostak))
 (semanticRelation 0
  (semanticRelation-1 nil 3563803593 3567277318
   ("" (induct ck)
    (("1" (expand semanticsCK)
      (("1" (expand semanticCK) (("1" (propax) nil nil)) nil)) nil)
     ("2" (skolem 1 (it its))
      (("2" (flatten)
        (("2" (skolem 1 (am amt c))
          (("2" (expand semanticsCK 1)
            (("2" (expand semanticCK 1)
              (("2" (decompose-equality 1)
                (("2" (bddsimp)
                  (("1"
                    (instantiate -3
                     (am "transform(tasks(it), am, amt)" c))
                    (("1" (assert) nil nil)) nil)
                   ("2"
                    (instantiate -3
                     (am "transform(tasks(it), am, amt)" c))
                    (("2" (assert) nil nil)) nil)
                   ("3" (instantiate -2 (am "amt" c))
                    (("3" (assert) nil nil)) nil)
                   ("4" (instantiate -2 (am "amt" c))
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((transform const-decl "AM" CKtrans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (list_induction formula-decl nil list_adt nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (semanticCK def-decl "AM" CKtrans nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil CKtrans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   62 40 t shostak))
 (semanticsAppend 0
  (semanticsAppend-1 nil 3563801340 3567277318
   ("" (induct ck1)
    (("1" (skolem 1 (am ck2 amt c))
      (("1" (expand append)
        (("1" (expand semanticCK) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 (it its))
      (("2" (flatten)
        (("2" (skolem 1 (am ck2 amt c))
          (("2" (decompose-equality 1)
            (("2" (case "satisfies(exp(it),c)")
              (("1" (bddsimp)
                (("1" (expand append -2)
                  (("1" (expand semanticCK 1)
                    (("1" (assert)
                      (("1" (expand semanticsCK -2)
                        (("1"
                          (instantiate -3
                           (am ck2 "transform(tasks(it), am, amt)" c))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand semanticCK -2)
                  (("2" (expand append 1)
                    (("2" (expand semanticsCK 1)
                      (("2" (assert)
                        (("2"
                          (instantiate -3
                           (am ck2 "transform(tasks(it), am, amt)" c))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand append -1)
                  (("1" (expand semanticsCK -1)
                    (("1" (assert)
                      (("1" (expand semanticCK 2)
                        (("1" (instantiate -2 (am ck2 amt c))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand semanticCK -1)
                  (("2" (expand append 2)
                    (("2" (expand semanticsCK 2)
                      (("2" (assert)
                        (("2" (instantiate -2 (am ck2 amt c))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((satisfies def-decl "boolean" FormulaTheory nil)
    (transform const-decl "AM" CKtrans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (semanticCK def-decl "AM" CKtrans nil)
    (append def-decl "list[T]" list_props nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil CKtrans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   116 70 t shostak))
 (mapSubsetAM_TCC1 0
  (mapSubsetAM_TCC1-1 nil 3563811082 3567277005
   ("" (skolem 1 (fm am1 am2 ck))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (typepred am1)
            (("" (typepred am2)
              (("" (expand* unique dom union member)
                (("" (skolem 1 (an a1 a2))
                  (("" (flatten)
                    (("" (instantiate -5 an)
                      (("" (instantiate -2 (an a1 a2))
                        (("" (instantiate -4 (an a1 a2))
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (instantiate 3 a2)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (instantiate 3 a1)
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (instantiate 3 a1)
                                (("3" (propax) nil nil))
                                nil)
                               ("4"
                                (instantiate 3 a2)
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil))
   93392 50 t nil))
 (mapSubsetAM 0
  (mapSubsetAM-1 nil 3567277350 3567277635
   ("" (induct ck)
    (("1" (expand semanticsCK) (("1" (propax) nil nil)) nil)
     ("2" (skolem 1 (it its))
      (("2" (flatten)
        (("2" (skolem 1 (fm am1 am2 amt))
          (("2" (flatten)
            (("2" (skolem 1 c)
              (("2" (flatten)
                (("2" (expand semanticsCK 1)
                  (("2" (instantiate -1 (fm am1 am2 amt))
                    (("2" (assert)
                      (("2" (bddsimp)
                        (("1" (instantiate -2 c)
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (case "satisfies(exp(it),c)")
                                  (("1"
                                    (assert)
                                    (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand wfCK)
                          (("2" (skolem 1 e)
                            (("2" (flatten)
                              (("2"
                                (instantiate -3 e)
                                (("2"
                                  (expand exps -3)
                                  (("2"
                                    (expand* union singleton member)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skolem 1 (ck fm am1 am2 amt))
        (("3" (flatten)
          (("3" (typepred am1)
            (("3" (typepred am2)
              (("3" (expand* unique union dom member)
                (("3" (skolem 1 c)
                  (("3" (flatten)
                    (("3" (skolem 1 (an a1 a2))
                      (("3" (flatten)
                        (("3" (instantiate -5 an)
                          (("3" (instantiate -2 (an a1 a2))
                            (("3" (instantiate -4 (an a1 a2))
                              (("3"
                                (assert)
                                (("3"
                                  (bddsimp)
                                  (("1"
                                    (instantiate 3 a2)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (instantiate 3 a1)
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (instantiate 3 a1)
                                    (("3" (propax) nil nil))
                                    nil)
                                   ("4"
                                    (instantiate 3 a2)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 129887 160 t shostak))
 (addOptionalFeatureEqualProducts_TCC1 0
  (addOptionalFeatureEqualProducts_TCC1-1 nil 3563622688 3567277306
   ("" (skolem 1 (pl fm_2 am_2 ck_1 ck_2 F G its m))
    (("" (flatten)
      (("" (typepred am_2)
        (("" (expand syntaxAddOptionalFeature)
          (("" (flatten)
            (("" (replace -7)
              (("" (lemma mapSubsetAM_TCC1)
                (("" (hide (-4 -5 -6 -7 -9 -11 -13))
                  (("" (instantiate -1 ("F(pl)" "A(pl)" m "K(pl)"))
                    (("" (assert) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((syntaxAddOptionalFeature const-decl "bool" Specific_FMpCKt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Name type-decl nil Name nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (list type-decl nil list_adt nil) (CK type-eq-decl nil CKtrans nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (mapSubsetAM_TCC1 subtype-tcc nil Specific_FMpCKt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   116894 70 t nil))
 (addOptionalFeatureEqualProducts 0
  (addOptionalFeatureEqualProducts-3 "" 3563807578 3563811210
   ("" (skolem 1 (pl fm2 am2 ck1 ck2 F G items m amt))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand syntaxAddOptionalFeature)
            (("" (flatten)
              (("" (replace -7)
                (("" (replace -2)
                  (("" (lemma semanticsAppend)
                    ((""
                      (instantiate -1
                       ("union(A(pl), m)" ck1 items amt c))
                      (("1" (replace -7 -1 RL)
                        (("1" (replace -1)
                          (("1" (lemma semanticsEmpty)
                            (("1"
                              (instantiate -1
                               ("F(pl)"
                                "union(A(pl),m)"
                                items
                                G
                                "semanticCK(ck1, union(A(pl),m), c, amt)"))
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (instantiate -2 c)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -9 -2 RL)
                                        (("1"
                                          (replace -2 2)
                                          (("1"
                                            (lemma semanticRelation)
                                            (("1"
                                              (instantiate
                                               -1
                                               ("union(A(pl), m)"
                                                ck1
                                                amt
                                                c))
                                              (("1"
                                                (replace -10 -1 RL)
                                                (("1"
                                                  (replace -1 2 RL)
                                                  (("1"
                                                    (lemma mapSubsetAM)
                                                    (("1"
                                                      (replace -11)
                                                      (("1"
                                                        (instantiate
                                                         -1
                                                         ("F(pl)"
                                                          "A(pl)"
                                                          m
                                                          ck1
                                                          amt))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (instantiate
                                                               -2
                                                               c)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred m)
                                                (("2"
                                                  (typepred "A(pl)")
                                                  (("2"
                                                    (hide
                                                     (-1
                                                      -3
                                                      -5
                                                      -6
                                                      -7
                                                      -8
                                                      -9
                                                      -10
                                                      -11
                                                      -12
                                                      -13
                                                      -14
                                                      -16
                                                      -17
                                                      -18))
                                                    (("2"
                                                      (expand*
                                                       unique
                                                       union
                                                       dom
                                                       member)
                                                      (("2"
                                                        (skolem
                                                         1
                                                         (an a1 a2))
                                                        (("2"
                                                          (instantiate
                                                           -1
                                                           (an a1 a2))
                                                          (("2"
                                                            (instantiate
                                                             -2
                                                             (an
                                                              a1
                                                              a2))
                                                            (("2"
                                                              (instantiate
                                                               -3
                                                               (an))
                                                              (("2"
                                                                (bddsimp)
                                                                (("1"
                                                                  (instantiate
                                                                   4
                                                                   a1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (instantiate
                                                                   4
                                                                   a2)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (instantiate
                                                                   4
                                                                   a2)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (instantiate
                                                                   4
                                                                   a1)
                                                                  (("4"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide
                                 (-1
                                  -2
                                  -3
                                  -4
                                  -5
                                  -6
                                  -7
                                  -8
                                  -10
                                  -11
                                  -12
                                  -13
                                  2
                                  3))
                                (("2"
                                  (typepred m)
                                  (("2"
                                    (typepred "A(pl)")
                                    (("2"
                                      (expand* dom unique union member)
                                      (("2"
                                        (skolem 1 (an a1 a2))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (instantiate -2 (an a1 a2))
                                            (("2"
                                              (instantiate
                                               -4
                                               (an a1 a2))
                                              (("2"
                                                (instantiate -7 an)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (instantiate
                                                       4
                                                       a1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (instantiate
                                                       4
                                                       a2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (instantiate
                                                       4
                                                       a2)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (instantiate
                                                       4
                                                       a1)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred m)
                          (("2" (typepred "A(pl)")
                            (("2"
                              (hide
                               (-1
                                -3
                                -5
                                -6
                                -7
                                -8
                                -9
                                -10
                                -11
                                -13
                                -14
                                -15
                                -16
                                2
                                3))
                              (("2"
                                (expand* union unique dom member)
                                (("2"
                                  (skolem 1 (an a1 a2))
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (instantiate -1 (an a1 a2))
                                      (("2"
                                        (instantiate -2 (an a1 a2))
                                        (("2"
                                          (instantiate -5 an)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (instantiate 4 a1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (instantiate 4 a2)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (instantiate 4 a2)
                                              (("3" (propax) nil nil))
                                              nil)
                                             ("4"
                                              (instantiate 4 a1)
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((syntaxAddOptionalFeature const-decl "bool" Specific_FMpCKt nil)
    (semanticsAppend formula-decl nil Specific_FMpCKt nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Name type-decl nil Name nil) (union const-decl "set" sets nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semanticsEmpty formula-decl nil Specific_FMpCKt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (semanticCK def-decl "AM" CKtrans nil)
    (semanticRelation formula-decl nil Specific_FMpCKt nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (mapSubsetAM formula-decl nil Specific_FMpCKt nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   127065 260 t shostak)
  (addOptionalFeatureEqualProducts-2 "" 3563643964 3563716093
   ("" (skolem 1 (pl fm2 am2 "_" "_" F G items m amt))
    (("" (induct ck1)
      (("1" (skolem 1 ck2)
        (("1" (flatten)
          (("1" (expand syntaxAddOptionalFeature)
            (("1" (replace -2)
              (("1" (expand append)
                (("1" (flatten)
                  (("1" (replace -7)
                    (("1" (skolem 2 c)
                      (("1" (flatten)
                        (("1" (lemma semanticsEmpty)
                          (("1"
                            (instantiate -1
                             ("F(pl)" "union(A(pl),m)" items G amt))
                            (("1" (assert)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (replace -8 -2 RL)
                                  (("1"
                                    (instantiate -2 c)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (expand semanticsCK 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred am2)
                              (("2"
                                (typepred "A(pl)")
                                (("2"
                                  (typepred m)
                                  (("2"
                                    (expand* unique union member dom)
                                    (("2"
                                      (skolem 1 (an a1 a2))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (instantiate -15 an)
                                          (("2"
                                            (instantiate -2 (an a1 a2))
                                            (("2"
                                              (instantiate
                                               -4
                                               (an a1 a2))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (bddsimp)
                                                  (("1"
                                                    (instantiate 4 a2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (instantiate 4 a1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (instantiate 4 a1)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (instantiate 4 a2)
                                                    (("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil)
       ("3" (hide 2)
        (("3" (expand syntaxAddOptionalFeature)
          (("3" (skosimp)
            (("3" (skosimp)
              (("3" (replace -6)
                (("3" (typepred "A(pl)")
                  (("3" (typepred m)
                    (("3" (expand* unique union member)
                      (("3" (skolem 2 (an a1 a2))
                        (("3" (assert)
                          (("3" (instantiate -2 (an a1 a2))
                            (("3" (instantiate -4 (an a1 a2))
                              (("3"
                                (instantiate -12 an)
                                (("3"
                                  (expand dom)
                                  (("3"
                                    (bddsimp)
                                    (("1"
                                      (instantiate 4 a2)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (instantiate 4 a1)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (instantiate 4 a1)
                                      (("3" (propax) nil nil))
                                      nil)
                                     ("4"
                                      (instantiate 4 a2)
                                      (("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 321556 310 t shostak)
  (addOptionalFeatureEqualProducts-1 nil 3563623516 3563641798
   ("" (induct ck1)
    (("1" (induct its)
      (("1" (skolem 1 (pl fm2 am2 ck2 F G m amt))
        (("1" (flatten)
          (("1" (skolem 1 c)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (expand syntaxAddOptionalFeature)
                  (("1" (flatten)
                    (("1" (replace -7)
                      (("1" (expand append 2)
                        (("1" (expand semanticsCK +)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 (it its))
        (("2" (flatten)
          (("2" (skolem 1 (pl fm2 am2 ck2 F G m amt))
            (("2" (flatten)
              (("2" (replace -3)
                (("2" (skolem 1 c)
                  (("2" (flatten)
                    (("2" (expand syntaxAddOptionalFeature)
                      (("2" (flatten)
                        (("2" (expand append -8)
                          (("2" (replace -8)
                            (("2" (expand semanticsCK 2)
                              (("2"
                                (case "satisfies(exp(it),c)")
                                (("1"
                                  (instantiate -13 c)
                                  (("1"
                                    (instantiate -13 "exp(it)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand exps -13)
                                        (("1"
                                          (expand*
                                           union
                                           singleton
                                           member)
                                          (("1"
                                            (expand*
                                             satisfies
                                             semantics
                                             satImpConsts)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skolem -13 n1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate
                                                     -15
                                                     n1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use addOptionalFeatureEqualProducts_TCC1)
        (("3" (skosimp)
          (("3" (use addOptionalFeatureEqualProducts_TCC1)
            (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (use addOptionalFeatureEqualProducts_TCC1)
          (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 1516135 1900 t shostak))
 (addOptionalFeature_TCC1 0
  (addOptionalFeature_TCC1-1 nil 3563622688 3567276882
   ("" (skolem 1 (pl fm2 am2 ck2 F G its m pl2))
    (("" (flatten)
      (("" (bddsimp)
        (("1" (typepred pl)
          (("1" (expand wfPL)
            (("1" (expand syntaxAddOptionalFeature)
              (("1" (flatten)
                (("1" (expand wfPL)
                  (("1" (replace -12) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "A(pl)")
          (("2" (replace -5)
            (("2" (assert)
              (("2" (typepred m)
                (("2" (expand unique)
                  (("2" (expand syntaxAddOptionalFeature)
                    (("2" (flatten)
                      (("2"
                        (hide
                         (-1 -3 -5 -6 -7 -8 -10 -9 -12 -13 -14 -15 1))
                        (("2" (expand dom)
                          (("2" (reveal -7)
                            (("2" (replace -1)
                              (("2"
                                (expand* union member)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (skolem 1 (an a1 a2))
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (instantiate -1 (an a1 a2))
                                        (("2"
                                          (instantiate -2 (an a1 a2))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (instantiate -3 an)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (instantiate 3 a2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (instantiate 3 a1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (instantiate -3 an)
                                                (("2"
                                                  (bddsimp)
                                                  (("1"
                                                    (instantiate 3 a1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (instantiate 3 a2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((dom const-decl "set[S]" maps nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxAddOptionalFeature const-decl "bool" Specific_FMpCKt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   116 80 t nil))
 (addOptionalFeature_TCC2 0
  (addOptionalFeature_TCC2-1 nil 3563622688 3567276882
   ("" (skosimp)
    (("" (use addOptionalFeature_TCC1) (("" (assert) nil nil)) nil))
    nil)
   proved
   ((addOptionalFeature_TCC1 subtype-tcc nil Specific_FMpCKt nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   62 50 t nil))
 (addOptionalFeature_TCC3 0
  (addOptionalFeature_TCC3-1 nil 3563622688 3567276882
   ("" (skosimp)
    (("" (use addOptionalFeature_TCC1) (("" (assert) nil nil)) nil))
    nil)
   proved
   ((addOptionalFeature_TCC1 subtype-tcc nil Specific_FMpCKt nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   45 40 t nil))
 (addOptionalFeature 0
  (addOptionalFeature-1 nil 3563811268 3563811577
   ("" (skolem 1 (pl fm2 am2 ck2 F G items m))
    (("" (assert)
      (("" (bddsimp)
        (("1" (use addOptionalFeature_TCC1) (("1" (assert) nil nil))
          nil)
         ("2" (expand syntaxAddOptionalFeature)
          (("2" (flatten) nil nil)) nil)
         ("3" (use addOptionalFeatureEqualProducts)
          (("3" (assert)
            (("3" (expand plRefinement)
              (("3" (skolem 1 c)
                (("3" (flatten)
                  (("3" (instantiate -1 c)
                    (("3" (assert)
                      (("3" (lemma addOptNode)
                        (("3" (instantiate -1 ("F(pl)" F G fm2))
                          (("3" (bddsimp)
                            (("1" (expand refines)
                              (("1"
                                (expand* subset? member)
                                (("1"
                                  (instantiate -1 c)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use assetRefinement)
                                      (("1"
                                        (expand* preorder? reflexive?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate 1 c)
                                            (("1"
                                              (instantiate
                                               -1
                                               "(semantics(K(pl))(A(pl))(c))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand semantics 1)
                                                  (("1"
                                                    (lemma
                                                     addOptionalFeatureEqualProducts)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       (pl
                                                        fm2
                                                        am2
                                                        "K(pl)"
                                                        ck2
                                                        F
                                                        G
                                                        items
                                                        m
                                                        emptyset))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (instantiate
                                                           -1
                                                           c)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 semantics
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (expand* syntaxAddOptionalFeature
                               addOptionalNode)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -5)
                                    (("2"
                                      (expand* union singleton member)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((addOptionalFeatureEqualProducts formula-decl nil Specific_FMpCKt
     nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (addOptionalNode const-decl "bool" FeatureModelRefinements nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (refines const-decl "bool" FeatureModelSemantics nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (addOptNode formula-decl nil FeatureModelRefinements nil)
    (syntaxAddOptionalFeature const-decl "bool" Specific_FMpCKt nil)
    (addOptionalFeature_TCC1 subtype-tcc nil Specific_FMpCKt nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil CKtrans nil) (list type-decl nil list_adt nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil))
   309127 340 t shostak)))

