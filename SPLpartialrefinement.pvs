SPLpartialrefinement: THEORY
BEGIN

IMPORTING SPLrefinement

% Partial SPL Refinement

   % VARIABLES
    c: VAR Conf
    f,g: VAR [Conf -> Conf]
    s,t,u: VAR set[Conf]
    fm: VAR FM
    pl, pl1, pl2, pl3: VAR PL
    p, p1, p2: VAR finite_sets[Asset].finite_set

   % FUNCTIONS
    prod(pl,c) : finite_sets[Asset].finite_set =  ( ([| K(pl) |] (A(pl))) (c) )
    prod(pl,s) : finite_sets[finite_sets[Asset].finite_set].finite_set  = 
                      {p | EXISTS c : ({|F(pl)|}(c)) AND member(c,s) AND  p = prod(pl,c)} 
    
    d(f) : set[Conf] = {c:domain(f) | true}
    cd(f): set[Conf] = {c:range(f)  | true}
    r(f) : set[Conf] = {c2:range(f)  | EXISTS (c:domain(f)) : f(c) = c2}
   
   % RELATIONS
   % Partial Refinement Relation - this definition requires that the configuration does not change
    strongPartialRefinement(pl1,pl2,s) : bool = 
     FORALL c: (s)(c) =>
	  (
              prod(pl1,c)
	      |- 
	      prod(pl2,c)
          )

   % Partial Refinement Relation - this definition considers a function that maps configurations.
    weakPartialRefinement(pl1,pl2:PL,f:{f | subset?(d(f),{|F(pl1)|}) AND subset?(r(f),{|F(pl2)|})}) : bool = 
    	FORALL p1 : prod(pl1,d(f))(p1) => 
            (
               EXISTS p2 : prod(pl2,r(f))(p2) AND (p1 |- p2)
            ) 

    % Partial Refinement Relation - this definition has two indexes.
    weakPartialRefinementAlt(pl1,pl2,s,t) : bool =  
         FORALL p1 : prod(pl1,s)(p1) => 
            (
               EXISTS p2 : prod(pl2,t)(p2) AND (p1 |- p2)
            )       
  
   % LEMMAS 
   % Lemma composite function domain
     domainSetComposite: LEMMA FORALL f,g : d(f) = d(g o f)
   % This lemma is useful for the transitivity theorem because we need to choose an arbitrary product and then instantiate this product
   % in a larger set of products.
     productBelongsToLargerSet: LEMMA FORALL p,pl,s,t : 
                                       subset?(s,t) =>  (prod(pl,s)(p) => prod(pl,t)(p))

   % THEOREMS
   % Theorem <strong partial refinement is reflexive>
    strongPartRefReflexive: THEOREM FORALL pl,s: strongPartialRefinement(pl,pl,s)
   % Theorem <strong partial refinement is transitive>
    strongPartRefTransitive: THEOREM (FORALL pl1,pl2,pl3,s,t : 
                                              (
                                                 strongPartialRefinement(pl1,pl2,s) 
                                                AND 
                                                 strongPartialRefinement(pl2,pl3,t)
                                              ) 
                                              => strongPartialRefinement(pl1,pl3,intersection(s,t))
                                      )


   % Theorem <weak partial refinement is reflexive>
    weakPartRefReflexive: THEOREM (FORALL pl,f : (d(f) = r(f)) => weakPartialRefinement(pl,pl,f))
   % Theorem <weak partial refinement is transitive>
    weakPartRefTransitive: THEOREM (FORALL pl1, pl2, pl3, f, g : 
                                         (
                                            weakPartialRefinement(pl1,pl2,f) 
                                           AND 
                                            weakPartialRefinement(pl2,pl3,g) 
                                           AND 
                                            r(g) = r(g o f) 
                                           AND 
                                            subset?(r(f),d(g))
                                          )
                                          => weakPartialRefinement(pl1,pl3,g o f)
                               )

    % Theorem <weak partial refinement is reflexive>
    weakPartRefAltReflexive: THEOREM (FORALL pl,s : weakPartialRefinementAlt(pl,pl,s,s))
    % Theorem <weak partial refinement is transitive>
    weakPartRefAltTransitive: THEOREM (FORALL pl1,pl2,pl3,s,t,u : 
                                         (
                                            weakPartialRefinementAlt(pl1,pl2,s,t) 
                                           AND 
                                            weakPartialRefinementAlt(pl2,pl3,t,u)  
                                          )
                                          => weakPartialRefinementAlt(pl1,pl3,s,u)
                               )     

     
    % Theorems to establish relation between the definitions previously declared.  
     strongPartCaseWeak: THEOREM FORALL f,pl1,pl2:  
                                    (d(f) = r(f)  AND subset?(r(f),{|F(pl2)|}))  
                                    => 
                                    (strongPartialRefinement(pl1,pl2,d(f)) => weakPartialRefinement(pl1,pl2,f))
      %obs.: this theorem is not proved yet, because it might not be true
     strongPartCaseWeak2: THEOREM FORALL f,pl1,pl2:  
                                    (d(f) = r(f)  AND subset?(r(f),{|F(pl2)|}))  
                                    => 
                                    (weakPartialRefinement(pl1,pl2,f) => strongPartialRefinement(pl1,pl2,d(f)))

     eqPlRefPartWeakAlt: THEOREM FORALL pl1,pl2,s,t : 
                                (s = {|F(pl1)|} AND t = {|F(pl2)|}) => (plRefinement(pl1,pl2) <=> weakPartialRefinementAlt(pl1,pl2,s,t))

     eqWeakAndWeakAlt: THEOREM FORALL pl1,pl2,f,s,t: 
                                (s = d(f) AND t = r(f)) => (weakPartialRefinementAlt(pl1,pl2,s,t) <=> weakPartialRefinement(pl1,pl2,f))
     

END SPLpartialrefinement
