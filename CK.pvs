CK: THEORY
BEGIN
  IMPORTING AssetMapping

  Configuration: TYPE
  FeatureExpression: TYPE+
  sat(f:FeatureExpression, c:Configuration): boolean

  FMi: TYPE
  Feature : TYPE
  [||] : [FMi -> set[Configuration]]
  wt(fm:FMi, f:FeatureExpression):boolean

  RightSide: TYPE+
  Item: TYPE% = [# exp:FeatureExpression, right:RightSide #]
  CK: TYPE

  am,am1,am2: VAR AM
  a1,a2,a3: VAR Asset
  an,an1,an2: VAR AssetName
  anSet: VAR finite_sets[AssetName].finite_set
  aSet,S1,S2: VAR finite_sets[Asset].finite_set
  pair: VAR [AssetName,Asset]
  pairs: VAR finite_sets[[AssetName,Asset]].finite_set
  fm,fm1,fm2: VAR FMi
  ck,ck1,ck2: VAR CK
  item,it,item1,item2: VAR Item
  its,its1,its2: VAR set[Item]
  c,c1,c2: VAR Configuration
  e,e1,e2: VAR FeatureExpression
  f,f1,f2: VAR Feature
  p,p1,p2: VAR Feature

  exps(ck) : set[FeatureExpression]
  items(ck) : set[Item]

  getExp(item) : FeatureExpression
  getRS(item) : RightSide

  wfCK(fm,am,ck) : bool

  semantics(ck)(am)(c): finite_sets[Asset].finite_set

  notshowupItem(it,an): bool
  showupItem(it,an): bool

  notshowup(ck,an): bool =
  	FORALL it: items(ck)(it) => notshowupItem(it,an)
  showup(ck,an): bool =
  	EXISTS it: items(ck)(it) AND showupItem(it,an)

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REPLACE FEATURE EXPRESSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  syntaxReplaceFeatureExp(ck1,ck2,item1,item2,its) : bool =
    items(ck1) = add(item1,its) AND                        
    items(ck2) = add(item2,its) AND                        
    getRS(item1) = getRS(item2);

  conditionsReplaceFeatureExp(fm,item1,item2) : bool =
    wt(fm,getExp(item2)) AND
    FORALL c: [||](fm)(c) => (sat(getExp(item1),c)<=>sat(getExp(item2),c))

  replaceFeatureExp_EqualCKeval: AXIOM
    FORALL(fm,am,ck1,ck2,item1,item2,its):
    (
      (
      wfCK(fm,am,ck1) AND
      syntaxReplaceFeatureExp(ck1,ck2,item1,item2,its) AND
      conditionsReplaceFeatureExp(fm,item1,item2)
      )
      =>
        FORALL c: [||](fm)(c) => semantics(ck1)(am)(c) = semantics(ck2)(am)(c)
    )  


  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%% DELETE ASSET NOT REFERRED IN CK %%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  syntaxSimpleDeleteAsset(ck,am1,am2,an) : bool =
    dom(am1)(an) AND
    am2 = rm(an,am1) AND
    notshowup(ck,an);


  simpleDeleteAsset_EqualCKeval: AXIOM
    FORALL(fm,ck,am1,am2,an):
    (
      (
      wfCK(fm,am1,ck) AND
      syntaxSimpleDeleteAsset(ck,am1,am2,an)
      )
      =>
        FORALL c: [||](fm)(c) => semantics(ck)(am1)(c) = semantics(ck)(am2)(c)
    )  

End CK
