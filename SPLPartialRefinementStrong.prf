(SPLPartialRefinementStrong
 (strongPartRefReflexive 0
  (strongPartRefReflexive-1 nil 3655065337
   ("" (skolem 1 (x s))
    (("" (expand strongPartialRefinement)
      (("" (skolem 1 c)
        (("" (use assetRefinement)
          (("" (expand preorder?)
            (("" (flatten)
              (("" (expand reflexive?)
                (("" (inst -1 "prod(x, c)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (strongPartRefTransitive_TCC1 0
  (strongPartRefTransitive_TCC1-1 nil 3656875987
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (bddsimp)
      (("1" (typepred s)
        (("1" (typepred t)
          (("1" (expand intersection)
            (("1" (expand member)
              (("1" (expand subset?)
                (("1" (skolem 1 c)
                  (("1" (expand member)
                    (("1" (inst -2 c) (("1" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred s)
        (("2" (typepred t)
          (("2" (expand intersection)
            (("2" (expand subset?)
              (("2" (expand member)
                (("2" (skolem 1 c)
                  (("2" (inst -3 c) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLPartialRefinementStrong nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FM formal-type-decl nil SPLPartialRefinementStrong nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialRefinementStrong nil)
    (Asset formal-type-decl nil SPLPartialRefinementStrong nil)
    (AssetName formal-type-decl nil SPLPartialRefinementStrong nil)
    (CK formal-type-decl nil SPLPartialRefinementStrong nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLPartialRefinementStrong nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (strongPartRefTransitive 0
  (strongPartRefTransitive-1 nil 3655065416
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (prop)
      (("" (expand strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (expand intersection)
                (("" (expand member)
                  (("" (prop)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand transitive?)
                            ((""
                              (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                               "prod(pl3,c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (intersection const-decl "set" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil))
   shostak))
 (fmCompStrongDef_TCC1 0
  (fmCompStrongDef_TCC1-1 nil 3656090730
   ("" (skolem 1 (t pl fm1 fm2 s fm3))
    (("" (bddsimp)
      (("" (skolem 1 pl2)
        (("" (bddsimp)
          (("1" (typepred s)
            (("1" (replace -7 1)
              (("1" (expand subset?) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (typepred s)
            (("2" (expand fmPartialRefinement)
              (("2" (expand subset?)
                (("2" (skolem 1 c)
                  (("2" (expand member)
                    (("2" (replace -3 -5)
                      (("2" (inst -5 c)
                        (("2" (inst -4 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLPartialRefinementStrong nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FM formal-type-decl nil SPLPartialRefinementStrong nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialRefinementStrong nil)
    (member const-decl "bool" sets nil))
   nil))
 (fmCompStrongDef 0
  (fmCompStrongDef-1 nil 3656090730
   ("" (skolem 1 (pl fm1 fm2 s t))
    (("" (expand* fmPartialRefinement strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -2 c)
            (("" (expand subset?)
              (("" (inst -1 c)
                (("" (expand member)
                  (("" (expand prod)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            (("" (use assetRefinement)
                              ((""
                                (expand preorder?)
                                ((""
                                  (flatten)
                                  ((""
                                    (expand reflexive?)
                                    ((""
                                      (inst
                                       -1
                                       "([||](K(fm1))(A(fm1))(c))")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (totalImpliesPartial_TCC1 0
  (totalImpliesPartial_TCC1-1 nil 3658524569
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("1" (typepred s)
        (("1" (expand strongerPLrefinement)
          (("1" (expand subset?)
            (("1" (skolem 1 c)
              (("1" (inst -1 c)
                (("1" (inst -2 c)
                  (("1" (expand member) (("1" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred s) (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLPartialRefinementStrong nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (FM formal-type-decl nil SPLPartialRefinementStrong nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialRefinementStrong nil)
    (Asset formal-type-decl nil SPLPartialRefinementStrong nil)
    (AssetName formal-type-decl nil SPLPartialRefinementStrong nil)
    (CK formal-type-decl nil SPLPartialRefinementStrong nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLPartialRefinementStrong nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (totalImpliesPartial 0
  (totalImpliesPartial-1 nil 3658524570
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (expand* strongerPLrefinement strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (typepred s)
              (("" (expand subset?)
                (("" (inst -1 c)
                  (("" (expand member)
                    (("" (expand prod) (("" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (partialImpliesTotal_TCC1 0
  (partialImpliesTotal_TCC1-1 nil 3658524794
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (replace -2 1)
        (("" (expand subset?)
          (("" (skolem 1 c)
            (("" (expand member) (("" (bddsimp) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (partialImpliesTotal 0
  (partialImpliesTotal-1 nil 3658524796
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (expand* strongerPLrefinement strongPartialRefinement)
        (("" (replace -1 -2)
          (("" (skolem 1 c)
            (("" (expand prod)
              (("" (bddsimp)
                (("1" (typepred s)
                  (("1" (inst -4 c)
                    (("1" (bddsimp)
                      (("1" (replace -2 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand subset?)
                  (("2" (inst -2 c)
                    (("2" (expand member) (("2" (bddsimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (commutableDiagram1 0
  (commutableDiagram1-1 nil 3658526590
   ("" (skolem 1 (pl1 pl4 pl3 s))
    (("" (bddsimp)
      (("" (inst 1 pl4 s)
        (("" (bddsimp)
          (("1" (lemma strongerPLref)
            (("1" (expand preorder?)
              (("1" (flatten)
                (("1" (expand reflexive?) (("1" (inst -1 pl4) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma totalImpliesPartial)
            (("2" (inst -1 pl1 pl3 s)
              (("2" (bddsimp)
                (("2" (lemma strongPartRefTransitive)
                  (("2" (inst -1 pl1 pl3 pl4 s s)
                    (("2" (bddsimp)
                      (("2"
                        (lemma
                         sets_lemmas[Conf].intersection_idempotent)
                        (("2" (inst -1 s)
                          (("2" (replace -1 -4)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (strongerPLref formula-decl nil SPLrefinement nil)
    (strongPartRefTransitive formula-decl nil
     SPLPartialRefinementStrong nil)
    (intersection_idempotent formula-decl nil sets_lemmas nil)
    (totalImpliesPartial formula-decl nil SPLPartialRefinementStrong
     nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLPartialRefinementStrong nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]"
     SPLPartialRefinementStrong nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK formal-type-decl nil SPLPartialRefinementStrong nil)
    (AssetName formal-type-decl nil SPLPartialRefinementStrong nil)
    (Asset formal-type-decl nil SPLPartialRefinementStrong nil)
    (FM formal-type-decl nil SPLPartialRefinementStrong nil)
    (Conf formal-type-decl nil SPLPartialRefinementStrong nil))
   shostak))
 (plRefImpliesRefFun 0
  (plRefImpliesRefFun-1 nil 3658649403
   ("" (skolem 1 (pl1 pl2 f))
    (("" (bddsimp)
      (("1" (expand* plRefinementFun strongerPLrefinement)
        (("1" (skolem 1 c)
          (("1" (inst -2 c)
            (("1" (bddsimp)
              (("1" (replace -1 -4)
                (("1" (expand id)
                  (("1" (expand prod) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 -3)
                (("2" (expand id) (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* strongerPLrefinement plRefinementFun)
        (("2" (skolem 1 c)
          (("2" (inst -2 c)
            (("2" (bddsimp)
              (("1" (replace -1 1)
                (("1" (expand id)
                  (("1" (expand prod) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 1)
                (("2" (expand id) (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (plRefinementFun const-decl "bool" SPLPartialRefinementStrong nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (plRefFunTransitive 0
  (plRefFunTransitive-1 nil 3658651918
   ("" (skolem 1 (pl1 pl2 pl3 s f))
    (("" (bddsimp)
      (("" (expand* strongPartialRefinement plRefinementFun)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (bddsimp)
                (("1" (use assetRefinement)
                  (("1" (expand preorder?)
                    (("1" (flatten)
                      (("1" (expand transitive?)
                        (("1"
                          (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                           "prod(pl3,f(c))")
                          (("1" (bddsimp) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                 ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                 ("6" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

