(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3498492438 3499097837 ("" (grind) nil nil) unchecked
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   162 40 t shostak))
 (refFM 0
  (refFM-1 nil 3498492442 3499097837 ("" (grind) nil nil) unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   217 60 t shostak))
 (amRefCompositional 0
  (amRefCompositional-1 nil 3506978924 3506979190
   ("" (skolem 1 (A1 A2))
    (("" (expand "|>")
      (("" (flatten)
        ((""
          (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
          (("1" (bddsimp)
            (("1" (skolem 1 ans)
              (("1" (flatten)
                (("1"
                  (case "EXISTS(an:AssetName): ans(an) and dom(A1)(an)")
                  (("1" (skolem -1 an)
                    (("1" (flatten)
                      (("1"
                        (lemma sets_lemmas[AssetName].nonempty_member)
                        (("1" (expand member)
                          (("1" (instantiate -1 ans)
                            (("1" (expand nonempty?)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   set_aux_lemmas[AssetName].setMember)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (instantiate -1 (ans an))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 ans2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (instantiate -5 ans2)
                                              (("2"
                                                (lemma
                                                 set_aux_lemmas[AssetName].cardUnion)
                                                (("2"
                                                  (expand member)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (an ans2))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem 3 a)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (instantiate
                                                             -9
                                                             an)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "maps[AssetName,Asset].mapAM")
                                                                (("2"
                                                                  (instantiate
                                                                   -1
                                                                   (A1
                                                                    an
                                                                    ans2))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem
                                                                       -10
                                                                       (a1
                                                                        a2))
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           ax)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               A1)
                                                                              (("2"
                                                                                (expand
                                                                                 unique
                                                                                 -2)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   -2
                                                                                   (an
                                                                                    a1
                                                                                    ax))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -4
                                                                                       RL)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 266912 530 t shostak))
 (eqCK 0
  (eqCK-1 nil 3498492449 3499097837 ("" (grind) nil nil) unchecked
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   101 30 t shostak))
 (plRef 0
  (plRef-1 nil 3498493452 3499097837
   ("" (expand preorder?)
    (("" (expand reflexive?)
      (("" (expand transitive?)
        (("" (expand plRefinement)
          (("" (bddsimp)
            (("1" (use assetRefinement)
              (("1" (expand preorder?)
                (("1" (expand transitive?)
                  (("1" (flatten)
                    (("1" (copy -2)
                      (("1" (skolem 1 (x y z))
                        (("1" (flatten)
                          (("1" (skolem 1 c1)
                            (("1" (flatten)
                              (("1"
                                (instantiate -4 c1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -4 c2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -6 c2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skolem -6 c3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 1 c3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     ("([||](K(x))(A(x))(c1))"
                                                      "([||](K(y))(A(y))(c2))"
                                                      "([||](K(z))(A(z))(c3))"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 x)
              (("2" (skolem 1 c)
                (("2" (flatten)
                  (("2" (instantiate 1 c)
                    (("2" (assert)
                      (("2" (use assetRefinement)
                        (("2" (expand preorder?)
                          (("2" (expand reflexive?)
                            (("2" (flatten)
                              (("2"
                                (instantiate
                                 -1
                                 "([||](K(x))(A(x))(c))")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   98 50 t shostak))
 (popCompositional 0
  (popCompositional-1 nil 3579892226 3579892322
   ("" (skolem 1 (pl1 pl2 pop))
    (("" (expand popRefinement)
      (("" (flatten)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (expand* products union singleton member)
              (("" (skolem -2 spl1)
                (("" (flatten)
                  (("" (expand products) (("" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 96633 40 t shostak))
 (pls_TCC1 0
  (pls_TCC1-1 nil 3580203621 3580336407
   ("" (lemma "set_comp_lemmas[PL,PC].setCompFinite4")
    (("" (lemma "set_comp_lemmas[PL,PC].setCompFinite5")
      (("" (skolem 1 pcs)
        (("" (typepred pcs)
          (("" (instantiate -2 ("_" pcs))
            (("" (instantiate -2 "LAMBDA(x:PC):pl(x)")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((setCompFinite5 formula-decl nil set_comp_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setCompFinite4 formula-decl nil set_comp_lemmas nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil))
   24 20 t nil))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3580203621 3580335770
   ("" (lemma "set_comp_lemmas[PC,PL].setCompFinite6")
    (("" (skolem 1 (pl pcs))
      ((""
        (instantiate -1
         ("LAMBDA(pc:PC,pl:PL):NOT(pl = pl(pc))" pl pcs))
        (("" (expand /=) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (setCompFinite6 formula-decl nil set_comp_lemmas nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   44660 160 t nil))
 (product_TCC1 0
  (product_TCC1-1 nil 3580199137 3580337221
   ("" (lemma "set_comp_lemmas[PC,Asset].setCompFinite")
    (("" (instantiate -1 "LAMBDA(x:PC):prod(x)")
      (("" (bddsimp)
        (("1" (skolem 1 pcs)
          (("1" (instantiate -1 pcs)
            (("1" (assert)
              (("1"
                (case "{a: Asset | EXISTS (item: PC): (prod(item)(a)) AND pcs(item)}={p: Asset | EXISTS (pc): pcs(pc) AND prod(pc)(p)}")
                (("1" (assert) nil nil)
                 ("2" (decompose-equality 1)
                  (("2" (bddsimp)
                    (("1" (skolem -1 i)
                      (("1" (flatten)
                        (("1" (instantiate 1 i)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skolem -1 i)
                      (("2" (flatten)
                        (("2" (instantiate 1 i)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 i)
          (("2" (typepred "prod(i)") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (setCompFinite formula-decl nil set_comp_lemmas nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil))
   125797 70 t nil))
 (replace_TCC1 0
  (replace_TCC1-1 nil 3580507537 3580507745
   ("" (skolem 1 (l1 l2 pc))
    (("" (flatten)
      (("" (typepred l1)
        (("" (typepred l2)
          (("" (expand plRefinement)
            (("" (typepred pc)
              (("" (replace -5)
                (("" (instantiate -3 "conf(pc)")
                  (("" (assert)
                    (("" (expand* nonempty? empty? member)
                      (("" (skolem -3 c2)
                        (("" (flatten)
                          (("" (instantiate -7 c2)
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   51960 30 t nil))
 (replace_TCC2 0
  (replace_TCC2-1 nil 3580507537 3580507816
   ("" (skolem 1 (l1 l2 pc))
    (("" (flatten)
      (("" (expand choose)
        (("" (expand member)
          (("" (grind) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 57130 20 t nil))
 (replace_TCC3 0
  (replace_TCC3-1 nil 3580508092 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (replacePLnotInMPL 0
  (replacePLnotInMPL-1 nil 3580508462 3580508686
   ("" (skolem 1 (l1 l2 S))
    (("" (flatten)
      (("" (expand member)
        (("" (expand pls)
          (("" (decompose-equality 2)
            (("" (expand replace)
              (("" (expand replace)
                (("" (bddsimp)
                  (("1" (case "pl(x!1)=l1")
                    (("1" (instantiate 1 x!1)
                      (("1" (assert)
                        (("1" (instantiate 2 x!1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (instantiate 2 x!1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skolem -1 pc2)
                    (("2" (flatten)
                      (("2" (lift-if)
                        (("2" (bddsimp)
                          (("1" (instantiate 2 pc2)
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (replace const-decl "PC" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (replace const-decl "finite_sets[PC].finite_set" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" SPLrefinement nil))
   201396 70 t shostak))
 (rem_TCC1 0
  (rem_TCC1-1 nil 3580146675 3580336407
   ("" (instantiate 1 "LAMBDA(p:PL,m:MPL):m") (("" (propax) nil nil))
    nil)
   unchecked
   ((MPL type-eq-decl nil SPLrefinement nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil))
   1 0 t nil))
 (productUnion 0
  (productUnion-1 nil 3580199141 3580200796
   ("" (skolem 1 (pc pcs))
    (("" (expand* product union singleton member)
      (("" (decompose-equality 1)
        (("" (bddsimp)
          (("1" (skolem -1 pair)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (instantiate 1 pc) (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skolem -1 pair)
            (("2" (flatten)
              (("2" (instantiate 1 pair) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (skolem -1 pair)
            (("3" (instantiate 1 pair)
              (("3" (instantiate 2 pair) (("3" (bddsimp) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   135763 40 t shostak))
 (prodRef 0
  (prodRef-1 nil 3580200970 3580331502
   ("" (lemma asRefCompositional)
    (("" (skolem 1 (pc1 pc2 pcs))
      (("" (flatten)
        ((""
          (instantiate -1
           ("product(singleton(pc1))" "product(singleton(pc2))"
            "product(pcs)"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((asRefCompositional formula-decl nil SPLrefinement nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   220 20 t shostak))
 (notInMPL 0
  (notInMPL-1 nil 3580217667 3580331519
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (expand member)
        (("" (lemma confsRestriction)
          (("" (skolem 2 pcs)
            (("" (flatten)
              (("" (instantiate -1 (mpl pcs))
                (("" (assert)
                  (("" (expand pls)
                    (("" (skolem -3 pc)
                      (("" (flatten)
                        (("" (instantiate -1 pc)
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" SPLrefinement nil)
    (pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PC type-eq-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (FM type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (confsRestriction formula-decl nil SPLrefinement nil))
   328 30 t shostak))
 (plInMPL 0
  (plInMPL-1 nil 3580221199 3580331526
   ("" (skolem 1 (mpl pl))
    (("" (flatten)
      (("" (skolem -2 pcs)
        (("" (expand member)
          (("" (flatten)
            (("" (expand* semantics products subset? member)
              (("" (instantiate 1 ("product(pcs)" "_"))
                (("" (expand pls)
                  (("" (skolem -3 pc)
                    (("" (flatten)
                      (("" (instantiate 1 "prod(pc)")
                        (("" (expand* prod product)
                          (("" (bddsimp)
                            (("1" (skolem 1 x)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand prod)
                                  (("1"
                                    (instantiate 1 pc)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (instantiate 1 "conf(pc)")
                              (("2" (assert) nil nil)) nil)
                             ("3" (instantiate 1 pcs)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (semantics const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (member const-decl "bool" SPLrefinement nil))
   3305 40 t shostak))
 (plPCS 0
  (plPCS-1 nil 3580323616 3580331530
   ("" (skolem 1 (mpl))
    (("" (skolem 1 pcs)
      (("" (flatten)
        (("" (skolem 1 pl)
          (("" (expand member)
            (("" (flatten)
              (("" (expand pls)
                (("" (skolem -2 pc)
                  (("" (flatten)
                    (("" (instantiate 1 (pc "remove(pl,pcs)"))
                      (("" (assert)
                        (("" (lemma confsRestriction)
                          (("" (instantiate -1 (mpl pcs))
                            (("" (assert)
                              ((""
                                (instantiate -1 pc)
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (bddsimp)
                                      (("1"
                                        (expand remove)
                                        (("1"
                                          (skolem -5 p)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand*
                                         remove
                                         union
                                         singleton
                                         member)
                                        (("2"
                                          (decompose-equality 2)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 2 x!1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" SPLrefinement nil)
    (pls const-decl "finite_sets[PL].finite_set" SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (remove const-decl "finite_sets[PC].finite_set" SPLrefinement nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (confsRestriction formula-decl nil SPLrefinement nil))
   632 70 t shostak))
 (replacePLnotMember 0
  (replacePLnotMember-2 "" 3580512338 3580512338
   ("" (skolem 1 mpl)
    (("" (skolem 1 pcs)
      (("" (flatten)
        (("" (skolem 1 (l1 l2))
          (("" (flatten)
            (("" (bddsimp)
              (("1" (expand member)
                (("1" (replace -3)
                  (("1" (expand pls)
                    (("1" (expand replace) (("1" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand member) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 93119 70 t shostak)
  (replacePLnotMember-1 nil 3580510073 3580512198
   ("" (skolem 1 mpl)
    (("" (skolem 1 pcs)
      (("" (flatten)
        (("" (skolem 1 (l1 l2))
          (("" (flatten)
            (("" (expand member)
              (("" (expand pls)
                (("" (case "member(l1,pcs)")
                  (("1" (expand member)
                    (("1" (skolem -4 pc)
                      (("1" (flatten)
                        (("1" (expand replace -4)
                          (("1" (skolem -4 pc2)
                            (("1" (flatten)
                              (("1"
                                (expand replace)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (assert)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma replacePLnotInMPL)
                    (("2" (instantiate -1 (l1 l2 pcs))
                      (("2" (assert)
                        (("2" (expand member)
                          (("2" (expand pls)
                            (("2" (assert)
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 339287 130 t shostak))
 (plMemberPCS 0
  (plMemberPCS-1 nil 3580512660 3580516242
   ("" (skolem 1 mpl)
    (("" (skolem 1 pcs)
      (("" (flatten)
        (("" (skolem 1 (pl1 pl2))
          (("" (flatten)
            (("" (lemma plPCS)
              (("" (instantiate -1 (mpl pcs))
                (("" (assert)
                  (("" (instantiate -1 pl1)
                    (("" (assert)
                      (("" (skolem -1 (pc1 S))
                        (("" (instantiate 2 (pc1 "_" S))
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (assert)
                                ((""
                                  (instantiate
                                   3
                                   " (# pl:=pl2, conf:=choose({c | member(c,{|F(pl2)|}) AND |-(([| K(pl(pc1)) |] (A(pl(pc1))))(conf(pc1)), ([| K(pl2) |] (A(pl2)))(c)) }) #)")
                                  (("1"
                                    (expand* member)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand*
                                           pls
                                           union
                                           singleton
                                           member)
                                          (("1"
                                            (skolem -6 pc)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 2 pc)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3"
                                        (decompose-equality 3)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (expand union +)
                                            (("1"
                                              (expand singleton +)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (expand replace)
                                                    (("1"
                                                      (skolem -1 pc2)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           replace
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             member)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -3
                                                           4)
                                                          (("2"
                                                            (case
                                                             "x!1=pc2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               pls)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -7)
                                                                (("2"
                                                                  (expand*
                                                                   union
                                                                   singleton
                                                                   member)
                                                                  (("2"
                                                                    (skolem
                                                                     -7
                                                                     pc)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (instantiate
                                                                         4
                                                                         pc)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "pl(pc2)=pl2")
                                                                            (("1"
                                                                              (instantiate
                                                                               5
                                                                               pc2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "pl(pc2)=pl1")
                                                                                (("1"
                                                                                  (expand
                                                                                   replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       member)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           -1
                                                                                           RL)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   replace
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand replace 1)
                                                    (("2"
                                                      (instantiate
                                                       1
                                                       pc1)
                                                      (("2"
                                                        (expand
                                                         replace
                                                         1)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand replace 1)
                                                    (("3"
                                                      (instantiate
                                                       1
                                                       x!1)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           replacePLnotInMPL)
                                                          (("3"
                                                            (instantiate
                                                             -1
                                                             (pl1
                                                              pl2
                                                              S))
                                                            (("3"
                                                              (expand
                                                               member)
                                                              (("3"
                                                                (expand
                                                                 replace
                                                                 1)
                                                                (("3"
                                                                  (case
                                                                   "pl(x!1)=pl1")
                                                                  (("1"
                                                                    (expand
                                                                     pls)
                                                                    (("1"
                                                                      (instantiate
                                                                       2
                                                                       x!1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand*
                                           nonempty?
                                           empty?
                                           member)
                                          (("2"
                                            (expand pls)
                                            (("2"
                                              (expand plRefinement)
                                              (("2"
                                                (instantiate
                                                 -5
                                                 "conf(pc1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skolem -5 c2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (instantiate
                                                         -1
                                                         c2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma replace_TCC2)
                                    (("2"
                                      (instantiate -1 (pl1 pl2 pc1))
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand* nonempty? empty? member)
                                    (("3"
                                      (expand plRefinement)
                                      (("3"
                                        (instantiate -5 "conf(pc1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (skolem -5 c2)
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (instantiate -1 c2)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 264753 340 t shostak))
 (replacePLinMPL 0
  (replacePLinMPL-1 nil 3580509280 3580513268
   ("" (skolem 1 mpl)
    (("" (skolem 1 pcs)
      (("" (flatten)
        (("" (skolem 1 (l1 l2))
          (("" (flatten)
            (("" (expand member)
              (("" (lemma plMemberPCS)
                (("" (instantiate -1 (mpl pcs))
                  (("" (assert)
                    (("" (instantiate -1 (l1 l2))
                      (("" (assert)
                        (("" (bddsimp)
                          (("1" (skolem -1 (pc1 pc2 S))
                            (("1" (flatten)
                              (("1"
                                (replace -3 2)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (lemma prodRef)
                                    (("1"
                                      (instantiate -1 (pc1 pc2 S))
                                      (("1"
                                        (lemma productUnion)
                                        (("1"
                                          (copy -1)
                                          (("1"
                                            (instantiate -1 (pc1 S))
                                            (("1"
                                              (instantiate -2 (pc2 S))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred mpl)
                                                  (("1"
                                                    (expand wfMPL)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       pcs)
                                                      (("1"
                                                        (expand
                                                         confs
                                                         -8)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand member)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (confs const-decl "finite_sets[set[PC]].finite_set" SPLrefinement
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (productUnion formula-decl nil SPLrefinement nil)
    (prodRef formula-decl nil SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Constraint type-decl nil SPLrefinement nil)
    (plMemberPCS formula-decl nil SPLrefinement nil))
   123372 80 t shostak))
 (mplRefPL 0
  (mplRefPL-1 nil 3580329650 3580331596
   ("" (skolem 1 (mpl pl1 pl2))
    (("" (flatten)
      (("" (skolem 1 pcs1)
        (("" (flatten)
          (("" (lemma plPCS)
            (("" (instantiate -1 (mpl pcs1))
              (("" (assert)
                (("" (instantiate -1 pl1)
                  (("" (assert)
                    (("" (skolem -1 (pc S))
                      (("" (flatten)
                        (("" (expand plRefinement)
                          (("" (typepred pc)
                            (("" (instantiate -4 "conf(pc)")
                              ((""
                                (assert)
                                ((""
                                  (skolem -4 c2)
                                  ((""
                                    (flatten)
                                    ((""
                                      (expand member)
                                      ((""
                                        (replace -2 2)
                                        ((""
                                          (instantiate
                                           2
                                           "union(singleton[PC]((# pl:=pl2, conf:=c2 #)),S)")
                                          (("1"
                                            (lemma prodRef)
                                            (("1"
                                              (instantiate
                                               -1
                                               (pc
                                                "(# pl := pl2, conf := c2 #)"
                                                S))
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (lemma productUnion)
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       (pc S))
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (instantiate
                                                           -2
                                                           ("(# pl := pl2, conf := c2 #)"
                                                            S))
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred mpl)
                                                  (("2"
                                                    (expand wfMPL)
                                                    (("2"
                                                      (instantiate
                                                       -1
                                                       pcs1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           productUnion)
                                                          (("2"
                                                            (instantiate
                                                             -1
                                                             (pc S))
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 1
                                                                 RL)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand product 1)
                                                  (("3"
                                                    (expand singleton)
                                                    (("3"
                                                      (expand prod)
                                                      (("3"
                                                        (case
                                                         "([||](K(pl1))(A(pl1))(conf(pc)))={p: Asset |
           EXISTS (pc_1: PC):
             pc_1 = pc AND [||](K(pl(pc_1)))(A(pl(pc_1)))(conf(pc_1))(p)} AND ([||](K(pl2))(A(pl2))(c2))={p: Asset |
            EXISTS (pc):
              pc = (# pl := pl2, conf := c2 #) AND
               [||](K(pl(pc)))(A(pl(pc)))(conf(pc))(p)}")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (bddsimp)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (instantiate
                                                                 1
                                                                 "(# pl := pl2, conf := c2 #)")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skolem
                                                                 -1
                                                                 lala)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (instantiate
                                                                 1
                                                                 pc)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skolem
                                                                 -1
                                                                 p)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -5)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((plPCS formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (prodRef formula-decl nil SPLrefinement nil)
    (productUnion formula-decl nil SPLrefinement nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AssetName type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (member const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   63155 190 t shostak))
 (mplRef 0
  (mplRef-1 nil 3580203626 3580326911
   ("" (expand* preorder? reflexive? transitive? mplRefinement)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 pcs1)
            (("1" (flatten)
              (("1" (instantiate -1 pcs1)
                (("1" (assert)
                  (("1" (skolem -1 pcs2)
                    (("1" (flatten)
                      (("1" (instantiate -3 pcs2)
                        (("1" (assert)
                          (("1" (skolem -3 pcs3)
                            (("1" (flatten)
                              (("1"
                                (instantiate 1 pcs3)
                                (("1"
                                  (use assetRefinement)
                                  (("1"
                                    (expand* preorder? transitive?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate
                                         -2
                                         ("product(pcs1)"
                                          "product(pcs2)"
                                          "product(pcs3)"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 pcs)
          (("2" (flatten)
            (("2" (instantiate 1 pcs)
              (("2" (use assetRefinement)
                (("2" (expand* preorder? reflexive?)
                  (("2" (flatten)
                    (("2" (instantiate -1 "product(pcs)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (mplRefinement const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil))
   4899 0 t shostak))
 (mplCompositionality_TCC1 0
  (mplCompositionality_TCC1-1 nil 3580505760 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (mplCompositionality 0
  (mplCompositionality-1 nil 3580505765 3580506582
   ("" (skolem 1 (pl1 pl2 S cs1 cs2 mpl))
    (("" (flatten)
      (("" (expand* constraintsRef plRefinementAlt mplRefinement)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (expand semantics -4)
              (("" (expand member)
                (("" (skolem -4 pcs1)
                  (("" (flatten)
                    (("" (replace -1 -4)
                      (("" (expand confs -4)
                        (("" (instantiate -2 pcs1)
                          (("" (assert)
                            (("" (skolem -2 pcs2)
                              ((""
                                (flatten)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -4 (pc1 pc2 pcs))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate 3 "product(pcs2)")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (instantiate
                                             -8
                                             "product(pc1)")
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (skolem -8 prodPL2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     products
                                                     -8)
                                                    (("1"
                                                      (replace -11)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand products)
                                                (("2"
                                                  (expand product 3)
                                                  (("2"
                                                    (expand singleton)
                                                    (("2"
                                                      (expand prod)
                                                      (("2"
                                                        (instantiate
                                                         3
                                                         "conf(pc1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (decompose-equality
                                                             3)
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (instantiate
                                                                 1
                                                                 pc1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand semantics 3)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (expand confs 3)
                                                (("2"
                                                  (instantiate 3 pcs2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (instantiate 2 p1)
                                    (("2"
                                      (expand semantics 2)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (use assetRefinement)
                                            (("1"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (instantiate -1 p1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (instantiate 2 pcs1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand confs 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 282005 390 t shostak))
 (compMPL_TCC1 0
  (compMPL_TCC1-1 nil 3580508092 3580508131
   ("" (lemma plRefEq)
    (("" (skosimp)
      (("" (instantiate -1 (pl1!1 pl2!1))
        (("" (assert) (("" (skosimp) (("" (skosimp) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRefEq formula-decl nil SPLrefinement nil))
   27413 20 t nil))
 (compMPL_TCC2 0
  (compMPL_TCC2-1 nil 3580508092 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (compMPL 0
  (compMPL-1 nil 3580508145 3580509584
   ("" (skolem 1 (l1 l2 S cs1 cs2 mpl))
    (("" (flatten)
      (("" (expand mplRefinement)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (expand semantics -4)
              (("" (expand semantics)
                (("" (expand member)
                  (("" (skolem -4 pcs1)
                    (("" (flatten)
                      (("" (instantiate -3 pcs1)
                        (("" (assert)
                          (("" (expand confs (-4 1))
                            (("" (assert)
                              ((""
                                (skolem -3 pcs2)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate 1 "product(pcs2)")
                                    ((""
                                      (bddsimp)
                                      (("1"
                                        (case "member(l1,pcs1)")
                                        (("1"
                                          (lemma replacePLinMPL)
                                          (("1"
                                            (instantiate -1 (mpl pcs1))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (instantiate
                                                 -1
                                                 (l1 l2))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma plRefEq)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       (l1 l2))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma replacePLnotInMPL)
                                          (("2"
                                            (instantiate
                                             -1
                                             (l1 l2 pcs1))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma plRefEq)
                                                (("2"
                                                  (instantiate
                                                   -1
                                                   (l1 l2))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       assetRefinement)
                                                      (("2"
                                                        (expand*
                                                         preorder?
                                                         reflexive?)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (instantiate
                                                             -1
                                                             p1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (instantiate 1 pcs2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mplRefinement const-decl "bool" SPLrefinement nil)
    (confs const-decl "finite_sets[set[PC]].finite_set" SPLrefinement
     nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" SPLrefinement nil)
    (plRefEq formula-decl nil SPLrefinement nil)
    (Constraint type-decl nil SPLrefinement nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (replacePLinMPL formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (replacePLnotInMPL formula-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PC type-eq-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (semantics const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil))
   37645 100 t shostak))
 (mplCompositional 0
  (mplCompositional-1 nil 3580220697 3580475876
   ("" (skolem 1 (pl1 pl2 mpl))
    (("" (flatten)
      (("" (expand mplRefinement)
        (("" (skolem 2 pcs1)
          (("" (flatten)
            (("" (case "member(pl1,pcs1)")
              (("1" (lemma mplRefPL)
                (("1" (instantiate -1 (mpl pl1 pl2))
                  (("1" (assert)
                    (("1" (instantiate -1 pcs1)
                      (("1" (assert)
                        (("1" (skolem -1 pcs2)
                          (("1" (flatten)
                            (("1" (instantiate 2 pcs2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma confsPLreplace)
                (("2" (instantiate -1 (mpl pl1 pl2))
                  (("2" (assert)
                    (("2" (instantiate -1 pcs1)
                      (("2" (assert)
                        (("2" (instantiate 3 pcs1)
                          (("2" (use assetRefinement)
                            (("2" (expand* preorder? reflexive?)
                              (("2"
                                (flatten)
                                (("2"
                                  (instantiate -1 "product(pcs1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((mplRefinement const-decl "bool" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (product const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (mplRefPL formula-decl nil SPLrefinement nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (wfMPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLrefinement nil)
    (PC type-eq-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" SPLrefinement nil))
   75947 70 t shostak))
 (weakFMcompositionality 0
  (weakFMcompositionality-3 nil 3498493637 3499097837
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand plRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   92 20 t nil)
  (weakFMcompositionality-2 nil 3498242341 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand splRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   36 20 t nil)
  (weakFMcompositionality-1 nil 3496055293 3496154047
   ("" (skolem 1 (pl F))
    (("" (expand "|=")
      (("" (expand splRefinement)
        (("" (flatten)
          (("" (skolem 1 c1)
            (("" (flatten)
              (("" (instantiate 1 c1)
                (("" (instantiate -1 c1)
                  (("" (assert)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1
                               "([||](K(pl))(A(pl))(c1))")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil))
   20 20 t shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3493396281 3580336407
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   32 20 nil nil))
 (fmEquivalenceCompositionality 0
  (fmEquivalenceCompositionality-3 nil 3498493705 3499097838
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs plRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   45 30 t nil)
  (fmEquivalenceCompositionality-2 nil 3488033545 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs splRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   35 10 t nil)
  (fmEquivalenceCompositionality-1 nil 3484508353 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentFMs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -3 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -1 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   42 20 t shostak))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3493396281 3580336407
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   44 30 nil nil))
 (ckEquivalenceCompositionality 0
  (ckEquivalenceCompositionality-4 nil 3498493784 3499097838
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs plRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   43 20 t nil)
  (ckEquivalenceCompositionality-3 nil 3498311205 3498493765
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-2 nil 3488033595 3496154047
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfSPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-1 nil 3484508370 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentCKs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -1 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -3 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   16 10 t shostak))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3579886394 3580336407
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (Conf type-decl nil SPLrefinement nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   44 30 nil nil))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3493396281 3580336407
   ("" (skolem 1 (pl am A))
    (("" (flatten)
      (("" (skolem 1 pl2)
        (("" (flatten)
          (("" (lemma amRef)
            (("" (instantiate -1 (A am))
              (("" (assert)
                (("" (typepred pl)
                  (("" (expand wfPL)
                    (("" (replace -5)
                      (("" (assert)
                        (("" (skolem 1 c)
                          (("" (flatten)
                            (("" (instantiate -2 ("K(pl)" c))
                              ((""
                                (instantiate -1 c)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil))
   38 20 t nil))
 (amRefinementCompositionality 0
  (amRefinementCompositionality-3 nil 3498493721 3499097838
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* plRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   74 40 t nil)
  (amRefinementCompositionality-2 nil 3498311229 3498493433
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* splRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   44 20 t nil)
  (amRefinementCompositionality-1 nil 3484508386 3496154047
   ("" (skolem 1 (pl A))
    (("" (flatten)
      (("" (expand* splRefinement wfSPL)
        (("" (lemma amRef)
          (("" (instantiate -1 ("A(pl)" A))
            (("" (assert)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (instantiate -1 ("K(pl)" c))
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (typepred pl)
                          (("1" (expand wfSPL)
                            (("1" (instantiate -1 c)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 c)
                  (("2" (flatten)
                    (("2" (instantiate 1 c)
                      (("2" (assert)
                        (("2" (instantiate -1 ("K(pl)" c))
                          (("2" (bddsimp -1)
                            (("1" (propax) nil nil)
                             ("2" (typepred pl)
                              (("2"
                                (expand wfSPL)
                                (("2"
                                  (instantiate -1 c)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   50 20 t shostak))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3493396281 3580336407
   ("" (skolem 1 (pl fm am ck F))
    (("" (flatten)
      (("" (skolem 1 K)
        (("" (flatten)
          (("" (skolem 1 A)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (typepred pl)
                    (("" (expand wfPL)
                      (("" (replace -8)
                        (("" (assert)
                          (("" (expand* equivalentFMs equivalentCKs)
                            (("" (lemma amRef)
                              ((""
                                (instantiate -1 (A am))
                                ((""
                                  (assert)
                                  ((""
                                    (skolem 1 c)
                                    ((""
                                      (flatten)
                                      ((""
                                        (instantiate -2 c)
                                        ((""
                                          (instantiate -1 (K c))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((amRef formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   28 20 t nil))
 (fullCompositionality 0
  (fullCompositionality-6 nil 3498493744 3499097838
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRef)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   166 60 t nil)
  (fullCompositionality-5 nil 3498311958 3498493433
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   87 40 t nil)
  (fullCompositionality-4 nil 3488035773 3498311948
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand extend)
                                                    ((""
                                                      (instantiate
                                                       -3
                                                       (pl
                                                        "(# F := fm, A := A(pl), K := ck #)"
                                                        "(# F := fm, A := am, K := ck #)"))
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   4450 100 t nil)
  (fullCompositionality-3 nil 3488035651 3488035738
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 85496 190 t nil)
  (fullCompositionality-2 nil 3488035274 3488035629
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                    "((([||](K(pl1)))(A(pl1)))(c2))"
                                                                    "((([||](K(pl1)))(A(pl2)))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                        "((([||](K(pl2)))(A(pl1)))(c3))"
                                                                        "((([||](K(pl2)))(A(pl2)))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 88620 260 t nil)
  (fullCompositionality-1 nil 3484508425 3488035102
   ("" (skolem 1 (pl1 pl2))
    (("" (lemma fmEquivalenceCompositionality)
      (("" (lemma ckEquivalenceCompositionality)
        (("" (lemma amRefinementCompositionality)
          ((""
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("map(A(pl1), [||](K(pl1))(c))"
                                                                    "map(A(pl1), [||](K(pl1))(c2))"
                                                                    "map(A(pl1), [||](K(pl2))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("map(A(pl1), [||](K(pl1))(c))"
                                                                        "map(A(pl1), [||](K(pl2))(c3))"
                                                                        "map(A(pl2), [||](K(pl2))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   18369 220 t shostak))
 (weakFullCompositionality 0
  (weakFullCompositionality-2 nil 3498493759 3499098501
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := am, K := ck #)"
                                  fm))
                                ((""
                                  (assert)
                                  ((""
                                    (use plRef)
                                    ((""
                                      (expand preorder?)
                                      ((""
                                        (expand transitive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (copy -2)
                                            ((""
                                              (instantiate
                                               -1
                                               (pl
                                                "(# F := F(pl), A := A(pl), K := ck #)"
                                                "(# F := F(pl), A := am, K := ck #)"))
                                              ((""
                                                (assert)
                                                ((""
                                                  (instantiate
                                                   -3
                                                   (pl
                                                    "(# F := F(pl), A := am, K := ck #)"
                                                    "(# F := fm, A := am, K := ck #)"))
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRef formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   99616 110 t nil)
  (weakFullCompositionality-1 nil 3498242388 3498493434
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (assert)
            (("" (instantiate -1 (pl ck))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    (("" (assert)
                      ((""
                        (instantiate -1
                         ("(# F := F(pl), A := A(pl), K := ck #)" am))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma weakFMcompositionality)
                              ((""
                                (assert)
                                ((""
                                  (instantiate
                                   -1
                                   ("(# F := F(pl), A := am, K := ck #)"
                                    fm))
                                  ((""
                                    (assert)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (expand transitive?)
                                          ((""
                                            (flatten)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := F(pl), A := A(pl), K := ck #)"
                                                  "(# F := F(pl), A := am, K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := F(pl), A := am, K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil))
   64 40 t shostak))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3579886394 3580336408
   ("" (subtype-tcc) nil nil) unfinished nil 826 760 nil nil)))

