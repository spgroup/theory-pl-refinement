(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3498492438 3499097837 ("" (grind) nil nil) unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   162 40 t shostak))
 (refFM 0
  (refFM-1 nil 3498492442 3499097837 ("" (grind) nil nil) unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   217 60 t shostak))
 (amRefCompositional 0
  (amRefCompositional-1 nil 3506978924 3506979190
   ("" (skolem 1 (A1 A2))
    (("" (expand "|>")
      (("" (flatten)
        ((""
          (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
          (("1" (bddsimp)
            (("1" (skolem 1 ans)
              (("1" (flatten)
                (("1"
                  (case "EXISTS(an:AssetName): ans(an) and dom(A1)(an)")
                  (("1" (skolem -1 an)
                    (("1" (flatten)
                      (("1"
                        (lemma sets_lemmas[AssetName].nonempty_member)
                        (("1" (expand member)
                          (("1" (instantiate -1 ans)
                            (("1" (expand nonempty?)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   set_aux_lemmas[AssetName].setMember)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (instantiate -1 (ans an))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 ans2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (instantiate -5 ans2)
                                              (("2"
                                                (lemma
                                                 set_aux_lemmas[AssetName].cardUnion)
                                                (("2"
                                                  (expand member)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (an ans2))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem 3 a)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (instantiate
                                                             -9
                                                             an)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "maps[AssetName,Asset].mapAM")
                                                                (("2"
                                                                  (instantiate
                                                                   -1
                                                                   (A1
                                                                    an
                                                                    ans2))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem
                                                                       -10
                                                                       (a1
                                                                        a2))
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           ax)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               A1)
                                                                              (("2"
                                                                                (expand
                                                                                 unique
                                                                                 -2)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   -2
                                                                                   (an
                                                                                    a1
                                                                                    ax))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -4
                                                                                       RL)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 266912 530 t shostak))
 (eqCK 0
  (eqCK-1 nil 3498492449 3499097837 ("" (grind) nil nil) unfinished
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   101 30 t shostak))
 (plRef 0
  (plRef-1 nil 3498493452 3499097837
   ("" (expand preorder?)
    (("" (expand reflexive?)
      (("" (expand transitive?)
        (("" (expand plRefinement)
          (("" (bddsimp)
            (("1" (use assetRefinement)
              (("1" (expand preorder?)
                (("1" (expand transitive?)
                  (("1" (flatten)
                    (("1" (copy -2)
                      (("1" (skolem 1 (x y z))
                        (("1" (flatten)
                          (("1" (skolem 1 c1)
                            (("1" (flatten)
                              (("1"
                                (instantiate -4 c1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -4 c2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (instantiate -6 c2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skolem -6 c3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate 1 c3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     ("([||](K(x))(A(x))(c1))"
                                                      "([||](K(y))(A(y))(c2))"
                                                      "([||](K(z))(A(z))(c3))"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 x)
              (("2" (skolem 1 c)
                (("2" (flatten)
                  (("2" (instantiate 1 c)
                    (("2" (assert)
                      (("2" (use assetRefinement)
                        (("2" (expand preorder?)
                          (("2" (expand reflexive?)
                            (("2" (flatten)
                              (("2"
                                (instantiate
                                 -1
                                 "([||](K(x))(A(x))(c))")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   98 50 t shostak))
 (popCompositional 0
  (popCompositional-1 nil 3579892226 3579892322
   ("" (skolem 1 (pl1 pl2 pop))
    (("" (expand popRefinement)
      (("" (flatten)
        (("" (skolem 1 p1)
          (("" (flatten)
            (("" (expand* products union singleton member)
              (("" (skolem -2 spl1)
                (("" (flatten)
                  (("" (expand products) (("" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 96633 40 t shostak))
 (cps_TCC1 0
  (cps_TCC1-1 nil 3579886394 nil ("" (subtype-tcc) nil nil) unfinished
   nil nil nil nil nil))
 (testeConfs 0
  (testeConfs-1 nil 3579948929 3579949268
   ("" (skolem 1 (mpl pl1 pl2 fm1 fm2 c1 c2))
    (("" (flatten)
      (("" (expand extend)
        (("" (expand confs)
          (("" (decompose-equality 1)
            (("" (bddsimp)
              (("1" (expand member)
                (("1" (expand* add union singleton member)
                  (("1" (flatten)
                    (("1" (expand emptyset)
                      (("1" (replace -2)
                        (("1" (assert)
                          (("1" (skolem -1 pl)
                            (("1" (bddsimp)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (expand confs)
                                    (("1"
                                      (expand member)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (replace -6)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand confs)
                                    (("2"
                                      (replace -5)
                                      (("2"
                                        (replace -7)
                                        (("2"
                                          (expand member)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand member)
                (("2" (replace -2)
                  (("2" (expand* union singleton member)
                    (("2" (skolem -1 pl)
                      (("2" (bddsimp)
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (expand confs)
                              (("1"
                                (expand member)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (replace -6)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (replace -2)
                            (("2" (expand confs)
                              (("2"
                                (replace -5)
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (expand member)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand member)
                (("3" (replace -3)
                  (("3" (expand union +)
                    (("3" (expand singleton +)
                      (("3" (expand member)
                        (("3"
                          (expand* add union singleton emptyset member)
                          (("3" (expand confs)
                            (("3" (expand member)
                              (("3"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 pl2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -5)
                                      (("1"
                                        (replace -7)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (instantiate 1 pl1)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (replace -6)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((confs const-decl "set[set[Conf]]" SPLrefinement nil)
    (union const-decl "set" sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MPL type-eq-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Constraints nonempty-type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (extend const-decl "R" extend nil))
   338599 220 t shostak))
 (testeConfs2 0
  (testeConfs2-1 nil 3579949934 3579950120
   ("" (skolem 1 (mpl pl1 pl2 fm1 fm2 c1 c2 c3))
    (("" (flatten)
      (("" (expand add +)
        (("" (expand member)
          (("" (expand emptyset)
            (("" (replace -4)
              (("" (replace -5)
                (("" (expand* union singleton member)
                  (("" (expand confs)
                    (("" (expand member)
                      (("" (replace -1)
                        (("" (assert)
                          (("" (decompose-equality 1)
                            (("" (bddsimp)
                              (("1"
                                (skolem -1 pl)
                                (("1"
                                  (expand confs)
                                  (("1"
                                    (expand member)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (replace -6)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (replace -7)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (instantiate 1 pl2)
                                (("2"
                                  (expand confs)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (replace -6)
                                      (("2"
                                        (expand member)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (instantiate 1 pl1)
                                (("3"
                                  (replace -1 1 RL)
                                  (("3"
                                    (expand* confs member)
                                    (("3"
                                      (replace -3)
                                      (("3"
                                        (replace -5)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conf type-decl nil SPLrefinement nil)
    (confs const-decl "set[Conf]" SPLrefinement nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (confs const-decl "set[set[Conf]]" SPLrefinement nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   186832 130 t shostak))
 (combinations_TCC1 0
  (combinations_TCC1-1 nil 3579886394 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (filter_TCC1 0
  (filter_TCC1-1 nil 3579886394 3579947773
   ("" (skolem 1 (cs c))
    (("" (typepred cs)
      (("" (expand member)
        (("" (case "empty?(cs)")
          (("1" (lemma "sets_lemmas[set[CP]].emptyset_is_empty?")
            (("1" (instantiate -1 cs)
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (lemma "sets_lemmas[set[CP]].empty_no_members")
                    (("1" (expand member)
                      (("1" (expand emptyset 1)
                        (("1" (expand emptyset -2)
                          (("1" (replace -2 1 RL)
                            (("1"
                              (lemma
                               "finite_sets[set[CP]].finite_emptyset")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 286567 90 t nil))
 (product_TCC1 0
  (product_TCC1-1 nil 3579886394 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (products_TCC1 0
  (products_TCC1-1 nil 3579944930 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (mplRef 0
  (mplRef-1 nil 3579886400 3579886512
   ("" (expand* preorder? mplRefinement transitive? reflexive?)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (skolem 1 p1)
            (("1" (flatten)
              (("1" (instantiate -1 p1)
                (("1" (assert)
                  (("1" (skolem -1 p2)
                    (("1" (flatten)
                      (("1" (instantiate -3 p2)
                        (("1" (assert)
                          (("1" (skolem -3 p3)
                            (("1" (instantiate 1 p3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use assetRefinement)
                                    (("1"
                                      (expand* preorder? transitive?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (instantiate -2 (p1 p2 p3))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 x)
        (("2" (skolem 1 p)
          (("2" (flatten)
            (("2" (instantiate 1 p)
              (("2" (assert)
                (("2" (use assetRefinement)
                  (("2" (expand* preorder? reflexive?)
                    (("2" (flatten)
                      (("2" (instantiate -1 p) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mplRefinement const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil))
   60014 60 t shostak))
 (mplCompositional 0
  (mplCompositional-2 "" 3579893579 3579893579
   ("" (skolem 1 (pl1 pl2 mpl)) (("" (postpone) nil nil)) nil)
   unfinished nil 10530 0 t shostak)
  (mplCompositional-1 nil 3579892326 3579892810
   ("" (expand plRefinementAlt)
    (("" (expand mplRefinement)
      (("" (skolem 1 (pl1 pl2 mpl))
        (("" (flatten)
          (("" (skolem 1 p1)
            (("" (flatten)
              (("" (expand semantics)
                (("" (expand products)
                  (("" (expand member)
                    (("" (expand add)
                      (("" (assert)
                        (("" (expand add)
                          (("" (expand member)
                            (("" (skolem -2 cs)
                              ((""
                                (flatten)
                                ((""
                                  (expand filter)
                                  ((""
                                    (expand product)
                                    ((""
                                      (expand member)
                                      ((""
                                        (expand cps)
                                        ((""
                                          (expand member)
                                          ((""
                                            (flatten)
                                            ((""
                                              (skolem -2 pl)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (bddsimp)
                                                  (("1"
                                                    (instantiate -1 p1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           p2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (instantiate
                                                               1
                                                               p2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -4
                                                                   RL)
                                                                  (("1"
                                                                    (instantiate
                                                                     1
                                                                     "cps(pl2)")
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -4)
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (instantiate 1 p1)
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (use
                                                         assetRefinement)
                                                        (("1"
                                                          (expand*
                                                           preorder?
                                                           reflexive?)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (instantiate
                                                               -1
                                                               p1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (instantiate
                                                         1
                                                         cs)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (instantiate
                                                             1
                                                             pl)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 160215 140 t shostak))
 (weakFMcompositionality 0
  (weakFMcompositionality-3 nil 3498493637 3499097837
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand plRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   92 20 t nil)
  (weakFMcompositionality-2 nil 3498242341 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (flatten)
        (("" (expand "|=")
          (("" (expand subset?)
            (("" (expand member)
              (("" (expand splRefinement)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (instantiate 1 c)
                        (("" (assert)
                          (("" (use assetRefinement)
                            (("" (expand preorder?)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (flatten)
                                  ((""
                                    (instantiate
                                     -1
                                     "([||](K(pl))(A(pl))(c))")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((\|= const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   36 20 t nil)
  (weakFMcompositionality-1 nil 3496055293 3496154047
   ("" (skolem 1 (pl F))
    (("" (expand "|=")
      (("" (expand splRefinement)
        (("" (flatten)
          (("" (skolem 1 c1)
            (("" (flatten)
              (("" (instantiate 1 c1)
                (("" (instantiate -1 c1)
                  (("" (assert)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1
                               "([||](K(pl))(A(pl))(c1))")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil))
   20 20 t shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3493396281 3506978410
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   572 70 nil nil))
 (fmEquivalenceCompositionality 0
  (fmEquivalenceCompositionality-3 nil 3498493705 3499097838
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs plRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   45 30 t nil)
  (fmEquivalenceCompositionality-2 nil 3488033545 3498493433
   ("" (skolem 1 (pl fm))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* equivalentFMs splRefinement wfPL)
          (("" (flatten)
            (("" (replace -2)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate 1 c)
                      (("" (use assetRefinement)
                        (("" (expand preorder?)
                          (("" (expand reflexive?)
                            (("" (flatten)
                              ((""
                                (instantiate
                                 -1
                                 "[||](K(pl))(A(pl))(c)")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Conf type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   35 10 t nil)
  (fmEquivalenceCompositionality-1 nil 3484508353 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentFMs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -3 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -1 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   42 20 t shostak))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3493396281 3506978410
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   117 30 nil nil))
 (ckEquivalenceCompositionality 0
  (ckEquivalenceCompositionality-4 nil 3498493784 3499097838
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs plRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   43 20 t nil)
  (ckEquivalenceCompositionality-3 nil 3498311205 3498493765
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (Asset type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-2 nil 3488033595 3496154047
   ("" (skolem 1 (pl K))
    (("" (typepred pl)
      (("" (expand* equivalentCKs splRefinement wfSPL)
        (("" (flatten)
          (("" (replace -2)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (flatten)
                  (("" (instantiate 1 c)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            ((""
                              (instantiate -1 "[||](K(pl))(A(pl))(c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   39 20 t nil)
  (ckEquivalenceCompositionality-1 nil 3484508370 3488032885
   ("" (skolem 1 (pl1 pl2))
    (("" (flatten)
      (("" (expand equivalentCKs)
        (("" (expand splRefinement)
          (("" (skolem 1 c)
            (("" (flatten)
              (("" (replace -1 1 rl)
                (("" (replace -2 1 rl)
                  (("" (replace -3 1 rl)
                    (("" (instantiate 1 c)
                      (("" (assert)
                        (("" (use productRefinement)
                          (("" (expand preorder?)
                            (("" (expand reflexive?)
                              ((""
                                (flatten)
                                ((""
                                  (instantiate
                                   -1
                                   "map(A(pl1), [||](K(pl1))(c))")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil))
   16 10 t shostak))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3579886394 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3493396281 3506978411
   ("" (skolem 1 (pl am A))
    (("" (flatten)
      (("" (skolem 1 pl2)
        (("" (flatten)
          (("" (lemma amRef)
            (("" (instantiate -1 (A am))
              (("" (assert)
                (("" (typepred pl)
                  (("" (expand wfPL)
                    (("" (replace -5)
                      (("" (assert)
                        (("" (skolem 1 c)
                          (("" (flatten)
                            (("" (instantiate -2 ("K(pl)" c))
                              ((""
                                (instantiate -1 c)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil))
   50 30 t nil))
 (amRefinementCompositionality 0
  (amRefinementCompositionality-3 nil 3498493721 3499097838
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* plRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   74 40 t nil)
  (amRefinementCompositionality-2 nil 3498311229 3498493433
   ("" (skolem 1 (pl A))
    (("" (assert)
      (("" (typepred pl)
        (("" (expand* splRefinement wfPL)
          (("" (lemma amRef)
            (("" (instantiate -1 ("A(pl)" A))
              (("" (flatten)
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (instantiate -1 ("K(pl)" c))
                        (("1" (flatten)
                          (("1" (instantiate -2 c)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 c)
                      (("2" (flatten)
                        (("2" (instantiate -2 c)
                          (("2" (instantiate -1 ("K(pl)" c))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 c)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Conf type-decl nil SPLrefinement nil)
    (amRef formula-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   44 20 t nil)
  (amRefinementCompositionality-1 nil 3484508386 3496154047
   ("" (skolem 1 (pl A))
    (("" (flatten)
      (("" (expand* splRefinement wfSPL)
        (("" (lemma amRef)
          (("" (instantiate -1 ("A(pl)" A))
            (("" (assert)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (instantiate -1 ("K(pl)" c))
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (typepred pl)
                          (("1" (expand wfSPL)
                            (("1" (instantiate -1 c)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 c)
                  (("2" (flatten)
                    (("2" (instantiate 1 c)
                      (("2" (assert)
                        (("2" (instantiate -1 ("K(pl)" c))
                          (("2" (bddsimp -1)
                            (("1" (propax) nil nil)
                             ("2" (typepred pl)
                              (("2"
                                (expand wfSPL)
                                (("2"
                                  (instantiate -1 c)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   50 20 t shostak))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3493396281 3506978411
   ("" (skolem 1 (pl fm am ck F))
    (("" (flatten)
      (("" (skolem 1 K)
        (("" (flatten)
          (("" (skolem 1 A)
            (("" (flatten)
              (("" (skolem 1 pl2)
                (("" (flatten)
                  (("" (typepred pl)
                    (("" (expand wfPL)
                      (("" (replace -8)
                        (("" (assert)
                          (("" (expand* equivalentFMs equivalentCKs)
                            (("" (lemma amRef)
                              ((""
                                (instantiate -1 (A am))
                                ((""
                                  (assert)
                                  ((""
                                    (skolem 1 c)
                                    ((""
                                      (flatten)
                                      ((""
                                        (instantiate -2 c)
                                        ((""
                                          (instantiate -1 (K c))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((amRef formula-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset type-decl nil SPLrefinement nil)
    (AssetName type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   62 40 t nil))
 (fullCompositionality 0
  (fullCompositionality-6 nil 3498493744 3499097838
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRef)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRef formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   166 60 t nil)
  (fullCompositionality-5 nil 3498311958 3498493433
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := fm, A := A(pl), K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   87 40 t nil)
  (fullCompositionality-4 nil 3488035773 3498311948
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma fmEquivalenceCompositionality)
          (("" (instantiate -1 (pl fm))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma ckEquivalenceCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := fm, A := A(pl), K := K(pl) #)" ck))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma amRefinementCompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := fm, A := A(pl), K := ck #)"
                                  am))
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand transitive?)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := fm, A := A(pl), K := K(pl) #)"
                                                  "(# F := fm, A := A(pl), K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand extend)
                                                    ((""
                                                      (instantiate
                                                       -3
                                                       (pl
                                                        "(# F := fm, A := A(pl), K := ck #)"
                                                        "(# F := fm, A := am, K := ck #)"))
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   4450 100 t nil)
  (fullCompositionality-3 nil 3488035651 3488035738
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 85496 190 t nil)
  (fullCompositionality-2 nil 3488035274 3488035629
   (";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
    (skolem 1 (pl1 pl2))
    ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
      (lemma fmEquivalenceCompositionality)
      ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
        (lemma ckEquivalenceCompositionality)
        ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
          (lemma amRefinementCompositionality)
          ((";;; Proof fullCompositionality-1 for formula SPLrefinement.fullCompositionality"
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                    "((([||](K(pl1)))(A(pl1)))(c2))"
                                                                    "((([||](K(pl1)))(A(pl2)))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("((([||](K(pl1)))(A(pl1)))(c))"
                                                                        "((([||](K(pl2)))(A(pl1)))(c3))"
                                                                        "((([||](K(pl2)))(A(pl2)))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1)
                            (("2" (propax) nil)))))))))))))))
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1)
                        (("3" (propax) nil)))))))))))))
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1)
                      (("2" (propax) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 88620 260 t nil)
  (fullCompositionality-1 nil 3484508425 3488035102
   ("" (skolem 1 (pl1 pl2))
    (("" (lemma fmEquivalenceCompositionality)
      (("" (lemma ckEquivalenceCompositionality)
        (("" (lemma amRefinementCompositionality)
          ((""
            (instantiate -3
             (pl1 "(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"))
            (("1"
              (instantiate -2
               ("(# F:=F(pl2), A:=A(pl1), K:=K(pl1) #)"
                "(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)"))
              (("1"
                (instantiate -1
                 ("(# F:=F(pl2), A:=A(pl1), K:=K(pl2) #)" pl2))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand splRefinement)
                      (("1" (skolem 1 c)
                        (("1" (flatten)
                          (("1" (instantiate -3 c)
                            (("1" (assert)
                              (("1"
                                (skolem -3 c2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -2 c2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -2 c3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate -1 c3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 c4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (instantiate 1 c4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         productRefinement)
                                                        (("1"
                                                          (use
                                                           productRefinement)
                                                          (("1"
                                                            (expand
                                                             preorder?)
                                                            (("1"
                                                              (expand
                                                               transitive?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   -2
                                                                   ("map(A(pl1), [||](K(pl1))(c))"
                                                                    "map(A(pl1), [||](K(pl1))(c2))"
                                                                    "map(A(pl1), [||](K(pl2))(c3))"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (instantiate
                                                                       -4
                                                                       ("map(A(pl1), [||](K(pl1))(c))"
                                                                        "map(A(pl1), [||](K(pl2))(c3))"
                                                                        "map(A(pl2), [||](K(pl2))(c4))"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand equivalentFMs)
                    (("2" (expand equivalentCKs)
                      (("2" (assert)
                        (("2" (replace -3 1 rl)
                          (("2" (replace -4 1 rl)
                            (("2" (typepred pl1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand equivalentFMs)
                  (("2" (expand equivalentCKs)
                    (("2" (assert)
                      (("2" (replace -3 1 rl)
                        (("2" (replace -4 1 rl)
                          (("2" (typepred pl1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand equivalentFMs)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (replace -3 1 rl)
                      (("3" (typepred pl1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand equivalentFMs)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -3 1 rl)
                    (("2" (typepred pl1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((fmEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (ckEquivalenceCompositionality formula-decl nil SPLrefinement nil))
   18369 220 t shostak))
 (weakFullCompositionality 0
  (weakFullCompositionality-2 nil 3498493759 3499098501
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (instantiate -1 (pl ck))
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    ((""
                      (instantiate -1
                       ("(# F := F(pl), A := A(pl), K := ck #)" am))
                      (("" (assert)
                        (("" (flatten)
                          (("" (lemma weakFMcompositionality)
                            (("" (assert)
                              ((""
                                (instantiate
                                 -1
                                 ("(# F := F(pl), A := am, K := ck #)"
                                  fm))
                                ((""
                                  (assert)
                                  ((""
                                    (use plRef)
                                    ((""
                                      (expand preorder?)
                                      ((""
                                        (expand transitive?)
                                        ((""
                                          (flatten)
                                          ((""
                                            (copy -2)
                                            ((""
                                              (instantiate
                                               -1
                                               (pl
                                                "(# F := F(pl), A := A(pl), K := ck #)"
                                                "(# F := F(pl), A := am, K := ck #)"))
                                              ((""
                                                (assert)
                                                ((""
                                                  (instantiate
                                                   -3
                                                   (pl
                                                    "(# F := F(pl), A := am, K := ck #)"
                                                    "(# F := fm, A := am, K := ck #)"))
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (plRef formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil))
   99616 110 t nil)
  (weakFullCompositionality-1 nil 3498242388 3498493434
   ("" (skolem 1 (pl fm am ck))
    (("" (assert)
      (("" (flatten)
        (("" (lemma ckEquivalenceCompositionality)
          (("" (assert)
            (("" (instantiate -1 (pl ck))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma amRefinementCompositionality)
                    (("" (assert)
                      ((""
                        (instantiate -1
                         ("(# F := F(pl), A := A(pl), K := ck #)" am))
                        (("" (assert)
                          (("" (flatten)
                            (("" (lemma weakFMcompositionality)
                              ((""
                                (assert)
                                ((""
                                  (instantiate
                                   -1
                                   ("(# F := F(pl), A := am, K := ck #)"
                                    fm))
                                  ((""
                                    (assert)
                                    ((""
                                      (use plRefinement)
                                      ((""
                                        (expand preorder?)
                                        ((""
                                          (expand transitive?)
                                          ((""
                                            (flatten)
                                            ((""
                                              (copy -2)
                                              ((""
                                                (instantiate
                                                 -1
                                                 (pl
                                                  "(# F := F(pl), A := A(pl), K := ck #)"
                                                  "(# F := F(pl), A := am, K := ck #)"))
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (instantiate
                                                     -3
                                                     (pl
                                                      "(# F := F(pl), A := am, K := ck #)"
                                                      "(# F := fm, A := am, K := ck #)"))
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ckEquivalenceCompositionality formula-decl nil SPLrefinement nil)
    (weakFMcompositionality formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (amRefinementCompositionality formula-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil))
   64 40 t shostak))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3579886394 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil)))

