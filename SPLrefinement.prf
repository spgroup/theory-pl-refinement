(SPLrefinement
 (eqFM 0
  (eqFM-1 nil 3592752661 ("" (grind) nil nil)
   ((equivalentFMs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (refFM 0
  (refFM-1 nil 3592752709 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   shostak))
 (eqCK 0
  (eqCK-1 nil 3661768885 ("" (grind) nil nil)
   ((equivalentCKs const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (weakerEqReflexive 0
  (weakerEqReflexive-1 nil 3661768915 ("" (grind) nil nil)
   ((weakerEqCK const-decl "bool" SPLrefinement nil)) shostak))
 (weakerEqSymmetric 0
  (weakerEqSymmetric-1 nil 3661768925 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   shostak))
 (weakerEqTransitive 0
  (weakerEqTransitive-1 nil 3661768931 ("" (grind) nil nil)
   ((Conf formal-type-decl nil SPLrefinement nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil))
   shostak))
 (plRef 0
  (plRef-1 nil 3655053684
   ("" (expand* preorder? plRefinement)
    (("" (bddsimp)
      (("1" (expand transitive?)
        (("1" (skolem 1 (x y z))
          (("1" (flatten)
            (("1" (skolem 1 c1)
              (("1" (flatten)
                (("1" (instantiate -1 c1)
                  (("1" (assert)
                    (("1" (skolem -1 c2)
                      (("1" (flatten)
                        (("1" (instantiate -3 c2)
                          (("1" (assert)
                            (("1" (skolem -3 c3)
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate 1 c3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma assetRefinement)
                                      (("1"
                                        (expand* preorder? transitive?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate
                                             -2
                                             ("([||](K(x))(A(x))(c1))"
                                              "([||](K(y))(A(y))(c2))"
                                              "([||](K(z))(A(z))(c3))"))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand reflexive?)
        (("2" (skolem 1 x)
          (("2" (skolem 1 c)
            (("2" (flatten)
              (("2" (typepred x)
                (("2" (expand wfPL)
                  (("2" (instantiate -1 c)
                    (("2" (assert)
                      (("2" (instantiate 1 c)
                        (("2" (assert)
                          (("2" (lemma assetRefinement)
                            (("2" (expand* preorder? reflexive?)
                              (("2"
                                (flatten)
                                (("2"
                                  (instantiate
                                   -1
                                   "([||](K(x))(A(x))(c))")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assetRefinement formula-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (plRefAlt 0
  (plRefAlt-1 nil 3655127891 ("" (postpone) nil nil) nil shostak))
 (plRefEq 0
  (plRefEq-1 nil 3655128751
   ("" (skolem 1 (pl1 pl2))
    (("" (bddsimp)
      (("1" (expand* plRefinement plRefinementAlt)
        (("1" (skolem 1 p1)
          (("1" (bddsimp)
            (("1" (expand products)
              (("1" (skolem -2 c1)
                (("1" (inst -1 c1)
                  (("1" (bddsimp)
                    (("1" (skolem -2 c2)
                      (("1" (bddsimp)
                        (("1" (inst 1 "([||](K(pl2))(A(pl2))(c2))")
                          (("1" (bddsimp)
                            (("1" (assert) nil nil)
                             ("2" (inst 1 c2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* plRefinementAlt plRefinement)
        (("2" (skolem 1 c1)
          (("2" (bddsimp)
            (("2" (inst -2 "([||](K(pl1))(A(pl1))(c1))")
              (("2" (bddsimp)
                (("1" (skolem -2 p2)
                  (("1" (expand products)
                    (("1" (bddsimp)
                      (("1" (skolem -2 c2)
                        (("1" (inst 1 c2)
                          (("1" (bddsimp) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand products) (("2" (inst 2 c1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((products const-decl "set[finite_sets[Asset].finite_set]"
     SPLrefinement nil)
    (Conf formal-type-decl nil SPLrefinement nil)
    (Asset formal-type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CK formal-type-decl nil SPLrefinement nil)
    (AssetName formal-type-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM formal-type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (plRefinementAlt const-decl "bool" SPLrefinement nil))
   shostak))
 (fmEquivalenceCompositionality_TCC1 0
  (fmEquivalenceCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (equivalentFMs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (ckEquivalenceCompositionality_TCC1 0
  (ckEquivalenceCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (equivalentCKs const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (weakerCKcompositionality_TCC1 0
  (weakerCKcompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (weakerEqCK const-decl "bool" SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (amRefinementCompositionality_TCC1 0
  (amRefinementCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil) nil nil))
 (fullCompositionality_TCC1 0
  (fullCompositionality_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil) nil nil))
 (fullCompositionality2_TCC1 0
  (fullCompositionality2_TCC1-1 nil 3592752552
   ("" (subtype-tcc) nil nil) nil nil)))

