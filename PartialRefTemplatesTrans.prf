(PartialRefTemplatesTrans
 (IMP_PartialRefinement_preserv_TCC1 0
  (IMP_PartialRefinement_preserv_TCC1-1 nil 3686521811
   ("" (lemma ckPreserves) (("" (propax) nil nil)) nil)
   ((ckPreserves formula-decl nil CKmultiple nil)) nil))
 (addCKLinesBeforePartialRef_Transformation_nonempty_TCC1 0
  (addCKLinesBeforePartialRef_Transformation_nonempty_TCC1-1 nil
   3684668369 ("" (mapped-axiom-tcc) nil nil) nil nil))
 (addCKLinesBeforePartialRef_TCC1 0
  (addCKLinesBeforePartialRef_TCC1-1 nil 3680614955
   ("" (skolem 1 (pl ck2 its s pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (inst -4 c)
                (("" (bddsimp)
                  (("1" (lemma addItemsBefore)
                    (("1" (inst -1 "A(pl)" "K(pl)" its s emptyset c)
                      (("1" (bddsimp)
                        (("1" (replace -6 1)
                          (("1" (expand semantics)
                            (("1" (replace -5 1)
                              (("1"
                                (replace -2 1 RL)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 exp)
                          (("2" (expand "<>")
                            (("2" (decompose-equality)
                              (("2"
                                (inst -1 c)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (inst -3 exp)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand unique)
                        (("2" (expand emptyset)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -3 -4)
                    (("2" (expand semantics) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (Transformations type-decl nil CKmultiple nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (addItemsBefore formula-decl nil CKtrans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (addCKLinesBeforePartialRef 0
  (addCKLinesBeforePartialRef-1 nil 3680614956
   ("" (lemma addItemsBefore)
    (("" (skolem 1 (pl ck2 its s))
      (("" (expand strongPartialRefinement)
        (("" (bddsimp)
          (("1" (skolem 1 c)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (inst -1 "A(pl)" "K(pl)" its s emptyset c)
                  (("1" (expand "<>")
                    (("1" (decompose-equality -2)
                      (("1" (inst -1 c)
                        (("1" (bddsimp)
                          (("1" (replace -5 -4 RL)
                            (("1" (expand semantics)
                              (("1"
                                (replace -4 1)
                                (("1"
                                  (lemma SPLrefinement.assetRefinement)
                                  (("1"
                                    (expand preorder?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand reflexive?)
                                        (("1"
                                          (inst
                                           -1
                                           "semanticsCK(ck2, A(pl), c, emptyset)")
                                          (("1"
                                            (lemma ckPreserves)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand unique)
                    (("2" (skolem 1 (l r1 r2))
                      (("2" (bddsimp)
                        (("2" (expand emptyset)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "<>")
            (("2" (decompose-equality)
              (("2" (expand subset?)
                (("2" (skolem 1 c)
                  (("2" (inst -1 c)
                    (("2" (expand member) (("2" (bddsimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Transformations type-decl nil CKmultiple nil)
    (addItemsBefore formula-decl nil CKtrans nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (\|> const-decl "bool" AssetMapping nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil) (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (addCKLinesAfterPartialRef_TCC1 0
  (addCKLinesAfterPartialRef_TCC1-1 nil 3680616616
   ("" (skolem 1 (pl ck2 its s pl2))
    (("" (bddsimp)
      (("" (expand wfPL)
        (("" (skolem 1 c)
          (("" (inst -3 c)
            (("" (expand "<>")
              (("" (decompose-equality)
                (("" (inst -1 c)
                  (("" (bddsimp)
                    (("1" (lemma addItemsAfter)
                      (("1" (inst -1 "A(pl)" "K(pl)" its s emptyset c)
                        (("1" (bddsimp)
                          (("1" (typepred pl)
                            (("1" (expand wfPL)
                              (("1"
                                (replace -7 1)
                                (("1"
                                  (expand semantics 1)
                                  (("1"
                                    (replace -6 1)
                                    (("1"
                                      (inst -1 c)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand semantics -2)
                                          (("1"
                                            (replace -5 1 RL)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* unique emptyset) nil nil))
                        nil))
                      nil)
                     ("2" (replace -2 -3)
                      (("2" (expand semantics) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((addItemsAfter formula-decl nil CKtrans nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil)
    (Transformations type-decl nil CKmultiple nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (addCKLinesAfterPartialRef 0
  (addCKLinesAfterPartialRef-1 nil 3680616618
   ("" (lemma addItemsAfter)
    (("" (skolem 1 (pl ck2 its s))
      (("" (expand strongPartialRefinement)
        (("" (bddsimp)
          (("1" (skolem 1 c)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (inst -1 "A(pl)" "K(pl)" its s emptyset c)
                  (("1" (bddsimp)
                    (("1" (replace -4 -2 RL)
                      (("1" (expand semantics)
                        (("1" (replace -2 1)
                          (("1" (lemma SPLrefinement.assetRefinement)
                            (("1" (expand preorder?)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand reflexive?)
                                  (("1"
                                    (inst
                                     -1
                                     "semanticsCK(ck2, A(pl), c, emptyset)")
                                    (("1"
                                      (lemma ckPreserves)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "<>")
                      (("2" (decompose-equality)
                        (("2" (inst -1 c)
                          (("2" (skolem 1 exp)
                            (("2" (bddsimp)
                              (("2"
                                (inst -3 "exp")
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand unique)
                    (("2" (skolem 1 (l r1 r2))
                      (("2" (expand emptyset) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "<>")
            (("2" (expand subset?)
              (("2" (skolem 1 c)
                (("2" (expand member)
                  (("2" (decompose-equality)
                    (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Transformations type-decl nil CKmultiple nil)
    (addItemsAfter formula-decl nil CKtrans nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (\|> const-decl "bool" AssetMapping nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil) (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (removeCKLinesBeforePartialRef_TCC1 0
  (removeCKLinesBeforePartialRef_TCC1-1 nil 3679996095
   ("" (skolem 1 (pl ck2 its s pl2))
    (("" (bddsimp)
      (("" (expand wfPL)
        (("" (skolem 1 c)
          (("" (inst -3 c)
            (("" (bddsimp)
              (("1" (lemma addItemsBefore)
                (("1" (inst -1 "A(pl)" ck2 its s emptyset c)
                  (("1" (bddsimp)
                    (("1" (typepred pl)
                      (("1" (expand wfPL)
                        (("1" (inst -1 c)
                          (("1" (bddsimp)
                            (("1" (replace -6 1)
                              (("1"
                                (expand semantics 1)
                                (("1"
                                  (replace -5 -1)
                                  (("1"
                                    (expand semantics -1)
                                    (("1"
                                      (replace -3 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "<>")
                              (("2"
                                (decompose-equality)
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst -1 c)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "<>")
                      (("2" (decompose-equality)
                        (("2" (inst -1 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand* unique emptyset) nil nil))
                  nil))
                nil)
               ("2" (replace -3 -4)
                (("2" (expand semantics) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (list type-decl nil list_adt nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (append def-decl "list[T]" list_props nil)
    (addItemsBefore formula-decl nil CKtrans nil)
    (Transformations type-decl nil CKmultiple nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (removeCKLinesBeforePartialRef 0
  (removeCKLinesBeforePartialRef-1 nil 3679996104
   ("" (lemma addItemsBefore)
    (("" (skolem 1 (pl ck2 its s))
      (("" (expand strongPartialRefinement)
        (("" (bddsimp)
          (("1" (skolem 1 c)
            (("1" (expand prod)
              (("1" (bddsimp)
                (("1" (inst -1 "A(pl)" ck2 its s emptyset c)
                  (("1" (bddsimp)
                    (("1" (replace -4 -2 RL)
                      (("1" (expand semantics)
                        (("1" (replace -2 1)
                          (("1" (use SPLrefinement.assetRefinement)
                            (("1" (expand preorder?)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand reflexive?)
                                  (("1"
                                    (inst
                                     -1
                                     "semanticsCK(K(pl), A(pl), c, emptyset)")
                                    (("1"
                                      (lemma ckPreserves)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 exp)
                      (("2" (expand "<>")
                        (("2" (decompose-equality)
                          (("2" (inst -1 c)
                            (("2" (bddsimp)
                              (("2"
                                (inst -3 exp)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand unique)
                    (("2" (expand emptyset) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "<>")
            (("2" (decompose-equality)
              (("2" (expand subset?)
                (("2" (skolem 1 c)
                  (("2" (inst -1 c)
                    (("2" (expand member) (("2" (bddsimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Transformations type-decl nil CKmultiple nil)
    (addItemsBefore formula-decl nil CKtrans nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (\|> const-decl "bool" AssetMapping nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil) (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil))
   shostak))
 (removeCKLinesAfterPartialRef_TCC1 0
  (removeCKLinesAfterPartialRef_TCC1-1 nil 3680617167
   ("" (skolem 1 (pl ck2 its s pl2))
    (("" (bddsimp)
      (("" (expand wfPL)
        (("" (skolem 1 c)
          (("" (inst -3 c)
            (("" (bddsimp)
              (("1" (lemma addItemsAfter)
                (("1" (inst -1 "A(pl)" ck2 its s emptyset c)
                  (("1" (bddsimp)
                    (("1" (replace -5 1)
                      (("1" (expand semantics 1)
                        (("1" (typepred pl)
                          (("1" (expand wfPL)
                            (("1" (inst -1 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (replace -5 -1)
                                  (("1"
                                    (expand semantics -1)
                                    (("1"
                                      (replace -3 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "<>")
                                  (("2"
                                    (decompose-equality -3)
                                    (("2"
                                      (inst -1 c)
                                      (("2" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "<>")
                      (("2" (decompose-equality)
                        (("2" (inst -1 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand* unique emptyset) nil nil))
                  nil))
                nil)
               ("2" (expand "<>")
                (("2" (replace -3 -4)
                  (("2" (expand semantics) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (list type-decl nil list_adt nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (addItemsAfter formula-decl nil CKtrans nil)
    (Transformations type-decl nil CKmultiple nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (removeCKLinesAfterPartialRef 0
  (removeCKLinesAfterPartialRef-1 nil 3680617169
   ("" (lemma addItemsAfter)
    (("" (skolem 1 (pl ck2 its s))
      (("" (expand "<>")
        (("" (bddsimp)
          (("" (decompose-equality)
            (("" (expand strongPartialRefinement)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1" (expand prod)
                    (("1" (bddsimp)
                      (("1" (inst -2 "A(pl)" ck2 its s emptyset c)
                        (("1" (bddsimp)
                          (("1" (replace -4 -3 RL)
                            (("1" (expand semantics)
                              (("1"
                                (replace -3 1)
                                (("1"
                                  (use SPLrefinement.assetRefinement)
                                  (("1"
                                    (expand preorder?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand reflexive?)
                                        (("1"
                                          (inst
                                           -1
                                           "semanticsCK(K(pl), A(pl), c, emptyset)")
                                          (("1"
                                            (lemma ckPreserves)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem 1 exp)
                            (("2" (inst -1 c)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (inst -3 exp)
                                  (("2" (bddsimp) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand emptyset)
                          (("2" (expand unique)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand subset?)
                  (("2" (skolem 1 c)
                    (("2" (inst -1 c)
                      (("2" (expand member)
                        (("2" (assert) (("2" (bddsimp) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Transformations type-decl nil CKmultiple nil)
    (addItemsAfter formula-decl nil CKtrans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (\|> const-decl "bool" AssetMapping nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil))
   shostak))
 (changeCKLineBeforePartialRef_TCC1 0
  (changeCKLineBeforePartialRef_TCC1-1 nil 3684494054
   ("" (skolem 1 (pl ck2 it it2 its s pl2))
    (("" (bddsimp)
      (("" (expand wfPL)
        (("" (skolem 1 c)
          (("" (bddsimp)
            (("" (inst -4 c)
              (("" (bddsimp)
                (("1" (typepred pl)
                  (("1" (expand wfPL)
                    (("1" (inst -1 c)
                      (("1" (bddsimp)
                        (("1"
                          (name "sem" "(semantics(K(pl))(A(pl))(c))")
                          (("1"
                            (name "sem2" "(semantics(ck2)(A(pl))(c))")
                            (("1" (replace -8 1)
                              (("1"
                                (expand semantics 1)
                                (("1"
                                  (expand semantics -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (replace -2 -3)
                                      (("1"
                                        (case "sem = sem2")
                                        (("1"
                                          (replace -1 1 RL)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (replace -6 -1)
                                          (("2"
                                            (replace -5 -2)
                                            (("2"
                                              (expand intersection)
                                              (("2"
                                                (expand member)
                                                (("2"
                                                  (decompose-equality
                                                   -4)
                                                  (("2"
                                                    (inst -1 c)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (expand "<>")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             semanticsCK
                                                             -4)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (expand
                                                                 getExp)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("2"
                                                                    (expand
                                                                     semantics
                                                                     -4)
                                                                    (("2"
                                                                      (expand
                                                                       semanticsCK
                                                                       -4)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             3
                                                                             RL)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               3)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma ckPreserves)
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand intersection)
                          (("2" (expand member)
                            (("2" (expand "<>")
                              (("2"
                                (decompose-equality)
                                (("2"
                                  (inst -1 c)
                                  (("2" (bddsimp) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -4 -5)
                  (("2" (expand semantics) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (Transformations type-decl nil CKmultiple nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (\|> const-decl "bool" AssetMapping nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (intersection const-decl "set" sets nil)
    (getExp const-decl "Formula_" CKtrans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (member const-decl "bool" sets nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (changeCKLineBeforePartialRef 0
  (changeCKLineBeforePartialRef-1 nil 3684494082
   ("" (skolem 1 (pl ck2 it it2 its s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1"
                (case "(semantics(K(pl))(A(pl))(c)) = (semantics(ck2)(A(pl))(c))")
                (("1" (replace -1 1)
                  (("1" (use SPLrefinement.assetRefinement)
                    (("1" (expand preorder?)
                      (("1" (flatten)
                        (("1" (expand reflexive?)
                          (("1" (inst -1 "(semantics(ck2)(A(pl))(c))")
                            (("1" (lemma ckPreserves)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (name "sem" "(semantics(K(pl))(A(pl))(c))")
                    (("2" (replace -1 1)
                      (("2" (expand semantics)
                        (("2" (expand semanticsCK)
                          (("2" (lift-if)
                            (("2" (replace -4 1)
                              (("2"
                                (replace -3 -1)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (replace -2 1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil)
                                   ("5" (grind) nil nil)
                                   ("6" (grind) nil nil)
                                   ("7" (grind) nil nil)
                                   ("8" (grind) nil nil)
                                   ("9" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma ckPreserves) (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (expand member)
              (("2" (expand intersection)
                (("2" (decompose-equality)
                  (("2" (inst -1 c)
                    (("2" (expand "<>")
                      (("2" (expand member) (("2" (bddsimp) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (list type-decl nil list_adt nil)
    (Transformations type-decl nil CKmultiple nil)
    (Formula_ type-decl nil Formula__adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (\|> const-decl "bool" AssetMapping nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (getExp const-decl "Formula_" CKtrans nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil))
   shostak))
 (syntaxRemoveFeature_Transformation_nonempty_TCC1 0
  (syntaxRemoveFeature_Transformation_nonempty_TCC1-1 nil 3684668369
   ("" (skolem 1 (fm fm2 am ck ck2 P Q it pairs an a))
    (("" (bddsimp) (("" (grind) nil nil)) nil)) nil)
   ((dom const-decl "set[S]" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (rm const-decl "mapping" maps nil)
    (ow const-decl "mapping" maps nil)
    (removeFeature const-decl "bool" PartialRefTemplatesTrans nil))
   nil))
 (conditionsRemoveFeature_Transformation_nonempty_TCC1 0
  (conditionsRemoveFeature_Transformation_nonempty_TCC1-1 nil
   3684668369 ("" (mapped-axiom-tcc) nil nil) nil nil))
 (removeFeaturePartialRef_TCC1 0
  (removeFeaturePartialRef_TCC1-1 nil 3684654135
   ("" (subtype-tcc) nil nil) nil nil))
 (removeFeaturePartialRef 0
  (removeFeaturePartialRef-1 nil 3684654135
   ("" (expand strongPartialRefinement)
    (("" (expand prod)
      (("" (use SPLrefinement.assetRefinement)
        (("" (expand preorder?)
          (("" (flatten)
            (("" (expand reflexive?)
              (("" (lemma ckPreserves)
                (("" (skolem 1 (pl fm2 ck2 s it pairs P Q an a))
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (bddsimp)
                        (("1" (inst -2 "(semantics(ck2)(A(pl))(c))")
                          (("1"
                            (case "(semantics(K(pl))(A(pl))(c)) = (semantics(ck2)(A(pl))(c))")
                            (("1" (replace -1 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (name
                                 "sem"
                                 "(semantics(K(pl))(A(pl))(c))")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (expand semantics)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -9 -1)
                                          (("2"
                                            (expand "<>")
                                            (("2"
                                              (decompose-equality -12)
                                              (("2"
                                                (inst -1 c)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand
                                                     conditionsRemoveFeature)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -14 c)
                                                        (("2"
                                                          (expand
                                                           satisfies
                                                           -3)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               semanticsCK
                                                               -3)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand subset?)
                      (("2" (skolem 1 c)
                        (("2" (expand member)
                          (("2" (bddsimp)
                            (("2" (expand syntaxRemoveFeature)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand removeFeature)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand semantics)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand satExpConsts)
                                          (("1"
                                            (skolem 1 f)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand remove)
                                                (("1"
                                                  (expand
                                                   filterFormulae)
                                                  (("1"
                                                    (decompose-equality
                                                     -4)
                                                    (("1"
                                                      (inst -1 f)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (expand
                                                             "<>")
                                                            (("1"
                                                              (decompose-equality
                                                               -13)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 c)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     semantics)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         satExpConsts)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           f)
                                                                          (("1"
                                                                            (bddsimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand satImpConsts)
                                          (("2"
                                            (skolem 1 n)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (expand remove)
                                                (("2"
                                                  (expand "<>")
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (decompose-equality
                                                       -12)
                                                      (("2"
                                                        (inst -1 c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (expand
                                                             satisfies
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               satisfies
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 n)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (expand
                                                                       semantics)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           satImpConsts)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             n)
                                                                            (("1"
                                                                              (bddsimp)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     n)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand subset?)
                      (("3" (skolem 1 c)
                        (("3" (expand member)
                          (("3" (expand "<>")
                            (("3" (decompose-equality)
                              (("3"
                                (inst -1 c)
                                (("3" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Transformations type-decl nil CKmultiple nil)
    (list type-decl nil list_adt nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (ckevaluation const-decl "AM" CKmultiple nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (ckPreserves formula-decl nil CKmultiple nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (conditionsRemoveFeature const-decl "bool" PartialRefTemplatesTrans
     nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" PartialRefTemplatesTrans
     nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (\|> const-decl "bool" AssetMapping nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (filterFormulae const-decl "set[Formula_]" FeatureModelSemantics
     nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (/= const-decl "boolean" notequal nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (removeFeature const-decl "bool" PartialRefTemplatesTrans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil))
   shostak))
 (removeIfDefFromCode_Transformation_nonempty_TCC1 0
  (removeIfDefFromCode_Transformation_nonempty_TCC1-1 nil 3688726335
   ("" (mapped-axiom-tcc) nil nil) nil nil))
 (removeIfDefFromCode_preserv_TCC1 0
  (removeIfDefFromCode_preserv_TCC1-1 nil 3688726214
   ("" (mapped-axiom-tcc) nil nil) nil nil))
 (removeIfDefFromCode_TCC1 0
  (removeIfDefFromCode_TCC1-1 nil 3688726214 ("" (subtype-tcc) nil nil)
   nil nil))
 (removeIfDefFromCode 0
  (removeIfDefFromCode-1 nil 3688726215
   ("" (skolem 1 (pl s am2 its pairs an a a2))
    (("" (postpone) nil nil)) nil)
   nil shostak)))
(PartialRefTemplatesIfDef
 (removeIfDefPartialRef_Transformation_nonempty_TCC1 0
  (removeIfDefPartialRef_Transformation_nonempty_TCC1-1 nil 3690559485
   ("" (mapped-axiom-tcc) nil nil) nil nil))
 (removeIfDefPartialRef_preserv_TCC1 0
  (removeIfDefPartialRef_preserv_TCC1-1 nil 3690559485
   ("" (mapped-axiom-tcc) nil nil) nil nil))
 (removeIfDefPartialRef_TCC1 0
  (removeIfDefPartialRef_TCC1-1 nil 3690559485
   ("" (subtype-tcc) nil nil) nil nil))
 (removeIfDefPartialRef 0
  (removeIfDefPartialRef-1 nil 3690559486
   ("" (skolem 1 (pl s am2 pairs n a a2 it its))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (lemma removeIfDefFromCode)
          (("1" (skolem 2 c)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (inst -1 "A(pl)" s am2 pairs "K(pl)" n a a2)
                  (("1" (bddsimp)
                    (("1" (expand semantics)
                      (("1" (inst -4 emptyset)
                        (("1" (inst -4 c)
                          (("1" (bddsimp)
                            (("1" (replace -5 2)
                              (("1"
                                (lemma SPLrefinement.assetRefinement)
                                (("1"
                                  (expand preorder?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand reflexive?)
                                      (("1"
                                        (inst
                                         -1
                                         "semanticsCK(K(pl), am2, c, emptyset)")
                                        (("1"
                                          (lemma preprocessPreserves)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 2 item)
                      (("2" (bddsimp)
                        (("2" (skolem 2 c2)
                          (("2" (bddsimp)
                            (("2" (expand "<>")
                              (("2"
                                (decompose-equality -10)
                                (("2"
                                  (inst -1 c2)
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (replace -10 -6)
                                      (("2"
                                        (expand member -6)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (replace -6 1 RL)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (inst -11 item)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (decompose-equality -7)
                                                nil
                                                nil)
                                               ("2"
                                                (decompose-equality -7)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "<>")
          (("2" (decompose-equality -6)
            (("2" (expand subset?)
              (("2" (skolem 2 c)
                (("2" (inst -1 c)
                  (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (\|> const-decl "bool" AssetMapping nil)
    (preprocessPreserves formula-decl nil CKifdef nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (member def-decl "bool" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (<> const-decl "set[Configuration]" FeatureModelSemantics nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (preprocess const-decl "AM" CKifdef nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (list type-decl nil list_adt nil)
    (AssetIfdef type-eq-decl nil CKifdef nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (removeIfDefFromCode formula-decl nil CKifdef nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil))
   shostak)))

