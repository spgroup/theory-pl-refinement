(SPLPartialRefTemplates
 (sameEvalPairs 0
  (sameEvalPairs-1 nil 3655569386
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (expand semantics)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand map)
                    (("" (decompose-equality)
                      (("" (bddsimp)
                        (("1" (skolem -1 n)
                          (("1" (inst 1 n)
                            (("1" (bddsimp)
                              (("1"
                                (expand eval)
                                (("1"
                                  (expand assetsCK)
                                  (("1"
                                    (skolem -1 i)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand syntaxChangeAsset)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand ow)
                                            (("1"
                                              (expand singleton)
                                              (("1"
                                                (expand dom)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem -1 n)
                          (("2" (inst 1 n)
                            (("2" (bddsimp)
                              (("2"
                                (expand eval)
                                (("2"
                                  (expand syntaxChangeAsset)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand ow)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (ow const-decl "mapping" maps nil)
    (dom const-decl "set[S]" maps nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (rm const-decl "mapping" maps nil)
    (singleton_elt const-decl "T" sets nil)
    (member const-decl "bool" sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   shostak))
 (sameEvalPairs2 0
  (sameEvalPairs2-1 nil 3656675170
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (expand semantics)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (expand map)
                (("" (expand syntaxChangeAsset)
                  (("" (flatten)
                    (("" (expand ow)
                      (("" (decompose-equality)
                        (("" (decompose-equality)
                          (("" (decompose-equality)
                            (("" (bddsimp)
                              (("1"
                                (skolem -1 n)
                                (("1"
                                  (inst -2 "(n,x!1)")
                                  (("1"
                                    (inst 1 n)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (inst -6 c)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand union)
                                            (("1"
                                              (expand member)
                                              (("1"
                                                (expand singleton)
                                                (("1"
                                                  (expand rm)
                                                  (("1"
                                                    (expand remove)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 n)
                                (("2"
                                  (inst 1 n)
                                  (("2"
                                    (inst -2 "(n,x!1)")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (inst -5 c)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand union)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (expand singleton)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand rm)
                                                        (("1"
                                                          (expand
                                                           remove)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (rm const-decl "mapping" maps nil)
    (union const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (remove const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (singleton_elt const-decl "T" sets nil)
    (member const-decl "bool" sets nil)
    (ow const-decl "mapping" maps nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   shostak))
 (changeAssetSameProducts 0
  (changeAssetSameProducts-1 nil 3655548533
   ("" (lemma sameEvalPairs)
    (("" (lemma sameEvalPairs2)
      (("" (skolem 1 (pl am2 pairs a1 a2 an s))
        (("" (inst -1 pl am2 pairs a1 a2 an s)
          (("" (inst -2 pl am2 pairs a1 a2 an s)
            (("" (expand syntaxChangeAsset)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (inst -4 c)
                    (("" (inst -5 c)
                      (("" (bddsimp)
                        (("" (replace -5 1) (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sameEvalPairs formula-decl nil SPLPartialRefTemplates nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (sameEvalPairs2 formula-decl nil SPLPartialRefTemplates nil))
   shostak))
 (changeAssetStrong_TCC1 0
  (changeAssetStrong_TCC1-1 nil 3655636131
   ("" (skolem 1 (pl am2 pairs a1 a2 an s pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (replace -5 1)
            (("" (skolem 1 c)
              (("" (inst -1 c)
                (("" (case "s(c)")
                  (("1" (lemma changeAssetSameProducts)
                    (("1" (inst -1 pl am2 pairs a1 a2 an s)
                      (("1" (bddsimp)
                        (("1" (expand syntaxChangeAsset)
                          (("1" (bddsimp)
                            (("1" (inst -4 c)
                              (("1"
                                (expand semantics)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (replace -5 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "<>")
                          (("2" (expand "<>")
                            (("2" (decompose-equality -4)
                              (("2"
                                (inst -1 c)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (bddsimp)
                    (("1" (inst -4 c)
                      (("1" (bddsimp)
                        (("1" (replace -5 -4) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -3 c)
                      (("2" (replace -4 -3)
                        (("2" (expand semantics)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (changeAssetSameProducts formula-decl nil SPLPartialRefTemplates
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (changeAssetStrong_TCC2 0
  (changeAssetStrong_TCC2-1 nil 3659710409 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (dom const-decl "set[S]" maps nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (member const-decl "bool" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (changeAssetStrong 0
  (changeAssetStrong-1 nil 3655416713
   ("" (skolem 1 (pl am2 pairs a1 a2 an s))
    (("" (lemma changeAssetSameProducts)
      (("" (inst -1 pl am2 pairs a1 a2 an s)
        (("" (expand syntaxChangeAsset)
          (("" (bddsimp)
            (("" (expand strongPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (expand prod)
                      (("" (replace -5 1)
                        (("" (use SPLrefinement.assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (inst
                                   -1
                                   "(semantics(K(pl))(am2)(c))")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (changeAssetSameProducts formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (changeAssetWeak_TCC1 0
  (changeAssetWeak_TCC1-1 nil 3655846816
   ("" (skolem 1 (pl am2 pairs a1 a2 an m pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (replace -6 1)
          (("" (expand wfPL)
            (("" (skolem 1 c)
              (("" (inst -1 c)
                (("" (lemma changeAssetSameProducts)
                  (("" (inst -1 pl am2 pairs a1 a2 an "domain(m)")
                    (("" (expand syntaxChangeAsset)
                      (("" (bddsimp)
                        (("" (inst -4 c)
                          (("" (bddsimp)
                            (("1" (replace -4 1 RL)
                              (("1" (propax) nil nil)) nil)
                             ("2" (inst -7 c)
                              (("2"
                                (bddsimp)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((changeAssetSameProducts formula-decl nil SPLPartialRefTemplates
     nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (dom const-decl "set[S]" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (rm const-decl "mapping" maps nil)
    (ow const-decl "mapping" maps nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (extend const-decl "R" extend nil)
    (getRight const-decl "T" maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (changeAssetWeak_TCC2 0
  (changeAssetWeak_TCC2-1 nil 3659711341
   ("" (skolem 1 (pl am1 pairs a1 a2 an m pl2))
    (("" (bddsimp)
      (("1" (expand subset?)
        (("1" (skolem 1 c)
          (("1" (expand member)
            (("1" (replace -5 1)
              (("1" (expand "<>")
                (("1" (expand "<>")
                  (("1" (decompose-equality)
                    (("1" (inst -1 c)
                      (("1" (expand semantics)
                        (("1" (bddsimp)
                          (("1" (expand image)
                            (("1" (expand domain)
                              (("1"
                                (skolem -5 l)
                                (("1"
                                  (expand identity?)
                                  (("1"
                                    (inst -2 l)
                                    (("1"
                                      (lemma
                                       "maps[Configuration,Configuration].getRightResult")
                                      (("1"
                                        (inst -1 m c l)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (replace -2 -4)
                                            (("1"
                                              (replace -4 -1 RL)
                                              (("1"
                                                (inst 1 c)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand image)
                            (("2" (expand domain)
                              (("2"
                                (lemma
                                 "maps[Configuration,Configuration].getRightResult")
                                (("2"
                                  (skolem -6 l)
                                  (("2"
                                    (inst -1 m c l)
                                    (("1"
                                      (expand identity?)
                                      (("1"
                                        (inst -3 l)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (replace -2 -4)
                                            (("1"
                                              (replace -4 1)
                                              (("1"
                                                (inst 1 c)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand identity?)
                                      (("2"
                                        (inst -2 l)
                                        (("2"
                                          (lemma
                                           "maps[Configuration,Configuration].getRightResult")
                                          (("2"
                                            (inst -1 m c l)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (replace -2 -4)
                                                (("2"
                                                  (replace -4 2)
                                                  (("2"
                                                    (inst 2 c)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset?)
        (("2" (skolem 1 c)
          (("2" (expand member)
            (("2" (expand "<>")
              (("2" (expand "<>")
                (("2" (decompose-equality)
                  (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (m skolem-const-decl "CM
    [Configuration, WFFM,
     restrict[FM, WFFM, set[Configuration]](semantics), Assets.Asset,
     Assets.AssetName, CK, semantics]" SPLPartialRefTemplates nil)
    (l skolem-const-decl "Configuration" SPLPartialRefTemplates nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (dom const-decl "set[S]" maps nil)
    (getRightResult formula-decl nil maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (changeAssetWeak 0
  (changeAssetWeak-1 nil 3655846829
   ("" (skolem 1 (pl am2 pairs a1 a2 an map))
    (("" (lemma changeAssetSameProducts)
      (("" (inst -1 pl am2 pairs a1 a2 an "domain(map)")
        (("" (expand syntaxChangeAsset)
          (("" (bddsimp)
            (("" (expand weakPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (expand identity?)
                    (("" (inst -5 c)
                      (("" (replace -5 1)
                        (("" (bddsimp)
                          (("" (expand prod)
                            (("" (replace -5 1)
                              ((""
                                (use SPLrefinement.assetRefinement)
                                ((""
                                  (expand preorder?)
                                  ((""
                                    (flatten)
                                    ((""
                                      (expand reflexive?)
                                      ((""
                                        (inst
                                         -1
                                         "(semantics(K(pl))(am2)(c))")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (identity? const-decl "bool" maps_identity nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil)
    (syntaxChangeAsset const-decl "bool" SPLPartialRefTemplates nil)
    (changeAssetSameProducts formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (transfOptMand_TCC1 0
  (transfOptMand_TCC1-1 nil 3655826326 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil))
   nil))
 (wfTransfOptMand_TCC1 0
  (wfTransfOptMand_TCC1-1 nil 3658137889 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (fm2!1 skolem-const-decl "FFM" SPLPartialRefTemplates nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (P!1 skolem-const-decl "Name" SPLPartialRefTemplates nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (f!4 skolem-const-decl "Formula_" SPLPartialRefTemplates nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil))
   nil))
 (wfTransfOptMand 0
  (wfTransfOptMand-2 nil 3658138827
   ("" (skolem 1 (pl fm2 P Q))
    (("" (expand wfPL)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (typepred pl)
            (("1" (expand wfPL)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (expand semantics)
                    (("1" (expand satImpConsts)
                      (("1" (expand satExpConsts)
                        (("1" (flatten)
                          (("1" (bddsimp)
                            (("1" (skolem 1 f)
                              (("1"
                                (inst -4 f)
                                (("1"
                                  (expand syntaxTransfOptMand)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand transfOptMand)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand union)
                                          (("1"
                                            (decompose-equality -3)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 n)
                              (("2"
                                (inst -3 n)
                                (("2"
                                  (expand syntaxTransfOptMand)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand transfOptMand)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2 1)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma wtFormSameFeatures)
          (("2" (inst -1 "F(pl)" fm2)
            (("2" (expand syntaxTransfOptMand)
              (("2" (flatten)
                (("2" (expand transfOptMand)
                  (("2" (flatten)
                    (("2" (expand wfTree)
                      (("2" (bddsimp)
                        (("2" (typepred "F(pl)")
                          (("2" (expand wfFM)
                            (("2" (expand wfTree)
                              (("2"
                                (expand wfFormulae)
                                (("2"
                                  (skolem 1 f)
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (expand singleton)
                                          (("2"
                                            (expand wfFFM)
                                            (("2"
                                              (expand wfFM)
                                              (("2"
                                                (expand wfTree)
                                                (("2"
                                                  (inst -4 f)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("1"
                                                      (inst -1 f)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (lemma
                                                           wtFormSameFeatures)
                                                          (("1"
                                                            (typepred
                                                             "F(pl)")
                                                            (("1"
                                                              (expand
                                                               wfFFM)
                                                              (("1"
                                                                (expand
                                                                 wfFM)
                                                                (("1"
                                                                  (expand
                                                                   wfTree)
                                                                  (("1"
                                                                    (expand
                                                                     wfFormulae)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       f)
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "F(pl)"
                                                                         fm2)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -2
                                                           2)
                                                          (("2"
                                                            (expand wt)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (expand
                                                                 wt)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     Q)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       1
                                                                       RL)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     P)
                                                                    (("2"
                                                                      (replace
                                                                       -5
                                                                       1
                                                                       RL)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (expand wt)
                                                      (("3"
                                                        (expand wt)
                                                        (("3"
                                                          (bddsimp)
                                                          (("1"
                                                            (inst 3 Q)
                                                            (("1"
                                                              (inst
                                                               4
                                                               Q)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst 3 Q)
                                                            (("2"
                                                              (inst
                                                               4
                                                               P)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst 3 P)
                                                            (("3"
                                                              (inst
                                                               4
                                                               Q)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (inst 3 P)
                                                            (("4"
                                                              (inst
                                                               4
                                                               P)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PL type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (union const-decl "set" sets nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (injective? const-decl "bool" functions nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wtFormSameFeatures formula-decl nil FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil)
  (wfTransfOptMand-1 nil 3658135256
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand wfPL)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (typepred pl)
            (("1" (expand wfPL)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (expand semantics)
                    (("1" (expand satImpConsts)
                      (("1" (expand satExpConsts)
                        (("1" (flatten)
                          (("1" (bddsimp)
                            (("1" (skolem 1 f)
                              (("1"
                                (inst -4 f)
                                (("1"
                                  (expand syntaxTransfOptMand)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand transfOptMand)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand union)
                                          (("1"
                                            (decompose-equality -3)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 n)
                              (("2"
                                (inst -3 n)
                                (("2"
                                  (expand syntaxTransfOptMand)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand transfOptMand)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2 1)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma wtFormSameFeatures)
          (("2" (inst -1 "F(pl)" fm2)
            (("2" (expand syntaxTransfOptMand)
              (("2" (flatten)
                (("2" (expand transfOptMand)
                  (("2" (flatten)
                    (("2" (expand wfTree)
                      (("2" (bddsimp)
                        (("2" (typepred "F(pl)")
                          (("2" (expand wfFM)
                            (("2" (expand wfTree)
                              (("2"
                                (expand wfFormulae)
                                (("2"
                                  (skolem 1 f)
                                  (("2"
                                    (inst -1 f)
                                    (("2"
                                      (inst -3 f)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand union)
                                          (("2"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 f)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (expand singleton)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -2 3)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand wt)
                                                          (("1"
                                                            (expand wt)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 Q)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   RL)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 2
                                                                 P)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   RL)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfPL const-decl "bool" SPLrefinement nil)
    (wtFormSameFeatures formula-decl nil FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (union const-decl "set" sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil))
   shostak))
 (transOptMandPartRefStrong_TCC1 0
  (transOptMandPartRefStrong_TCC1-1 nil 3655832656
   ("" (lemma wfTransfOptMand)
    (("" (skolem 1 (pl fm2 s P Q pl2))
      (("" (inst -1 pl fm2 P Q)
        (("" (bddsimp)
          (("1" (replace -5 -1 RL)
            (("1" (replace -5 -1)
              (("1" (expand syntaxTransfOptMand)
                (("1" (bddsimp)
                  (("1" (replace -8 1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand wfPL)
            (("2" (bddsimp)
              (("2" (replace -6 1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (wfTransfOptMand formula-decl nil SPLPartialRefTemplates nil))
   nil))
 (transOptMandPartRefStrong_TCC2 0
  (transOptMandPartRefStrong_TCC2-1 nil 3656876548
   ("" (skolem 1 (pl fm2 s P Q pl2))
    (("" (bddsimp)
      (("1" (expand "<>")
        (("1" (decompose-equality)
          (("1" (expand subset?)
            (("1" (skolem 1 c)
              (("1" (inst -1 c)
                (("1" (expand member)
                  (("1" (expand syntaxTransfOptMand)
                    (("1" (flatten)
                      (("1" (bddsimp)
                        (("1" (expand conditionsTransfOptMand)
                          (("1" (inst -7 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand transfOptMand)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand semantics)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand satExpConsts)
                                        (("1"
                                          (skolem 1 f)
                                          (("1"
                                            (expand union)
                                            (("1"
                                              (decompose-equality -6)
                                              (("1"
                                                (inst -1 f)
                                                (("1"
                                                  (expand member)
                                                  (("1"
                                                    (inst -4 f)
                                                    (("1"
                                                      (expand
                                                       singleton)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand satImpConsts)
                                        (("2"
                                          (skolem 1 n)
                                          (("2"
                                            (inst -2 n)
                                            (("2"
                                              (replace -10 1)
                                              (("2"
                                                (bddsimp)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset?)
        (("2" (skolem 1 c)
          (("2" (expand "<>")
            (("2" (decompose-equality)
              (("2" (inst -1 c)
                (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (union const-decl "set" sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil))
   nil))
 (transOptMandPartRefStrong 0
  (transOptMandPartRefStrong-1 nil 3655826327
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (use SPLrefinement.assetRefinement)
                (("" (expand preorder?)
                  (("" (flatten)
                    (("" (expand reflexive?)
                      (("" (inst -1 "(semantics(K(pl))(A(pl))(c))") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil))
   shostak))
 (transOptMandPartRefWeak_TCC1 0
  (transOptMandPartRefWeak_TCC1-1 nil 3656876548
   ("" (lemma wfTransfOptMand)
    (("" (skolem 1 (pl fm2 m P Q pl2))
      (("" (inst -1 pl fm2 P Q)
        (("" (bddsimp)
          (("1" (expand syntaxTransfOptMand)
            (("1" (bddsimp)
              (("1" (replace -9 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (expand wfPL)
            (("2" (bddsimp) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (identity? const-decl "bool" maps_identity nil)
    (getRight const-decl "T" maps nil)
    (singleton_elt const-decl "T" sets nil)
    (member const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "set[S]" maps nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (wfTransfOptMand formula-decl nil SPLPartialRefTemplates nil))
   nil))
 (transOptMandPartRefWeak_TCC2 0
  (transOptMandPartRefWeak_TCC2-1 nil 3656876852
   ("" (skolem 1 (pl fm2 m P Q pl2))
    (("" (expand subset?)
      (("" (expand "<>")
        (("" (expand member)
          (("" (flatten)
            (("" (decompose-equality -3)
              (("" (bddsimp)
                (("1" (skolem 1 c)
                  (("1"
                    (lemma "maps_identity[Configuration].sameDomImg")
                    (("1" (inst -1 m)
                      (("1" (bddsimp)
                        (("1" (replace -2 -7 RL)
                          (("1" (inst -3 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand syntaxTransfOptMand)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (expand semantics)
                                    (("1"
                                      (expand conditionsTransfOptMand)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand semantics)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 c)
                  (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (conditionsTransfOptMand const-decl "bool" SPLPartialRefTemplates
     nil)
    (union const-decl "set" sets nil)
    (transfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (identity? const-decl "bool" maps_identity nil)
    (getRight const-decl "T" maps nil)
    (singleton_elt const-decl "T" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "set[S]" maps nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (syntaxTransfOptMand const-decl "bool" SPLPartialRefTemplates nil)
    (sameDomImg formula-decl nil maps_identity nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil))
   nil))
 (transOptMandPartRefWeak 0
  (transOptMandPartRefWeak-1 nil 3656876549
   ("" (skolem 1 (pl fm2 m P Q))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (expand identity?)
                (("" (inst -4 c)
                  (("" (replace -4 1)
                    (("" (use SPLrefinement.assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand reflexive?)
                            ((""
                              (inst -1 "(semantics(K(pl))(A(pl))(c))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (identity? const-decl "bool" maps_identity nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil))
   shostak))
 (conditionsChangeFeatureExp_TCC1 0
  (conditionsChangeFeatureExp_TCC1-1 nil 3657447041
   ("" (subtype-tcc) nil nil)
   ((wfTree const-decl "bool" FeatureModel nil)) nil))
 (changeFeatureExpSameEvalCK 0
  (changeFeatureExpSameEvalCK-5 nil 3657620202
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand predChangeFeatureExp)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeFeatureExp)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil))
   nil)
  (changeFeatureExpSameEvalCK-4 nil 3657448045
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand prod)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeFeatureExp)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   nil)
  (changeFeatureExpSameEvalCK-3 nil 3657447915
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (expand prod)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (expand "<>")
              (("" (decompose-equality -3)
                (("" (inst -1 c)
                  (("" (expand syntaxChangeFeatureExp)
                    (("" (flatten)
                      (("" (expand union)
                        (("" (decompose-equality -2)
                          (("" (decompose-equality -3)
                            (("" (expand semantics)
                              ((""
                                (expand map)
                                ((""
                                  (decompose-equality 1)
                                  ((""
                                    (bddsimp)
                                    (("1"
                                      (skolem -1 an)
                                      (("1"
                                        (inst 1 an)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand eval)
                                            (("1"
                                              (expand evalCK)
                                              (("1"
                                                (expand assetsCK)
                                                (("1"
                                                  (skolem -1 i)
                                                  (("1"
                                                    (inst 1 i)
                                                    (("1"
                                                      (inst -3 i)
                                                      (("1"
                                                        (inst -4 i)
                                                        (("1"
                                                          (expand
                                                           member)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand
                                                               singleton)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))
                                     ("2"
                                      (skolem -1 an)
                                      (("2"
                                        (inst 1 an)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -2 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (expand evalCK)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (inst -6 i)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (grind)
                                                                nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeFeatureExpSameEvalCK-2 nil 3657447658
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality -3)
              (("" (inst -1 c)
                (("" (expand syntaxChangeFeatureExp)
                  (("" (flatten)
                    (("" (expand union)
                      (("" (decompose-equality -2)
                        (("" (decompose-equality -3)
                          (("" (expand semantics)
                            (("" (expand map)
                              ((""
                                (decompose-equality 1)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (inst 1 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (expand evalCK)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 i)
                                                  (("1"
                                                    (inst -3 i)
                                                    (("1"
                                                      (inst -4 i)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             singleton)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (skolem -1 an)
                                    (("2"
                                      (inst 1 an)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -2 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand evalCK)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst -6 i)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (grind)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (changeFeatureExpSameEvalCK-1 nil 3657447042
   ("" (skolem 1 (pl ck2 item1 item2 items s))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (expand syntaxChangeFeatureExp)
                (("" (flatten)
                  (("" (expand union)
                    (("" (decompose-equality -2)
                      (("" (decompose-equality -3)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (expand eval)
                                        (("1"
                                          (expand evalCK)
                                          (("1"
                                            (expand assetsCK)
                                            (("1"
                                              (skolem -1 i)
                                              (("1"
                                                (inst 1 i)
                                                (("1"
                                                  (inst -3 i)
                                                  (("1"
                                                    (inst -4 i)
                                                    (("1"
                                                      (expand member)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           singleton)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (expand eval)
                                        (("2"
                                          (expand assetsCK)
                                          (("2"
                                            (skolem -2 i)
                                            (("2"
                                              (inst 1 i)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (expand evalCK)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -6 i)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (restrict const-decl "R" restrict nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil))
   shostak))
 (changeFeatureExpStrongPartRef_TCC1 0
  (changeFeatureExpStrongPartRef_TCC1-1 nil 3657448092
   ("" (skolem 1 (pl ck2 item1 item2 items s pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -4 1)
                (("" (expand semantics)
                  (("" (lemma changeFeatureExpSameEvalCK)
                    (("" (inst -1 pl ck2 item1 item2 items s)
                      (("" (bddsimp)
                        (("" (expand predChangeFeatureExp)
                          (("" (bddsimp)
                            (("1" (inst -4 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -4 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -7 c)
                                  (("2"
                                    (bddsimp)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 c2)
                              (("2"
                                (inst -7 c2)
                                (("2"
                                  (expand semantics)
                                  (("2"
                                    (replace -8 -7)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (changeFeatureExpSameEvalCK formula-decl nil SPLPartialRefTemplates
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (changeFeatureExpStrongPartRef_TCC2 0
  (changeFeatureExpStrongPartRef_TCC2-1 nil 3659802236
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (member const-decl "bool" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (changeFeatureExpStrongPartRef 0
  (changeFeatureExpStrongPartRef-2 nil 3657620296
   ("" (lemma changeFeatureExpSameEvalCK)
    (("" (expand predChangeFeatureExp)
      (("" (skolem 1 (pl ck2 item1 item2 items s))
        (("" (inst -1 pl ck2 item1 item2 items s)
          (("" (expand strongPartialRefinement)
            (("" (expand prod)
              (("" (bddsimp)
                (("" (skolem 1 c)
                  (("" (bddsimp)
                    (("" (use SPLrefinement.assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand reflexive?)
                            (("" (inst -1 "(semantics(ck2)(A(pl))(c))")
                              ((""
                                (inst -7 c)
                                ((""
                                  (bddsimp)
                                  ((""
                                    (replace -8 1)
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((changeFeatureExpSameEvalCK formula-decl nil SPLPartialRefTemplates
     nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil))
   nil)
  (changeFeatureExpStrongPartRef-1 nil 3657448093
   ("" (lemma changeFeatureExpSameEvalCK)
    (("" (skolem 1 (pl ck2 item1 item2 items s))
      (("" (inst -1 pl ck2 item1 item2 items s)
        (("" (expand strongPartialRefinement)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (bddsimp)
                    (("" (replace -5 1)
                      (("" (use SPLrefinement.assetRefinement)
                        (("" (expand preorder?)
                          (("" (flatten)
                            (("" (expand reflexive?)
                              ((""
                                (inst -1 "(semantics(ck2)(A(pl))(c))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (changeFeatureExpSameEvalCK formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (changeFeatureExpWeakPartRef_TCC1 0
  (changeFeatureExpWeakPartRef_TCC1-1 nil 3659802432
   ("" (skolem 1 (pl ck2 item1 item2 items m pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -5 1)
                (("" (expand semantics)
                  (("" (lemma changeFeatureExpSameEvalCK)
                    (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
                      (("" (expand predChangeFeatureExp)
                        (("" (bddsimp)
                          (("1" (inst -4 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand semantics)
                                (("1"
                                  (replace -4 1 RL)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -7 c)
                                (("2"
                                  (bddsimp)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -9 -7)
                            (("2" (expand map)
                              (("2"
                                (expand semantics)
                                (("2"
                                  (expand map)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (identity? const-decl "bool" maps_identity nil)
    (getRight const-decl "T" maps nil)
    (singleton_elt const-decl "T" sets nil)
    (member const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "set[S]" maps nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates nil)
    (changeFeatureExpSameEvalCK formula-decl nil SPLPartialRefTemplates
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (changeFeatureExpWeakPartRef_TCC2 0
  (changeFeatureExpWeakPartRef_TCC2-1 nil 3659802432
   ("" (skolem 1 (pl ck2 item1 item2 items m pl2))
    (("" (bddsimp)
      (("1" (expand subset?)
        (("1" (skolem 1 c)
          (("1" (expand member)
            (("1" (replace -4 1)
              (("1" (expand predChangeFeatureExp)
                (("1" (bddsimp)
                  (("1" (expand "<>")
                    (("1" (decompose-equality)
                      (("1" (inst -1 c)
                        (("1" (expand semantics)
                          (("1" (bddsimp)
                            (("1" (expand image)
                              (("1"
                                (expand domain)
                                (("1"
                                  (expand identity?)
                                  (("1"
                                    (skolem -6 l)
                                    (("1"
                                      (inst -4 l)
                                      (("1"
                                        (lemma
                                         "maps[Configuration,Configuration].getRightResult")
                                        (("1"
                                          (inst -1 m c l)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (replace -2 -6)
                                              (("1"
                                                (inst 1 c)
                                                (("1"
                                                  (replace -6 1)
                                                  (("1"
                                                    (replace -6 -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand domain)
                              (("2"
                                (expand image)
                                (("2"
                                  (skolem -6 l)
                                  (("2"
                                    (expand identity?)
                                    (("2"
                                      (inst -4 l)
                                      (("2"
                                        (lemma
                                         "maps[Configuration,Configuration].getRightResult")
                                        (("2"
                                          (inst -1 m c l)
                                          (("2"
                                            (bddsimp)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset?)
        (("2" (skolem 1 c)
          (("2" (expand member)
            (("2" (expand predChangeFeatureExp)
              (("2" (bddsimp)
                (("2" (expand "<>")
                  (("2" (decompose-equality)
                    (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (singleton_elt const-decl "T" sets nil)
    (getRight const-decl "T" maps nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (syntaxChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil)
    (conditionsChangeFeatureExp const-decl "bool"
     SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (dom const-decl "set[S]" maps nil)
    (getRightResult formula-decl nil maps nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (changeFeatureExpWeakPartRef 0
  (no "" 3659802795
   ("" (lemma changeFeatureExpStrongPartRef)
    (("" (skolem 1 (pl ck2 item1 item2 items m))
      (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
        (("" (expand predChangeFeatureExp)
          (("" (bddsimp)
            ((""
              (expand* strongPartialRefinement weakPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -5 c)
                  (("" (expand identity?)
                    (("" (inst -6 c)
                      (("" (replace -6 1) (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((changeFeatureExpStrongPartRef formula-decl nil
     SPLPartialRefTemplates nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (identity? const-decl "bool" maps_identity nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil)
    (predChangeFeatureExp const-decl "bool" SPLPartialRefTemplates
     nil))
   shostak)
  (changeFeatureExpWeakPartRef-1 nil 3659802433
   ("" (lemma changeFeatureExpSameEvalCK)
    (("" (skolem 1 (s pl ck2 item1 item2 items m))
      (("" (inst -1 pl ck2 item1 item2 items "domain(m)")
        (("" (expand predChangeFeatureExp)
          (("" (bddsimp)
            (("1" (expand weakPartialRefinement)
              (("1" (skolem 1 c)
                (("1" (inst -5 c)
                  (("1" (inst -4 c)
                    (("1" (bddsimp)
                      (("1" (expand identity?)
                        (("1" (decompose-equality)
                          (("1" (inst -1 c)
                            (("1" (inst -7 c)
                              (("1"
                                (replace -7 1)
                                (("1"
                                  (replace -5 1 RL)
                                  (("1"
                                    (use SPLrefinement.assetRefinement)
                                    (("1"
                                      (expand preorder?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand reflexive?)
                                          (("1"
                                            (inst -1 "prod(pl,c)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand identity?)
                        (("2" (inst -7 c)
                          (("2" (replace -7 1)
                            (("2" (replace -5 1 RL)
                              (("2"
                                (use SPLrefinement.assetRefinement)
                                (("2"
                                  (expand preorder?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand reflexive?)
                                      (("2"
                                        (inst -1 "prod(pl,c)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (itsNotIncluded 0
  (itsNotIncluded-5 nil 3657619248
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand predRemoveFeature)
          (("" (flatten)
            (("" (expand "<>")
              (("" (decompose-equality)
                (("" (inst -1 c)
                  (("" (expand conditionsRemoveFeature)
                    (("" (flatten)
                      (("" (skolem 1 i)
                        (("" (inst -4 i)
                          (("" (bddsimp)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsOpt const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (overw const-decl "mapping" maps nil)
    (removeFeature const-decl "bool" SPLPartialRefTemplates nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (conditionsMand const-decl "bool" SPLPartialRefTemplates nil)
    (predRemoveFeature const-decl "bool" SPLPartialRefTemplates nil))
   nil)
  (itsNotIncluded-4 nil 3657555293
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (expand member)
                                      (("1"
                                        (expand satisfies)
                                        (("1"
                                          (expand satisfies)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil))
   nil)
  (itsNotIncluded-3 nil 3657554425
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil))
   nil)
  (itsNotIncluded-2 nil 3657553584
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -8)
                                      (("1"
                                        (skolem -10 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil))
   nil)
  (itsNotIncluded-1 nil 3657533313
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality -3)
            (("" (inst -1 c)
              (("" (skolem 1 i)
                (("" (expand conditionsRemoveFeature)
                  (("" (flatten)
                    (("" (inst -3 c)
                      (("" (inst -3 "exp(i)")
                        (("" (expand evalCK)
                          (("" (bddsimp)
                            (("1" (expand exps)
                              (("1"
                                (expand syntaxRemoveFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand difference)
                                    (("1"
                                      (decompose-equality -10)
                                      (("1"
                                        (skolem -12 i2)
                                        (("1"
                                          (inst -1 i2)
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand satisfies)
                                                (("1"
                                                  (expand satisfies)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand exps)
                              (("2" (inst 1 i) nil nil)) nil)
                             ("3" (expand exps)
                              (("3" (inst 1 i) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (difference const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil))
   shostak))
 (pairsNotIncluded 0
  (pairsNotIncluded-2 nil 3657619364
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand predRemoveFeature)
          (("" (flatten)
            (("" (skolem 1 an)
              (("" (expand conditionsRemoveFeature)
                (("" (flatten)
                  (("" (lemma itsNotIncluded)
                    (("" (inst -1 pl pl2 s its pairs P Q)
                      (("" (expand predRemoveFeature)
                        (("" (bddsimp)
                          (("1" (inst -3 c)
                            (("1" (bddsimp)
                              (("1"
                                (expand eval)
                                (("1"
                                  (expand assetsCK)
                                  (("1"
                                    (skolem -9 i)
                                    (("1"
                                      (inst -4 i)
                                      (("1"
                                        (inst -6 i)
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil)
    (itsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (conditionsMand const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (removeFeature const-decl "bool" SPLPartialRefTemplates nil)
    (overw const-decl "mapping" maps nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (conditionsOpt const-decl "bool" SPLPartialRefTemplates nil)
    (dom const-decl "set[S]" maps nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (predRemoveFeature const-decl "bool" SPLPartialRefTemplates nil))
   nil)
  (pairsNotIncluded-1 nil 3657539564
   ("" (lemma itsNotIncluded)
    (("" (skolem 1 (pl pl2 s its pairs P Q))
      (("" (inst -1 pl pl2 s its pairs P Q)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (inst -4 c)
              (("" (bddsimp)
                (("" (skolem 1 an)
                  (("" (expand conditionsRemoveFeature)
                    (("" (flatten)
                      (("" (expand eval)
                        (("" (expand assetsCK)
                          (("" (skolem -7 i)
                            (("" (inst -3 i)
                              ((""
                                (inst -6 i)
                                ((""
                                  (bddsimp)
                                  ((""
                                    (inst -3 an)
                                    (("" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((itsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil))
   shostak))
 (removeFeatureSameProducts 0
  (removeFeatureSameProducts-10 nil 3657619438
   ("" (lemma itsNotIncluded)
    (("" (lemma pairsNotIncluded)
      (("" (skolem 1 (pl pl2 s its pairs P Q))
        (("" (inst -1 pl pl2 s its pairs P Q)
          (("" (inst -2 pl pl2 s its pairs P Q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -3 c)
                  (("" (inst -2 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand predRemoveFeature)
                          (("" (flatten)
                            (("" (expand semantics)
                              ((""
                                (expand map)
                                ((""
                                  (decompose-equality)
                                  ((""
                                    (decompose-equality 1)
                                    ((""
                                      (bddsimp)
                                      (("1"
                                        (skolem -1 an)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand eval)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst 1 an)
                                                  (("1"
                                                    (expand
                                                     syntaxRemoveFeature)
                                                    (("1"
                                                      (inst -3 c)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           overw)
                                                          (("1"
                                                            (expand
                                                             union)
                                                            (("1"
                                                              (expand
                                                               difference)
                                                              (("1"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     i)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "(an,x!1)")
                                                                      (("1"
                                                                        (expand
                                                                         member)
                                                                        (("1"
                                                                          (expand
                                                                           remove)
                                                                          (("1"
                                                                            (expand
                                                                             domain)
                                                                            (("1"
                                                                              (expand
                                                                               evalCK)
                                                                              (("1"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   2
                                                                                   i)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("5"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("6"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem -1 an)
                                        (("2"
                                          (inst 1 an)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand
                                               syntaxRemoveFeature)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand overw)
                                                  (("2"
                                                    (expand difference)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (expand
                                                           assetsCK)
                                                          (("2"
                                                            (skolem
                                                             -3
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "(an,x!1)")
                                                                (("2"
                                                                  (expand
                                                                   union)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (expand
                                                                       remove)
                                                                      (("2"
                                                                        (expand
                                                                         domain)
                                                                        (("2"
                                                                          (inst
                                                                           -12
                                                                           i)
                                                                          (("2"
                                                                            (inst
                                                                             -11
                                                                             an)
                                                                            (("2"
                                                                              (bddsimp)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("6"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("7"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("8"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("9"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("10"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("11"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("12"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((itsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (union const-decl "set" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (remove const-decl "mapping" maps nil)
    (mapping type-eq-decl nil maps nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (conditionsRemoveFeature const-decl "bool" SPLPartialRefTemplates
     nil)
    (conditionsMand const-decl "bool" SPLPartialRefTemplates nil)
    (conditionsOpt const-decl "bool" SPLPartialRefTemplates nil)
    (dom const-decl "set[S]" maps nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (removeFeature const-decl "bool" SPLPartialRefTemplates nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (difference const-decl "set" sets nil)
    (overw const-decl "mapping" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (predRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (pairsNotIncluded formula-decl nil SPLPartialRefTemplates nil))
   nil)
  (removeFeatureSameProducts-9 nil 3657556116
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pairsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (itsNotIncluded formula-decl nil SPLPartialRefTemplates nil))
   nil)
  (removeFeatureSameProducts-8 nil 3657555864
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-7 nil 3657555685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-6 nil 3657555648
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -5)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-5 nil 3657555612
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-4 nil 3657555537
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -6)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -4)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -5)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-3 nil 3657555381
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -7)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil)))
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -5)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil)))))))))
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (removeFeatureSameProducts-2 nil 3657553685
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -6)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -7)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pairsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[S]" maps nil)
    (difference const-decl "set" sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (Asset nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Configuration type-eq-decl nil Name nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (itsNotIncluded formula-decl nil SPLPartialRefTemplates nil))
   nil)
  (removeFeatureSameProducts-1 nil 3657408487
   ("" (skolem 1 (pl pl2 s its pairs p q))
    (("" (lemma itsNotIncluded)
      (("" (lemma pairsNotIncluded)
        (("" (inst -1 pl pl2 s its pairs p q)
          (("" (inst -2 pl pl2 s its pairs p q)
            (("" (bddsimp)
              (("" (skolem 1 c)
                (("" (inst -4 c)
                  (("" (inst -5 c)
                    (("" (bddsimp)
                      (("" (expand prod)
                        (("" (expand semantics)
                          (("" (expand map)
                            (("" (decompose-equality 1)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (inst 1 an)
                                    (("1"
                                      (inst -6 an)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand eval)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand assetsCK)
                                              (("1"
                                                (skolem -1 i)
                                                (("1"
                                                  (inst -7 i)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand
                                                       syntaxRemoveFeature)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           difference)
                                                          (("1"
                                                            (decompose-equality
                                                             -9)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(an,x!1)")
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     dom)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -1 i)
                                                (("2"
                                                  (inst 1 i)
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           syntaxRemoveFeature)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               difference)
                                                              (("2"
                                                                (decompose-equality
                                                                 -10)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("2"
                                                                    (expand
                                                                     member)
                                                                    (("2"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         evalCK)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         evalCK)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (inst 1 an)
                                    (("2"
                                      (expand syntaxRemoveFeature)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (expand difference)
                                          (("1"
                                            (decompose-equality -8)
                                            (("1"
                                              (inst -1 "(an,x!1)")
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (bddsimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand eval)
                                          (("2"
                                            (expand assetsCK)
                                            (("2"
                                              (skolem -1 i)
                                              (("2"
                                                (inst 1 i)
                                                (("2"
                                                  (expand difference)
                                                  (("2"
                                                    (decompose-equality
                                                     -9)
                                                    (("2"
                                                      (inst -1 i)
                                                      (("2"
                                                        (expand evalCK)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((itsNotIncluded formula-decl nil SPLPartialRefTemplates nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Configuration type-eq-decl nil Name nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (difference const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (pairsNotIncluded formula-decl nil SPLPartialRefTemplates nil))
   shostak))
 (removeFeaturePartRefStrong_TCC1 0
  (removeFeaturePartRefStrong_TCC1-1 nil 3657619514
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (bddsimp)
      (("1" (expand predRemoveFeature)
        (("1" (flatten)
          (("1" (expand "<>")
            (("1" (decompose-equality -3)
              (("1" (expand subset?)
                (("1" (skolem 1 c)
                  (("1" (inst -1 c)
                    (("1" (expand member)
                      (("1" (bddsimp)
                        (("1" (expand semantics)
                          (("1" (expand syntaxRemoveFeature)
                            (("1" (flatten)
                              (("1"
                                (expand removeFeature)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand satImpConsts)
                                    (("1"
                                      (expand satExpConsts)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skolem 1 f)
                                          (("1"
                                            (expand filterFormulae)
                                            (("1"
                                              (decompose-equality -5)
                                              (("1"
                                                (inst -1 f)
                                                (("1"
                                                  (expand member)
                                                  (("1"
                                                    (inst -4 f)
                                                    (("1"
                                                      (bddsimp)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem 1 n)
                                          (("2"
                                            (inst -2 n)
                                            (("2"
                                              (expand remove)
                                              (("2"
                                                (decompose-equality -6)
                                                (("2"
                                                  (inst -1 n)
                                                  (("2"
                                                    (expand member)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (expand
                                                         satisfies)
                                                        (("2"
                                                          (expand
                                                           satisfies)
                                                          (("2"
                                                            (inst 3 n)
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset?)
        (("2" (expand predRemoveFeature)
          (("2" (skolem 1 c)
            (("2" (expand member)
              (("2" (flatten)
                (("2" (expand "<>")
                  (("2" (decompose-equality -3)
                    (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (filterFormulae const-decl "set[Formula_]" SPLPartialRefTemplates
     nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (removeFeature const-decl "bool" SPLPartialRefTemplates nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (predRemoveFeature const-decl "bool" SPLPartialRefTemplates nil))
   nil))
 (removeFeaturePartRefStrong 0
  (removeFeaturePartRefStrong-1 nil 3657619515
   ("" (skolem 1 (pl pl2 s its pairs P Q))
    (("" (lemma removeFeatureSameProducts)
      (("" (inst -1 pl pl2 s its pairs P Q)
        (("" (bddsimp)
          (("" (expand strongPartialRefinement)
            (("" (skolem 1 c)
              (("" (inst -2 c)
                (("" (bddsimp)
                  (("" (use SPLrefinement.assetRefinement)
                    (("" (expand preorder?)
                      (("" (flatten)
                        (("" (expand reflexive?)
                          (("" (replace -5 1)
                            (("" (inst -1 "prod(pl2, c)") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (removeFeatureSameProducts formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (removeFeaturePartRefWeak_TCC1 0
  (removeFeaturePartRefWeak_TCC1-1 nil 3657619492
   ("" (skolem 1 (pl pl2 m its pairs P Q))
    (("" (bddsimp)
      (("1" (expand predRemoveFeature)
        (("1" (flatten)
          (("1" (lemma "maps_identity[Configuration].sameDomImg")
            (("1" (inst -1 m)
              (("1" (bddsimp)
                (("1" (replace -2 1 RL)
                  (("1" (expand "<>")
                    (("1" (decompose-equality -5)
                      (("1" (expand subset?)
                        (("1" (skolem 1 c)
                          (("1" (inst -1 c)
                            (("1" (expand member)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand syntaxRemoveFeature)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand semantics)
                                      (("1"
                                        (expand satisfies)
                                        (("1"
                                          (expand satisfies)
                                          (("1"
                                            (expand satImpConsts)
                                            (("1"
                                              (expand satExpConsts)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (skolem 2 f)
                                                  (("1"
                                                    (inst -3 f)
                                                    (("1"
                                                      (expand
                                                       removeFeature)
                                                      (("1"
                                                        (expand
                                                         filterFormulae)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (decompose-equality
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               f)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skolem 2 n)
                                                  (("2"
                                                    (inst -2 n)
                                                    (("2"
                                                      (expand
                                                       removeFeature)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           remove)
                                                          (("2"
                                                            (decompose-equality
                                                             -7)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               n)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 n)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (bddsimp)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset?)
        (("2" (expand predRemoveFeature)
          (("2" (flatten)
            (("2" (skolem 1 c)
              (("2" (expand member)
                (("2" (expand "<>")
                  (("2" (decompose-equality -4)
                    (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (syntaxRemoveFeature const-decl "bool" SPLPartialRefTemplates nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (removeFeature const-decl "bool" SPLPartialRefTemplates nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (names def-decl "set[Name]" FormulaTheory nil)
    (filterFormulae const-decl "set[Formula_]" SPLPartialRefTemplates
     nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (subset? const-decl "bool" sets nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (sameDomImg formula-decl nil maps_identity nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (predRemoveFeature const-decl "bool" SPLPartialRefTemplates nil))
   nil))
 (removeFeaturePartRefWeak 0
  (removeFeaturePartRefWeak-1 nil 3657619841
   ("" (skolem 1 (pl pl2 m its pairs P Q))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (lemma removeFeaturePartRefStrong)
          (("" (inst -1 pl pl2 "domain(m)" its pairs P Q)
            (("" (bddsimp)
              (("" (expand strongPartialRefinement)
                (("" (skolem 1 c)
                  (("" (inst -2 c)
                    (("" (expand identity?)
                      (("" (inst -3 c)
                        (("" (replace -3 1) (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (identity? const-decl "bool" maps_identity nil)
    (removeFeaturePartRefStrong formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (addAssetsSameProducts 0
  (addAssetsSameProducts-3 nil 3658743157
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (expand semantics)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand map)
                    (("" (decompose-equality)
                      (("" (bddsimp)
                        (("1" (skolem -1 an)
                          (("1" (inst 1 an)
                            (("1" (expand syntaxAddAssets)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand overw)
                                  (("1"
                                    (expand union)
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (inst -1 "(an,x!1)")
                                        (("1"
                                          (expand member)
                                          (("1"
                                            (expand
                                             conditionsAddAssets)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand eval)
                                                (("1"
                                                  (expand assetsCK)
                                                  (("1"
                                                    (skolem -3 i)
                                                    (("1"
                                                      (inst 1 i)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (inst -1 i)
                                                            (("1"
                                                              (expand
                                                               evalCK)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand eval)
                                                (("2"
                                                  (expand assetsCK)
                                                  (("2"
                                                    (skolem -3 i)
                                                    (("2"
                                                      (inst 1 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           evalCK)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand remove)
                                                (("3"
                                                  (expand eval)
                                                  (("3"
                                                    (expand assetsCK)
                                                    (("3"
                                                      (skolem -1 i)
                                                      (("3"
                                                        (expand evalCK)
                                                        (("3"
                                                          (decompose-equality)
                                                          (("3"
                                                            (inst -1 i)
                                                            (("3"
                                                              (bddsimp)
                                                              (("3"
                                                                (expand
                                                                 domain)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem -1 an)
                          (("2" (inst 1 an)
                            (("2" (expand syntaxAddAssets)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand overw)
                                  (("2"
                                    (expand union)
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (inst -1 "(an,x!1)")
                                        (("2"
                                          (expand member)
                                          (("2"
                                            (expand remove)
                                            (("2"
                                              (expand eval)
                                              (("2"
                                                (expand assetsCK)
                                                (("2"
                                                  (expand domain)
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (skolem -3 i)
                                                      (("1"
                                                        (inst 1 i)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             evalCK)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "mapping" maps nil)
    (overw const-decl "mapping" maps nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   nil)
  (addAssetsSameProducts-2 nil 3658743094
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand "<>")
          (("" (decompose-equality)
            (("" (inst -1 c)
              (("" (bddsimp)
                (("" (expand semantics)
                  (("" (expand map)
                    (("" (decompose-equality)
                      (("" (bddsimp)
                        (("1" (skolem -1 an)
                          (("1" (inst 1 an)
                            (("1" (expand syntaxAddAssets)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand overw)
                                  (("1"
                                    (expand union)
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (inst -1 "(an,x!1)")
                                        (("1"
                                          (expand member)
                                          (("1"
                                            (expand
                                             conditionsAddAssets)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (expand eval)
                                                (("1"
                                                  (expand assetsCK)
                                                  (("1"
                                                    (skolem -3 i)
                                                    (("1"
                                                      (inst 1 i)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (inst -1 i)
                                                            (("1"
                                                              (expand
                                                               evalCK)
                                                              (("1"
                                                                (bddsimp)
                                                                nil)))))))))))))))))
                                               ("2"
                                                (expand eval)
                                                (("2"
                                                  (expand assetsCK)
                                                  (("2"
                                                    (skolem -3 i)
                                                    (("2"
                                                      (inst 1 i)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand
                                                           evalCK)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("2"
                                                                (bddsimp)
                                                                nil)))))))))))))))))
                                               ("3"
                                                (expand remove)
                                                (("3"
                                                  (expand eval)
                                                  (("3"
                                                    (expand assetsCK)
                                                    (("3"
                                                      (skolem -1 i)
                                                      (("3"
                                                        (inst -8 i)
                                                        (("3"
                                                          (inst -6 i)
                                                          (("3"
                                                            (expand
                                                             evalCK)
                                                            (("3"
                                                              (decompose-equality)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 i)
                                                                (("3"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand*
                                                                     empty?
                                                                     intersection)
                                                                    (("1"
                                                                      (inst
                                                                       -10
                                                                       an)
                                                                      (("1"
                                                                        (expand
                                                                         member)
                                                                        (("1"
                                                                          (expand
                                                                           domain)
                                                                          (("1"
                                                                            (expand
                                                                             getRS)
                                                                            (("1"
                                                                              (bddsimp)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (expand*
                                                                     empty?
                                                                     intersection)
                                                                    (("2"
                                                                      (inst
                                                                       -10
                                                                       an)
                                                                      (("2"
                                                                        (expand
                                                                         member)
                                                                        (("2"
                                                                          (expand
                                                                           getRS)
                                                                          (("2"
                                                                            (expand
                                                                             domain)
                                                                            (("2"
                                                                              (bddsimp)
                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (skolem -1 an)
                          (("2" (inst 1 an)
                            (("2" (expand syntaxAddAssets)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand overw)
                                  (("2"
                                    (expand union)
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (inst -1 "(an,x!1)")
                                        (("2"
                                          (expand member)
                                          (("2"
                                            (expand remove)
                                            (("2"
                                              (expand eval)
                                              (("2"
                                                (expand assetsCK)
                                                (("2"
                                                  (expand domain)
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (skolem -3 i)
                                                      (("1"
                                                        (inst 1 i)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             evalCK)
                                                            (("1"
                                                              (inst
                                                               -8
                                                               i)
                                                              (("1"
                                                                (decompose-equality
                                                                 -9)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("1"
                                                                    (bddsimp)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))))))))))))))
                                                     ("2" (grind) nil)
                                                     ("3"
                                                      (grind)
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (addAssetsSameProducts-1 nil 3657621414
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (expand prod)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand semantics)
                    (("" (expand map)
                      (("" (decompose-equality)
                        (("" (bddsimp)
                          (("1" (skolem -1 an)
                            (("1" (inst 1 an)
                              (("1"
                                (expand syntaxAddAssets)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand overw)
                                    (("1"
                                      (expand union)
                                      (("1"
                                        (decompose-equality)
                                        (("1"
                                          (inst -1 "(an,x!1)")
                                          (("1"
                                            (expand member)
                                            (("1"
                                              (expand
                                               conditionsAddAssets)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (expand eval)
                                                  (("1"
                                                    (expand assetsCK)
                                                    (("1"
                                                      (skolem -3 i)
                                                      (("1"
                                                        (inst 1 i)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("1"
                                                                (expand
                                                                 evalCK)
                                                                (("1"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand eval)
                                                  (("2"
                                                    (expand assetsCK)
                                                    (("2"
                                                      (skolem -3 i)
                                                      (("2"
                                                        (inst 1 i)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (expand
                                                             evalCK)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 i)
                                                                (("2"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand remove)
                                                  (("3"
                                                    (expand eval)
                                                    (("3"
                                                      (expand assetsCK)
                                                      (("3"
                                                        (skolem -1 i)
                                                        (("3"
                                                          (inst -8 i)
                                                          (("3"
                                                            (inst -6 i)
                                                            (("3"
                                                              (expand
                                                               evalCK)
                                                              (("3"
                                                                (decompose-equality)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   i)
                                                                  (("3"
                                                                    (bddsimp)
                                                                    (("1"
                                                                      (expand*
                                                                       empty?
                                                                       intersection)
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         an)
                                                                        (("1"
                                                                          (expand
                                                                           member)
                                                                          (("1"
                                                                            (expand
                                                                             domain)
                                                                            (("1"
                                                                              (expand
                                                                               getRS)
                                                                              (("1"
                                                                                (bddsimp)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand*
                                                                       empty?
                                                                       intersection)
                                                                      (("2"
                                                                        (inst
                                                                         -10
                                                                         an)
                                                                        (("2"
                                                                          (expand
                                                                           member)
                                                                          (("2"
                                                                            (expand
                                                                             getRS)
                                                                            (("2"
                                                                              (expand
                                                                               domain)
                                                                              (("2"
                                                                                (bddsimp)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem -1 an)
                            (("2" (inst 1 an)
                              (("2"
                                (expand syntaxAddAssets)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand overw)
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (inst -1 "(an,x!1)")
                                          (("2"
                                            (expand member)
                                            (("2"
                                              (expand remove)
                                              (("2"
                                                (expand eval)
                                                (("2"
                                                  (expand assetsCK)
                                                  (("2"
                                                    (expand domain)
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (skolem -3 i)
                                                        (("1"
                                                          (inst 1 i)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand
                                                               evalCK)
                                                              (("1"
                                                                (inst
                                                                 -8
                                                                 i)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -9)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     i)
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (restrict const-decl "R" restrict nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Asset nonempty-type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "mapping" maps nil)
    (overw const-decl "mapping" maps nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (addAssetsPartRefStrong_TCC1 0
  (addAssetsPartRefStrong_TCC1-1 nil 3657621413
   ("" (skolem 1 (pl am2 ck2 s its pairs pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -6 1)
                (("" (expand semantics)
                  (("" (lemma addAssetsSameProducts)
                    (("" (inst -1 pl am2 ck2 s its pairs)
                      (("" (bddsimp)
                        (("" (expand syntaxAddAssets)
                          (("" (bddsimp)
                            (("1" (inst -4 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -4 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -8 c)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -9 -7)
                              (("2"
                                (expand "<>")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (overw const-decl "mapping" maps nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset? const-decl "bool" sets nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (addAssetsSameProducts formula-decl nil SPLPartialRefTemplates nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (addAssetsPartRefStrong_TCC2 0
  (addAssetsPartRefStrong_TCC2-1 nil 3659805237
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (union const-decl "set" sets nil)
    (remove const-decl "mapping" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (injective? const-decl "bool" functions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (overw const-decl "mapping" maps nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset? const-decl "bool" sets nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil))
   nil))
 (addAssetsPartRefStrong 0
  (addAssetsPartRefStrong-1 nil 3657626188
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (use addAssetsSameProducts)
      (("" (expand strongPartialRefinement)
        (("" (bddsimp)
          (("" (skolem 1 c)
            (("" (bddsimp)
              (("" (expand prod)
                (("" (use SPLrefinement.assetRefinement)
                  (("" (expand preorder?)
                    (("" (flatten)
                      (("" (expand reflexive?)
                        (("" (inst -1 "(semantics(ck2)(am2)(c))")
                          (("" (expand "<>")
                            (("" (expand syntaxAddAssets)
                              ((""
                                (bddsimp)
                                ((""
                                  (inst -7 c)
                                  ((""
                                    (bddsimp)
                                    ((""
                                      (replace -8 1)
                                      (("" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (addAssetsSameProducts formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (addAssetsPartRefWeak_TCC1 0
  (addAssetsPartRefWeak_TCC1-1 nil 3659808577
   ("" (lemma addAssetsPartRefStrong_TCC1)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp) nil nil)) nil))
      nil))
    nil)
   ((CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (addAssetsPartRefStrong_TCC1 subtype-tcc nil SPLPartialRefTemplates
     nil))
   nil))
 (addAssetsPartRefWeak_TCC2 0
  (addAssetsPartRefWeak_TCC2-1 nil 3659808577
   ("" (lemma addAssetsPartRefStrong_TCC2)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp)
          (("" (expand image)
            (("" (expand subset?)
              (("" (skolem 1 c)
                (("" (expand member)
                  (("" (inst -7 c)
                    (("" (expand domain)
                      (("" (bddsimp)
                        (("" (skolem -8 l)
                          (("" (expand identity?)
                            (("" (inst -7 l)
                              ((""
                                (lemma
                                 "maps[Configuration,Configuration].getRightResult")
                                ((""
                                  (inst -1 m c l)
                                  ((""
                                    (bddsimp)
                                    ((""
                                      (replace -2 -9)
                                      ((""
                                        (inst 1 c)
                                        ((""
                                          (replace -9 -1 RL)
                                          (("" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (getRightResult formula-decl nil maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (addAssetsPartRefStrong_TCC2 subtype-tcc nil SPLPartialRefTemplates
     nil))
   nil))
 (addAssetsPartRefWeak 0
  (addAssetsPartRefWeak-1 nil 3659808578
   ("" (lemma addAssetsPartRefStrong)
    (("" (skolem 1 (pl am2 ck2 m its pairs))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs)
        (("" (expand syntaxAddAssets)
          (("" (bddsimp)
            ((""
              (expand* strongPartialRefinement weakPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -6 c)
                  (("" (expand identity?)
                    (("" (inst -7 c)
                      (("" (replace -7 1) (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((addAssetsPartRefStrong formula-decl nil SPLPartialRefTemplates
     nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (identity? const-decl "bool" maps_identity nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil))
   shostak))
 (removeAssetsSameProducts 0
  (removeAssetsSameProducts-2 nil 3659806857
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (expand syntaxAddAssets)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand semantics)
                    (("" (expand map)
                      (("" (decompose-equality)
                        (("" (expand eval)
                          (("" (expand assetsCK)
                            (("" (expand evalCK)
                              ((""
                                (expand overw)
                                ((""
                                  (expand union)
                                  ((""
                                    (decompose-equality)
                                    ((""
                                      (expand member)
                                      ((""
                                        (expand domain)
                                        ((""
                                          (decompose-equality)
                                          ((""
                                            (bddsimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skolem -1 an2)
                                              (("2"
                                                (inst 1 an2)
                                                (("2"
                                                  (bddsimp)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "(an2,x!1)")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         conditionsAddAssets)
                                                        (("1"
                                                          (expand
                                                           remove)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               i)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (overw const-decl "mapping" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (remove const-decl "mapping" maps nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (union const-decl "set" sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil))
   nil)
  (removeAssetsSameProducts-1 nil 3657634675
   ("" (skolem 1 (pl am2 ck2 s its pairs))
    (("" (expand prod)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (expand "<>")
            (("" (decompose-equality)
              (("" (inst -1 c)
                (("" (bddsimp)
                  (("" (expand semantics)
                    (("" (expand map)
                      (("" (decompose-equality)
                        (("" (bddsimp)
                          (("1" (skolem -1 an)
                            (("1" (flatten)
                              (("1"
                                (expand eval)
                                (("1"
                                  (expand assetsCK)
                                  (("1"
                                    (skolem -1 i)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand evalCK)
                                        (("1"
                                          (inst 1 an)
                                          (("1"
                                            (expand syntaxAddAssets)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand overw)
                                                (("1"
                                                  (expand union)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(an,x!1)")
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (expand
                                                           domain)
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               i)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("5"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("6"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("7"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("8"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem -1 an)
                            (("2" (inst 1 an)
                              (("2"
                                (expand syntaxAddAssets)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand overw)
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (expand eval)
                                            (("2"
                                              (expand assetsCK)
                                              (("2"
                                                (skolem -3 i)
                                                (("2"
                                                  (inst -1 i)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "(an,x!1)")
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (expand remove)
                                                        (("2"
                                                          (expand
                                                           domain)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 i)
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (expand
                                                                     evalCK)
                                                                    (("1"
                                                                      (bddsimp)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 evalCK)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 evalCK)
                                                                (("3"
                                                                  (bddsimp)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("5"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("6"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("7"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("8"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("9"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (overw const-decl "mapping" maps nil)
    (remove const-decl "mapping" maps nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (union const-decl "set" sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil))
   shostak))
 (removeAssetsPartRefStrong_TCC1 0
  (removeAssetsPartRefStrong_TCC1-1 nil 3657634542
   ("" (skolem 1 (pl am2 ck2 s its pairs pl2))
    (("" (bddsimp)
      (("" (typepred pl)
        (("" (expand wfPL)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (replace -6 1)
                (("" (expand semantics)
                  (("" (bddsimp)
                    (("" (lemma removeAssetsSameProducts)
                      (("" (inst -1 pl am2 ck2 s its pairs)
                        (("" (expand syntaxAddAssets)
                          (("" (bddsimp)
                            (("1" (inst -5 c)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand semantics)
                                  (("1"
                                    (replace -5 1 RL)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -8 c)
                                  (("2"
                                    (replace -9 -8)
                                    (("2"
                                      (bddsimp)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand semantics)
                              (("2"
                                (replace -9 -8)
                                (("2"
                                  (expand map)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((removeAssetsSameProducts formula-decl nil SPLPartialRefTemplates
     nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (overw const-decl "mapping" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil))
   nil))
 (removeAssetsPartRefStrong_TCC2 0
  (removeAssetsPartRefStrong_TCC2-1 nil 3659807377
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (restrict const-decl "R" restrict nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<> const-decl "set[Configuration]" SPLPartialRefTemplates nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (getRS const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (union const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (overw const-decl "mapping" maps nil)
    (syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (subset? const-decl "bool" sets nil)
    (conditionsAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil))
   nil))
 (removeAssetsPartRefStrong 0
  (removeAssetsPartRefStrong-1 nil 3657634543
   ("" (lemma removeAssetsSameProducts)
    (("" (skolem 1 (pl am2 ck2 s its pairs))
      (("" (inst -1 pl am2 ck2 s its pairs)
        (("" (expand syntaxAddAssets)
          (("" (bddsimp)
            (("" (expand strongPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -6 c)
                  (("" (expand prod)
                    (("" (bddsimp)
                      (("" (replace -7 1)
                        (("" (lemma SPLrefinement.assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand reflexive?)
                                ((""
                                  (inst -1 "semantics(ck2)(am2)(c)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (removeAssetsSameProducts formula-decl nil SPLPartialRefTemplates
     nil))
   shostak))
 (removeAssetsPartRefWeak_TCC1 0
  (removeAssetsPartRefWeak_TCC1-1 nil 3659808943
   ("" (lemma removeAssetsPartRefStrong_TCC1)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp) nil nil)) nil))
      nil))
    nil)
   ((CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (removeAssetsPartRefStrong_TCC1 subtype-tcc nil
     SPLPartialRefTemplates nil))
   nil))
 (removeAssetsPartRefWeak_TCC2 0
  (removeAssetsPartRefWeak_TCC2-1 nil 3659808943
   ("" (lemma removeAssetsPartRefStrong_TCC2)
    (("" (skolem 1 (pl am2 ck2 m its pairs pl2))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs pl2)
        (("" (bddsimp)
          (("" (expand subset?)
            (("" (skolem 1 c)
              (("" (expand member)
                (("" (expand image)
                  (("" (inst -7 c)
                    (("" (bddsimp)
                      (("" (expand domain)
                        (("" (skolem -8 l)
                          (("" (expand identity?)
                            (("" (inst -7 l)
                              ((""
                                (lemma
                                 "maps[Configuration,Configuration].getRightResult")
                                ((""
                                  (inst -1 m c l)
                                  ((""
                                    (bddsimp)
                                    ((""
                                      (replace -2 -9)
                                      ((""
                                        (inst 1 c)
                                        ((""
                                          (replace -9 -1 RL)
                                          (("" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((image const-decl "finite_sets[T].finite_set" maps nil)
    (dom const-decl "set[S]" maps nil)
    (getRightResult formula-decl nil maps nil)
    (identity? const-decl "bool" maps_identity nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (removeAssetsPartRefStrong_TCC2 subtype-tcc nil
     SPLPartialRefTemplates nil))
   nil))
 (removeAssetsPartRefWeak 0
  (removeAssetsPartRefWeak-1 nil 3659808943
   ("" (lemma removeAssetsPartRefStrong)
    (("" (skolem 1 (pl am2 ck2 m its pairs))
      (("" (inst -1 pl am2 ck2 "domain(m)" its pairs)
        (("" (expand syntaxAddAssets)
          (("" (bddsimp)
            ((""
              (expand* strongPartialRefinement weakPartialRefinement)
              (("" (skolem 1 c)
                (("" (inst -6 c)
                  (("" (expand identity?)
                    (("" (inst -7 c)
                      (("" (replace -7 1) (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxAddAssets const-decl "bool" SPLPartialRefTemplates nil)
    (weakPartialRefinement const-decl "bool" SPLPartialRefinementWeak
     nil)
    (strongPartialRefinement const-decl "bool"
     SPLPartialRefinementStrong nil)
    (identity? const-decl "bool" maps_identity nil)
    (CM type-eq-decl nil SPLPartialRefinementWeak nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (restrict const-decl "R" restrict nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFFM const-decl "bool" FeatureModelSemantics nil)
    (FFM type-eq-decl nil FeatureModel nil)
    (finite_fm const-decl "bool" FeatureModel nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (removeAssetsPartRefStrong formula-decl nil SPLPartialRefTemplates
     nil))
   shostak)))

