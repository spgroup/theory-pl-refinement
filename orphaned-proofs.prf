("SPLrefinement" SPLrefinement assetmapRefinement 0 (assetmapRefinement-1 nil 3506978511 3506978827 ("" (expand preorder?) (("" (expand* reflexive? transitive?) (("" (expand "|>") (("" (bddsimp) (("1" (skolem 1 (x y z)) (("1" (flatten) (("1" (assert) (("1" (skolem 1 an) (("1" (flatten) (("1" (instantiate -2 an) (("1" (assert) (("1" (skolem -2 (a1 a2)) (("1" (flatten) (("1" (instantiate -6 an) (("1" (assert) (("1" (skolem -6 (a3 a4)) (("1" (flatten) (("1" (typepred y) (("1" (expand unique) (("1" (instantiate -2 (an a2 a3)) (("1" (assert) (("1" (replace -2) (("1" (use assetRefinement) (("1" (expand preorder?) (("1" (expand transitive?) (("1" (flatten) (("1" (instantiate -2 (a1 a3 a4)) (("1" (assert) (("1" (instantiate 1 (a1 a4)) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 x) (("2" (skolem 1 an) (("2" (flatten) (("2" (expand dom) (("2" (skolem -1 a) (("2" (instantiate 1 (a a)) (("2" (assert) (("2" (use assetRefinement) (("2" (expand* preorder? reflexive?) (("2" (flatten) (("2" (instantiate -1 a) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unchecked ((transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (AM type-eq-decl nil SPLrefinement nil) (unique const-decl "bool" maps nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (Asset type-decl nil SPLrefinement nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (assetRefinement formula-decl nil SPLrefinement nil) (nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (AssetName type-decl nil SPLrefinement nil) (dom const-decl "set[S]" maps nil) (\|> const-decl "bool" SPLrefinement nil) (preorder? const-decl "bool" orders nil)) 315893 200 t shostak))("SPLrefinement" SPLrefinement products_TCC1 0 (products_TCC1-1 nil 3579944930 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("SPLrefinement" SPLrefinement testeConfs2 0 (testeConfs2-1 nil 3579949934 3579950120 ("" (skolem 1 (mpl pl1 pl2 fm1 fm2 c1 c2 c3)) (("" (flatten) (("" (expand add +) (("" (expand member) (("" (expand emptyset) (("" (replace -4) (("" (replace -5) (("" (expand* union singleton member) (("" (expand confs) (("" (expand member) (("" (replace -1) (("" (assert) (("" (decompose-equality 1) (("" (bddsimp) (("1" (skolem -1 pl) (("1" (expand confs) (("1" (expand member) (("1" (bddsimp) (("1" (replace -1) (("1" (replace -2) (("1" (replace -4) (("1" (replace -6) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (replace -2) (("2" (replace -5) (("2" (replace -7) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (instantiate 1 pl2) (("2" (expand confs) (("2" (replace -4) (("2" (replace -6) (("2" (expand member) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (instantiate 1 pl1) (("3" (replace -1 1 RL) (("3" (expand* confs member) (("3" (replace -3) (("3" (replace -5) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (union const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (Conf type-decl nil SPLrefinement nil) (confs const-decl "set[Conf]" SPLrefinement nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PL type-eq-decl nil SPLrefinement nil) (wfPL const-decl "bool" SPLrefinement nil) (ArbitrarySPL type-eq-decl nil SPLrefinement nil) (CK type-decl nil SPLrefinement nil) (FM type-decl nil SPLrefinement nil) (AM type-eq-decl nil SPLrefinement nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (confs const-decl "set[set[Conf]]" SPLrefinement nil) (emptyset const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil)) 186832 130 t shostak))("SPLrefinement" SPLrefinement testeConfs 0 (testeConfs-1 nil 3579948929 3579949268 ("" (skolem 1 (mpl pl1 pl2 fm1 fm2 c1 c2)) (("" (flatten) (("" (expand extend) (("" (expand confs) (("" (decompose-equality 1) (("" (bddsimp) (("1" (expand member) (("1" (expand* add union singleton member) (("1" (flatten) (("1" (expand emptyset) (("1" (replace -2) (("1" (assert) (("1" (skolem -1 pl) (("1" (bddsimp) (("1" (assert) (("1" (replace -2) (("1" (expand confs) (("1" (expand member) (("1" (replace -1) (("1" (replace -4) (("1" (replace -6) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -2) (("2" (replace -1) (("2" (expand confs) (("2" (replace -5) (("2" (replace -7) (("2" (expand member) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand member) (("2" (replace -2) (("2" (expand* union singleton member) (("2" (skolem -1 pl) (("2" (bddsimp) (("1" (replace -1) (("1" (replace -2) (("1" (expand confs) (("1" (expand member) (("1" (replace -4) (("1" (replace -6) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (replace -2) (("2" (expand confs) (("2" (replace -5) (("2" (replace -7) (("2" (expand member) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand member) (("3" (replace -3) (("3" (expand union +) (("3" (expand singleton +) (("3" (expand member) (("3" (expand* add union singleton emptyset member) (("3" (expand confs) (("3" (expand member) (("3" (bddsimp) (("1" (instantiate 1 pl2) (("1" (assert) (("1" (replace -5) (("1" (replace -7) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (instantiate 1 pl1) (("2" (replace -4) (("2" (replace -6) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unchecked ((confs const-decl "set[set[Conf]]" SPLrefinement nil) (union const-decl "set" sets nil) (Conf type-decl nil SPLrefinement nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton? const-decl "bool" sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil (= const-decl "[T, T -> boolean]" equalities nil) (MPL type-eq-decl nil SPLrefinement nil) (finite_set type-eq-decl nil finite_sets nil) (Constraints nonempty-type-decl nil SPLrefinement nil) (member const-decl "bool" sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PL type-eq-decl nil SPLrefinement nil) (wfPL const-decl "bool" SPLrefinement nil) (ArbitrarySPL type-eq-decl nil SPLrefinement nil) (CK type-decl nil SPLrefinement nil) (FM type-decl nil SPLrefinement nil) (AM type-eq-decl nil SPLrefinement nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (nonempty_finite_union2 application-judgement "non_empty_finite_set" finite_sets nil) (finite_union application-judgement "finite_set" finite_sets nil) (nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (extend const-decl "R" extend nil)) 338599 220 t shostak))("SPLrefinement" SPLrefinement products_TCC1 0 (products_TCC1-1 nil 3579944930 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("SPLrefinement" SPLrefinement filter_TCC1 0 (filter_TCC1-1 nil 3579886394 3579947773 ("" (skolem 1 (cs c)) (("" (typepred cs) (("" (expand member) (("" (case "empty?(cs)") (("1" (lemma "sets_lemmas[set[CP]].emptyset_is_empty?") (("1" (instantiate -1 cs) (("1" (assert) (("1" (replace -1) (("1" (lemma "sets_lemmas[set[CP]].empty_no_members") (("1" (expand member) (("1" (expand emptyset 1) (("1" (expand emptyset -2) (("1" (replace -2 1 RL) (("1" (lemma "finite_sets[set[CP]].finite_emptyset") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 286567 90 t nil))("SPLrefinement" SPLrefinement combinations_TCC1 0 (combinations_TCC1-1 nil 3579886394 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))