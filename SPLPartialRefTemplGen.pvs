SPLPartialRefTemplGen: THEORY
BEGIN

IMPORTING SPLpartialrefinement

pl,pl2,pl3: VAR PL
aSet: VAR finite_sets[Asset].finite_set
am,am1,am2,pairs: VAR SPLrefinement.AM
a,a1,a2: VAR Asset
an: VAR AssetName
anSet: VAR set[AssetName]
s: VAR set[Conf]
c: VAR Conf


% Restriction Operator
<>: [PL, set[AssetName] -> set[Conf]]


%---------------------------------------------------------------------------------------------------------------------------------------
%---------------------------------------------CHANGE ASSET------------------------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------------------------

syntaxChangeAsset(am1,am2,pairs,a1,a2,an):bool =
      am1=union((an,a1),pairs) AND
      am2=union((an,a2),pairs) 

sameEvalPairs: AXIOM
    FORALL pl,am2,pairs,a1,a2,an,s : (syntaxChangeAsset(A(pl),am2,pairs,a1,a2,an) AND s = (<>(pl, singleton(an)))) 
                 =>  
                FORALL c: s(c) => (([| K(pl) |] (A(pl))) (c))  =  (([| K(pl) |] (pairs)) (c)) 

sameEvalPairs2: AXIOM 
    FORALL pl,am2,pairs,a1,a2,an,s : (syntaxChangeAsset(A(pl),am2,pairs,a1,a2,an) AND s = (<>(pl, singleton(an)))) 
                 =>  
                FORALL c: s(c) => (([| K(pl) |] (am2)) (c))  =  (([| K(pl) |] (pairs)) (c)) 

changeAssetStrong: THEOREM
    FORALL(pl,am2,pairs,a1,a2,an,s):
    (
      (
        syntaxChangeAsset(A(pl),am2,pairs,a1,a2,an) AND
        s = <>(pl,singleton(an))
      )
      =>
        strongPartialRefinement(pl,pl2,s)
    )  WHERE pl2=(# F:=F(pl), A:=am2, K:=K(pl) #)

END SPLPartialRefTemplGen

