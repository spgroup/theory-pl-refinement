(SPLpartialrefinement
 (prod_TCC1 0
  (prod_TCC1-1 nil 3655135094
   ("" (skolem 1 (pl s))
    (("" (expand member)
      (("" (lemma finite_semantics)
        (("" (inst -1 "F(pl)") (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (weakPartialRefinement_TCC1 0
  (weakPartialRefinement_TCC1-1 nil 3656408682
   ("" (skolem 1 (pl1 pl2 m c))
    (("" (expand* domain dom) (("" (bddsimp) nil nil)) nil)) nil)
   ((dom const-decl "set[S]" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil))
   nil))
 (weakPartialRefinementAlt_TCC1 0
  (weakPartialRefinementAlt_TCC1-1 nil 3658089002
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (typepred s)
      (("" (lemma finite_semantics)
        (("" (inst -1 "F(pl1)")
          (("" (lemma finite_sets[Conf].finite_subset)
            (("" (inst -1 "{||}(F(pl1))" "s") (("" (bddsimp) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pl1 skolem-const-decl
     "{x: [# A: AM[Conf], F: FM, K: CK #] | wfPL[Conf](x)}"
     SPLpartialrefinement nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_semantics formula-decl nil SPLRefinementFiniteFM nil))
   nil))
 (weakPartialRefinementAlt_TCC2 0
  (weakPartialRefinementAlt_TCC2-1 nil 3658089002
   ("" (skolem 1 (pl1 pl2 s t p1))
    (("" (bddsimp)
      (("" (typepred t)
        (("" (lemma finite_semantics)
          (("" (inst -1 "F(pl2)")
            (("" (lemma finite_sets[Conf].finite_subset)
              (("" (inst -1 "{||}(F(pl2))" t) (("" (bddsimp) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_semantics formula-decl nil SPLRefinementFiniteFM nil)
    (finite_subset formula-decl nil finite_sets nil)
    (pl2 skolem-const-decl
     "{x: [# A: AM[Conf], F: FM, K: CK #] | wfPL[Conf](x)}"
     SPLpartialrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (strongPartRefReflexive 0
  (strongPartRefReflexive-1 nil 3655065337
   ("" (skolem 1 (x s))
    (("" (expand strongPartialRefinement)
      (("" (skolem 1 c)
        (("" (use assetRefinement)
          (("" (expand preorder?)
            (("" (flatten)
              (("" (expand reflexive?)
                (("" (inst -1 "prod(x, c)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (strongPartRefTransitive_TCC1 0
  (strongPartRefTransitive_TCC1-1 nil 3656875987
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (bddsimp)
      (("1" (typepred s)
        (("1" (typepred t)
          (("1" (expand intersection)
            (("1" (expand member)
              (("1" (expand subset?)
                (("1" (skolem 1 c)
                  (("1" (expand member)
                    (("1" (inst -2 c) (("1" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred s)
        (("2" (typepred t)
          (("2" (expand intersection)
            (("2" (expand subset?)
              (("2" (expand member)
                (("2" (skolem 1 c)
                  (("2" (inst -3 c) (("2" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (strongPartRefTransitive 0
  (strongPartRefTransitive-1 nil 3655065416
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (prop)
      (("" (expand strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (expand intersection)
                (("" (expand member)
                  (("" (prop)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand transitive?)
                            ((""
                              (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                               "prod(pl3,c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (intersection const-decl "set" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil))
   shostak))
 (weakPartRefReflexive 0
  (weakPartRefReflexive-1 nil 3655065773
   ("" (skolem 1 (pl map))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (expand identity?)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (bddsimp)
                (("" (use assetRefinement)
                  (("" (expand preorder?)
                    (("" (flatten)
                      (("" (expand reflexive?)
                        (("" (inst -1 "prod(pl,c)")
                          (("" (replace -3 1) (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (identity? const-decl "bool" maps_identity nil))
   shostak))
 (weakPartRefTransitive_TCC1 0
  (weakPartRefTransitive_TCC1-1 nil 3656875987
   ("" (skolem 1 (pl1 pl2 pl3 m n q))
    (("" (bddsimp)
      (("1" (lemma "maps_composite[Conf,Conf,Conf].imgCompos")
        (("1" (inst -1 m n)
          (("1" (bddsimp)
            (("1" (typepred n)
              (("1" (hide (-1 -2 -3))
                (("1" (replace -3 -1 RL)
                  (("1" (replace -6 -1 RL) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "maps_composite[Conf,Conf,Conf].domCompos")
        (("2" (inst -1 m n)
          (("2" (typepred m)
            (("2" (hide (-1 -2 -4))
              (("2" (replace -6 -2 RL)
                (("2" (expand subset?)
                  (("2" (skolem 1 c)
                    (("2" (inst -2 c)
                      (("2" (inst -1 c) (("2" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (imgCompos formula-decl nil maps_composite nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (domCompos formula-decl nil maps_composite nil))
   nil))
 (weakPartRefTransitive 0
  (weakPartRefTransitive-4 nil 3656760663
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (expand image)
                (("1" (decompose-equality -3)
                  (("1" (bddsimp)
                    (("1" (use assetRefinement)
                      (("1" (expand preorder?)
                        (("1" (expand transitive?)
                          (("1" (flatten)
                            (("1"
                              (inst -2 "prod(pl1,c)"
                               "prod(pl2,getRight(m,c))"
                               "prod(pl3,getRight(n,getRight(m,c)))")
                              (("1"
                                (lemma
                                 "maps_composite[Conf,Conf,Conf].same_img")
                                (("1"
                                  (inst -1 m n c)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand domain)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "getRight(m,c)")
                      (("2" (bddsimp)
                        (("2" (inst 1 c)
                          (("2" (expand domain)
                            (("2" (skolem -2 c3)
                              (("2"
                                (expand composeMaps)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (expand domain)
                                      (("2"
                                        (skolem -2 c2)
                                        (("2"
                                          (typepred m)
                                          (("2"
                                            (expand unique)
                                            (("2"
                                              (lemma
                                               "maps[Conf,Conf].getRightResult")
                                              (("2"
                                                (inst -1 m c2 c)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand composeMaps)
                      (("3" (expand domain)
                        (("3" (skolem -3 c3) (("3" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (expand domain)
                        (("4" (skolem -2 c3) (("4" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand domain)
                  (("1" (expand composeMaps)
                    (("1" (skolem -3 c3)
                      (("1" (bddsimp)
                        (("1" (expand dom)
                          (("1" (expand domain)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand dom)
                  (("2" (expand domain)
                    (("2" (expand composeMaps)
                      (("2" (skolem -2 c3)
                        (("2" (expand domain) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (getRight const-decl "T" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (getRightResult formula-decl nil maps nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (same_img formula-decl nil maps_composite nil)
    (preorder? const-decl "bool" orders nil)
    (image const-decl "finite_sets[T].finite_set" maps nil))
   nil)
  (weakPartRefTransitive-3 nil 3656759693
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-2 nil 3656759126
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-1 nil 3656329560
   ("" (skolem 1 (pl1 pl2 pl3 m n q))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (same_img formula-decl nil maps_composite nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (getRightResult formula-decl nil maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (getRight const-decl "T" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (CM type-eq-decl nil SPLpartialrefinement nil))
   shostak))
 (weakPartRefAltReflexive 0
  (weakPartRefAltReflexive-1 nil 3655116425
   ("" (skolem 1 (x s))
    (("" (expand weakPartialRefinementAlt)
      (("" (skolem 1 p1)
        (("" (bddsimp)
          (("" (inst 1 p1)
            (("" (use assetRefinement)
              (("" (expand preorder?)
                (("" (flatten)
                  (("" (expand reflexive?)
                    (("" (inst -1 p1) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (weakPartRefAltTransitive 0
  (weakPartRefAltTransitive-1 nil 3655116623
   ("" (skolem 1 (pl1 pl2 pl3 s t u))
    (("" (bddsimp)
      (("" (expand weakPartialRefinementAlt)
        (("" (skolem 1 p1)
          (("" (inst -1 p1)
            (("" (bddsimp)
              (("" (skolem -2 p2)
                (("" (inst -3 p2)
                  (("" (bddsimp)
                    (("" (skolem -4 p3)
                      (("" (inst 1 p3)
                        (("" (use assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand transitive?)
                                ((""
                                  (inst -2 p1 p2 p3)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil))
   shostak))
 (fmCompStrongDef_TCC1 0
  (fmCompStrongDef_TCC1-1 nil 3656090730
   ("" (skolem 1 (t pl fm1 fm2 s fm3))
    (("" (bddsimp)
      (("" (skolem 1 pl2)
        (("" (bddsimp)
          (("1" (typepred s)
            (("1" (replace -7 1)
              (("1" (expand subset?) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (typepred s)
            (("2" (expand fmPartialRefinement)
              (("2" (expand subset?)
                (("2" (skolem 1 c)
                  (("2" (expand member)
                    (("2" (replace -3 -5)
                      (("2" (inst -5 c)
                        (("2" (inst -4 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (fmPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (member const-decl "bool" sets nil))
   nil))
 (fmCompStrongDef 0
  (fmCompStrongDef-1 nil 3656090730
   ("" (skolem 1 (pl fm1 fm2 s t))
    (("" (expand* fmPartialRefinement strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -2 c)
            (("" (expand subset?)
              (("" (inst -1 c)
                (("" (expand member)
                  (("" (expand prod)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            (("" (use assetRefinement)
                              ((""
                                (expand preorder?)
                                ((""
                                  (flatten)
                                  ((""
                                    (expand reflexive?)
                                    ((""
                                      (inst
                                       -1
                                       "([||](K(fm1))(A(fm1))(c))")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (fmPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (strongPartCaseWeak_TCC1 0
  (strongPartCaseWeak_TCC1-1 nil 3656875987
   ("" (skolem 1 (pl1 pl2 m))
    (("" (bddsimp)
      (("1" (typepred m) (("1" (propax) nil nil)) nil)
       ("2" (typepred m) (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (mapping type-eq-decl nil maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (image const-decl "finite_sets[T].finite_set" maps nil))
   nil))
 (strongPartCaseWeak 0
  (strongPartCaseWeak-1 nil 3655109962
   ("" (skolem 1 (map pl1 pl2))
    (("" (bddsimp)
      (("1" (expand* weakPartialRefinement strongPartialRefinement)
        (("1" (skolem 1 c)
          (("1" (inst -2 c)
            (("1" (expand identity?)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (replace -1 1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* strongPartialRefinement weakPartialRefinement)
        (("2" (skolem 1 c)
          (("2" (inst -2 c)
            (("2" (bddsimp)
              (("2" (expand identity?)
                (("2" (inst -1 c)
                  (("2" (replace -1 -3) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (identity? const-decl "bool" maps_identity nil))
   shostak))
 (eqPlRefPartWeakAlt_TCC1 0
  (eqPlRefPartWeakAlt_TCC1-1 nil 3656875987
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (bddsimp)
      (("" (replace -1 1)
        (("" (expand subset?)
          (("" (skolem 1 c)
            (("" (expand member) (("" (bddsimp) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (eqPlRefPartWeakAlt_TCC2 0
  (eqPlRefPartWeakAlt_TCC2-1 nil 3657986402
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (bddsimp)
      (("" (replace -2 1)
        (("" (expand subset?)
          (("" (skolem 1 c)
            (("" (expand member) (("" (bddsimp) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (eqPlRefPartWeakAlt 0
  (eqPlRefPartWeakAlt-1 nil 3655677340
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (bddsimp)
      (("1" (expand weakPartialRefinementAlt)
        (("1" (expand plRefinement)
          (("1" (skolem 1 p1)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (skolem -4 c)
                  (("1" (inst -3 c)
                    (("1" (bddsimp)
                      (("1" (skolem -4 c2)
                        (("1" (bddsimp)
                          (("1" (inst 1 "([||](K(pl2))(A(pl2))(c2))")
                            (("1" (bddsimp)
                              (("1"
                                (expand prod)
                                (("1"
                                  (replace -7 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 c2)
                                (("2"
                                  (expand member)
                                  (("2"
                                    (decompose-equality -2)
                                    (("2"
                                      (inst -1 c2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (expand prod)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand weakPartialRefinementAlt)
        (("2" (expand plRefinement)
          (("2" (skolem 1 c)
            (("2" (bddsimp)
              (("2" (inst -4 "([||](K(pl1))(A(pl1))(c))")
                (("2" (bddsimp)
                  (("1" (skolem -4 p2)
                    (("1" (expand prod)
                      (("1" (bddsimp)
                        (("1" (skolem -4 c2)
                          (("1" (inst 1 c2)
                            (("1" (expand prod)
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (replace -6 -7)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand prod)
                    (("2" (expand member)
                      (("2" (expand prod) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prod const-decl
     "finite_sets[finite_sets[Asset].finite_set].finite_set"
     SPLpartialrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (fmPartRef_TCC1 0
  (fmPartRef_TCC1-1 nil 3659113388
   ("" (skolem 1 (fm1 fm2))
    (("" (lemma finite_semantics) (("" (inst -1 fm1) nil nil)) nil))
    nil)
   (([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (finite_semantics formula-decl nil SPLRefinementFiniteFM nil))
   nil))
 (fmPartRef 0
  (fmPartRef-1 nil 3656842354
   ("" (skolem 1 (fm1 fm2))
    (("" (bddsimp)
      (("1" (expand* "|=" fmPartialRefinement)
        (("1" (skolem 1 c)
          (("1" (expand subset?)
            (("1" (inst -1 c)
              (("1" (expand member) (("1" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* "|=" fmPartialRefinement)
        (("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (inst -1 c)
              (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (fmPartialRefinement const-decl "bool" SPLpartialrefinement nil))
   shostak))
 (totalImpliesPartial_TCC1 0
  (totalImpliesPartial_TCC1-1 nil 3658524569
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("1" (typepred s)
        (("1" (expand strongerPLrefinement)
          (("1" (expand subset?)
            (("1" (skolem 1 c)
              (("1" (inst -1 c)
                (("1" (inst -2 c)
                  (("1" (expand member) (("1" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred s) (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Conf formal-type-decl nil SPLpartialrefinement nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (FM formal-type-decl nil SPLpartialrefinement nil)
    ({\|\|} formal-const-decl "[FM -> set[Conf]]" SPLpartialrefinement
     nil)
    (CK formal-type-decl nil SPLpartialrefinement nil)
    (Asset formal-type-decl nil SPLpartialrefinement nil)
    (AssetName formal-type-decl nil SPLpartialrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    ([\|\|] formal-const-decl
     "[CK -> [mapping -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil))
   nil))
 (totalImpliesPartial 0
  (totalImpliesPartial-1 nil 3658524570
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (expand* strongerPLrefinement strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (typepred s)
              (("" (expand subset?)
                (("" (inst -1 c)
                  (("" (expand member)
                    (("" (expand prod) (("" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (partialImpliesTotal_TCC1 0
  (partialImpliesTotal_TCC1-1 nil 3658524794
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (replace -2 1)
        (("" (expand subset?)
          (("" (skolem 1 c)
            (("" (expand member) (("" (bddsimp) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (partialImpliesTotal 0
  (partialImpliesTotal-1 nil 3658524796
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (expand* strongerPLrefinement strongPartialRefinement)
        (("" (replace -1 -2)
          (("" (skolem 1 c)
            (("" (expand prod)
              (("" (bddsimp)
                (("1" (typepred s)
                  (("1" (inst -4 c)
                    (("1" (bddsimp)
                      (("1" (replace -2 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand subset?)
                  (("2" (inst -2 c)
                    (("2" (expand member) (("2" (bddsimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil))
   shostak))
 (commutableDiagram1 0
  (commutableDiagram1-1 nil 3658526590
   ("" (lemma totalImpliesPartial)
    (("" (skolem 1 (pl1 pl4))
      (("" (bddsimp)
        (("1" (skolem -2 (pl2 s))
          (("1" (flatten)
            (("1" (inst -1 pl2 pl4 s)
              (("1" (bddsimp)
                (("1" (inst 1 pl1 s)
                  (("1" (bddsimp)
                    (("1" (lemma strongPartRefTransitive)
                      (("1" (inst -1 pl1 pl2 pl4 s s)
                        (("1"
                          (lemma
                           "sets_lemmas[Conf].intersection_idempotent")
                          (("1" (inst -1 s)
                            (("1" (replace -1 -2)
                              (("1" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma strongerPLref)
                      (("2" (expand preorder?)
                        (("2" (flatten)
                          (("2" (expand reflexive?)
                            (("2" (inst -1 pl1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem -2 (pl2 s))
          (("2" (inst -1 pl1 pl2 s)
            (("2" (bddsimp)
              (("2" (inst 1 pl4 s)
                (("2" (bddsimp)
                  (("1" (lemma strongerPLref)
                    (("1" (expand preorder?)
                      (("1" (flatten)
                        (("1" (expand reflexive?)
                          (("1" (inst -1 pl4) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma strongPartRefTransitive)
                    (("2" (inst -1 pl1 pl2 pl4 s s)
                      (("2"
                        (lemma
                         "sets_lemmas[Conf].intersection_idempotent")
                        (("2" (inst -1 s)
                          (("2" (replace -1 -2)
                            (("2" (bddsimp) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((totalImpliesPartial formula-decl nil SPLpartialrefinement nil)
    (intersection_idempotent formula-decl nil sets_lemmas nil)
    (strongPartRefTransitive formula-decl nil SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (strongerPLref formula-decl nil SPLrefinement nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (plRefImpliesRefFun 0
  (plRefImpliesRefFun-1 nil 3658649403
   ("" (skolem 1 (pl1 pl2 f))
    (("" (bddsimp)
      (("1" (expand* plRefinementFun strongerPLrefinement)
        (("1" (skolem 1 c)
          (("1" (inst -2 c)
            (("1" (bddsimp)
              (("1" (replace -1 -4)
                (("1" (expand id)
                  (("1" (expand prod) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 -3)
                (("2" (expand id) (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* strongerPLrefinement plRefinementFun)
        (("2" (skolem 1 c)
          (("2" (inst -2 c)
            (("2" (bddsimp)
              (("1" (replace -1 1)
                (("1" (expand id)
                  (("1" (expand prod) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 1)
                (("2" (expand id) (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (plRefinementFun const-decl "bool" SPLpartialrefinement nil)
    (strongerPLrefinement const-decl "bool" SPLrefinement nil))
   shostak))
 (plRefFunTransitive 0
  (plRefFunTransitive-1 nil 3658651918
   ("" (skolem 1 (pl1 pl2 pl3 s f))
    (("" (bddsimp)
      (("" (expand* strongPartialRefinement plRefinementFun)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (bddsimp)
                (("1" (use assetRefinement)
                  (("1" (expand preorder?)
                    (("1" (flatten)
                      (("1" (expand transitive?)
                        (("1"
                          (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                           "prod(pl3,f(c))")
                          (("1" (bddsimp) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                 ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                 ("6" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

