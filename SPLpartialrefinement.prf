(SPLpartialrefinement
 (domainSetComposite 0
  (domainSetComposite-1 nil 3655069115
   ("" (skolem 1 (f g)) (("" (expand d) (("" (propax) nil nil)) nil))
    nil)
   ((d const-decl "set[Conf]" SPLpartialrefinement nil)) shostak))
 (productBelongsToLargerSet 0
  (productBelongsToLargerSet-1 nil 3655108891
   ("" (skolem 1 (p pl s t))
    (("" (prop)
      (("" (expand subset?)
        (("" (expand prod)
          (("" (skolem -2 c)
            (("" (inst -1 c)
              (("" (inst 1 c) (("" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "set[set[Asset]]" SPLpartialrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (strongPartRefReflexive 0
  (strongPartRefReflexive-1 nil 3655065337
   ("" (skolem 1 (x s))
    (("" (expand strongPartialRefinement)
      (("" (skolem 1 c)
        (("" (use assetRefinement)
          (("" (expand preorder?)
            (("" (flatten)
              (("" (expand reflexive?)
                (("" (inst -1 "prod(x, c)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (prod const-decl "set[Asset]" SPLpartialrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   shostak))
 (strongPartRefTransitive 0
  (strongPartRefTransitive-1 nil 3655065416
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (prop)
      (("" (expand strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (expand intersection)
                (("" (expand member)
                  (("" (prop)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand transitive?)
                            ((""
                              (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                               "prod(pl3,c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (prod const-decl "set[Asset]" SPLpartialrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (intersection const-decl "set" sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (weakPartRefReflexive_TCC1 0
  (weakPartRefReflexive_TCC1-1 nil 3655111808
   ("" (subtype-tcc) nil nil) nil nil))
 (weakPartRefReflexive 0
  (weakPartRefReflexive-1 nil 3655065773
   ("" (skolem 1 (x f))
    (("" (prop)
      (("" (expand weakPartialRefinement)
        (("" (skolem 1 p1)
          (("" (prop)
            (("" (inst 1 p1)
              (("" (replace -1)
                (("" (use assetRefinement)
                  (("" (expand preorder?)
                    (("" (flatten)
                      (("" (expand reflexive?)
                        (("" (inst -1 p1) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil))
   shostak))
 (weakPartRefTransitive_TCC1 0
  (weakPartRefTransitive_TCC1-1 nil 3655111808
   ("" (subtype-tcc) nil nil) nil nil))
 (weakPartRefTransitive_TCC2 0
  (weakPartRefTransitive_TCC2-1 nil 3655111808
   ("" (subtype-tcc) nil nil) nil nil))
 (weakPartRefTransitive_TCC3 0
  (weakPartRefTransitive_TCC3-1 nil 3655111808
   ("" (subtype-tcc) nil nil) nil nil))
 (weakPartRefTransitive 0
  (weakPartRefTransitive-1 nil 3655065996
   ("" (skolem 1 (pl1 pl2 pl3 f g))
    (("" (prop)
      (("" (expand weakPartialRefinement)
        (("" (skolem 1 p1)
          (("" (inst -1 p1)
            (("" (use domainSetComposite)
              (("" (replace -1)
                (("" (prop)
                  (("" (skolem -1 p2)
                    (("" (inst -3 p2)
                      (("" (lemma "productBelongsToLargerSet")
                        (("" (inst -1 "p2" "pl2" "r(f)" "d(g)")
                          (("" (prop)
                            (("" (skolem -1 p3)
                              ((""
                                (replace -6)
                                ((""
                                  (inst 1 p3)
                                  ((""
                                    (use assetRefinement)
                                    ((""
                                      (expand preorder?)
                                      ((""
                                        (flatten)
                                        ((""
                                          (expand transitive?)
                                          ((""
                                            (inst -2 p1 p2 p3)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domainSetComposite formula-decl nil SPLpartialrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (r const-decl "set[Conf]" SPLpartialrefinement nil)
    (d const-decl "set[Conf]" SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (productBelongsToLargerSet formula-decl nil SPLpartialrefinement
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil))
   shostak))
 (weakPartRefAltReflexive 0
  (weakPartRefAltReflexive-1 nil 3655116425
   ("" (skolem 1 (x s))
    (("" (expand weakPartialRefinementAlt)
      (("" (skolem 1 p1)
        (("" (bddsimp)
          (("" (inst 1 p1)
            (("" (use assetRefinement)
              (("" (expand preorder?)
                (("" (flatten)
                  (("" (expand reflexive?)
                    (("" (inst -1 p1) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil))
   shostak))
 (weakPartRefAltTransitive 0
  (weakPartRefAltTransitive-1 nil 3655116623
   ("" (skolem 1 (pl1 pl2 pl3 s t u))
    (("" (bddsimp)
      (("" (expand weakPartialRefinementAlt)
        (("" (skolem 1 p1)
          (("" (inst -1 p1)
            (("" (bddsimp)
              (("" (skolem -2 p2)
                (("" (inst -3 p2)
                  (("" (bddsimp)
                    (("" (skolem -4 p3)
                      (("" (inst 1 p3)
                        (("" (use assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand transitive?)
                                ((""
                                  (inst -2 p1 p2 p3)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assetRefinement formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (strongPartCaseWeak_TCC1 0
  (strongPartCaseWeak_TCC1-1 nil 3655111808 ("" (subtype-tcc) nil nil)
   nil nil))
 (strongPartCaseWeak 0
  (strongPartCaseWeak-1 nil 3655109962
   ("" (skolem 1 (f pl1 pl2))
    (("" (prop)
      (("" (expand* strongPartialRefinement weakPartialRefinement)
        (("" (skolem 1 p1)
          (("" (prop)
            (("" (expand prod)
              (("" (skolem -4 c)
                (("" (inst -3 c)
                  (("" (inst 1 "([||](K(pl2))(A(pl2))(c))")
                    (("" (bddsimp)
                      (("1" (expand prod) (("1" (assert) nil nil)) nil)
                       ("2" (inst 1 c)
                        (("2" (expand subset?)
                          (("2" (inst -2 c)
                            (("2" (replace -1)
                              (("2"
                                (expand prod)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand member)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand member) (("3" (propax) nil nil))
                        nil)
                       ("4" (expand member) (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "set[set[Asset]]" SPLpartialrefinement nil)
    (prod const-decl "set[Asset]" SPLpartialrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil))
   shostak))
 (strongPartCaseWeak2_TCC1 0
  (strongPartCaseWeak2_TCC1-1 nil 3655112281 ("" (subtype-tcc) nil nil)
   nil nil))
 (strongPartCaseWeak2 0
  (strongPartCaseWeak2-1 nil 3655112300
   ("" (skolem 1 (f pl1 pl2))
    (("" (bddsimp)
      (("" (expand* weakPartialRefinement strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (expand prod)
            (("" (bddsimp)
              (("" (inst -3 "([||](K(pl1))(A(pl1))(c))")
                (("" (bddsimp)
                  (("1" (skolem -3 p2)
                    (("1" (bddsimp)
                      (("1" (expand prod)
                        (("1" (skolem -3 c2)
                          (("1" (bddsimp)
                            (("1" (expand member)
                              (("1"
                                (assert)
                                (("1"
                                  (expand subset?)
                                  (("1"
                                    (inst -2 c)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand member)
                                        (("1"
                                          (replace -5)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eqPlRefPartWeakAlt 0
  (eqPlRefPartWeakAlt-1 nil 3655129949
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (bddsimp)
      (("1" (expand* plRefinement weakPartialRefinementAlt)
        (("1" (skolem 1 p1)
          (("1" (replace -2)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (skolem -4 c1)
                  (("1" (inst -3 c1)
                    (("1" (bddsimp)
                      (("1" (skolem -4 c2)
                        (("1" (bddsimp)
                          (("1" (inst 1 "([||](K(pl2))(A(pl2))(c2))")
                            (("1" (bddsimp)
                              (("1"
                                (expand prod)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand prod)
                                (("2"
                                  (expand member)
                                  (("2"
                                    (inst 1 c2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* weakPartialRefinementAlt plRefinement)
        (("2" (skolem 1 c1)
          (("2" (bddsimp)
            (("2" (inst -4 "([||](K(pl1))(A(pl1))(c1))")
              (("2" (bddsimp)
                (("1" (skolem -4 p2)
                  (("1" (expand prod)
                    (("1" (bddsimp)
                      (("1" (skolem -4 c2)
                        (("1" (inst 1 c2)
                          (("1" (replace -2)
                            (("1" (expand prod)
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand prod)
                  (("2" (inst 2 c1)
                    (("2" (bddsimp)
                      (("1" (expand prod) (("1" (propax) nil nil)) nil)
                       ("2" (expand member)
                        (("2" (replace -1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl "set[Asset]" SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AssetName type-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (Conf type-decl nil SPLrefinement nil)
    (prod const-decl "set[set[Asset]]" SPLpartialrefinement nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (eqWeakAndWeakAlt_TCC1 0
  (eqWeakAndWeakAlt_TCC1-1 nil 3655131118 ("" (subtype-tcc) nil nil)
   nil nil))
 (eqWeakAndWeakAlt 0
  (eqWeakAndWeakAlt-1 nil 3655131120
   ("" (skolem 1 (pl1 pl2 f s t))
    (("" (bddsimp)
      (("1" (expand* weakPartialRefinementAlt weakPartialRefinement)
        (("1" (skolem 1 p1)
          (("1" (inst -3 p1)
            (("1" (bddsimp)
              (("1" (skolem -3 p2)
                (("1" (inst 1 p2) (("1" (grind) nil nil)) nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* weakPartialRefinement weakPartialRefinementAlt)
        (("2" (skolem 1 p1)
          (("2" (inst -3 p1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (r const-decl "set[Conf]" SPLpartialrefinement nil)
    (d const-decl "set[Conf]" SPLpartialrefinement nil)
    (prod const-decl "set[set[Asset]]" SPLpartialrefinement nil)
    (prod const-decl "set[Asset]" SPLpartialrefinement nil)
    (member const-decl "bool" sets nil))
   shostak))
 (strongPartRefImpliesRef 0
  (strongPartRefImpliesRef-1 nil 3655134334
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (expand* strongPartialRefinement plRefinement)
        (("" (skolem 1 c)
          (("" (bddsimp)
            (("" (inst 1 c)
              (("" (inst -3 c)
                (("" (bddsimp)
                  (("1" (expand prod) (("1" (propax) nil nil)) nil)
                   ("2" (expand prod)
                    (("2" (expand subset?)
                      (("2" (inst -2 c)
                        (("2" (expand member)
                          (("2" (inst -1 c)
                            (("2" (bddsimp) (("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

