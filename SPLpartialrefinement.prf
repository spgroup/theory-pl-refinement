(SPLpartialrefinement
 (prod_TCC1 0
  (prod_TCC1-1 nil 3655135094 ("" (subtype-tcc) nil nil) nil nil))
 (weakPartialRefinement_TCC1 0
  (weakPartialRefinement_TCC1-1 nil 3656408682
   ("" (subtype-tcc) nil nil) nil nil))
 (strongPartRefReflexive 0
  (strongPartRefReflexive-1 nil 3655065337
   ("" (skolem 1 (x s))
    (("" (expand strongPartialRefinement)
      (("" (skolem 1 c)
        (("" (use assetRefinement)
          (("" (expand preorder?)
            (("" (flatten)
              (("" (expand reflexive?)
                (("" (inst -1 "prod(x, c)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Conf type-decl nil SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (strongPartRefTransitive 0
  (strongPartRefTransitive-1 nil 3655065416
   ("" (skolem 1 (pl1 pl2 pl3 s t))
    (("" (prop)
      (("" (expand strongPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 c)
              (("" (expand intersection)
                (("" (expand member)
                  (("" (prop)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (flatten)
                          (("" (expand transitive?)
                            ((""
                              (inst -2 "prod(pl1,c)" "prod(pl2,c)"
                               "prod(pl3,c)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (Conf type-decl nil SPLrefinement nil)
    (intersection const-decl "set" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (CK type-decl nil SPLrefinement nil)
    (FM type-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (member const-decl "bool" sets nil))
   shostak))
 (weakPartRefReflexive 0
  (weakPartRefReflexive-1 nil 3655065773
   ("" (skolem 1 (pl map))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (expand identity?)
          (("" (skolem 1 c)
            (("" (inst -1 c)
              (("" (bddsimp)
                (("" (use assetRefinement)
                  (("" (expand preorder?)
                    (("" (flatten)
                      (("" (expand reflexive?)
                        (("" (inst -1 "prod(pl,c)")
                          (("" (replace -3 1) (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (identity? const-decl "bool" maps_identity nil))
   shostak))
 (weakPartRefTransitive 0
  (weakPartRefTransitive-4 nil 3656760663
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (expand image)
                (("1" (decompose-equality -3)
                  (("1" (bddsimp)
                    (("1" (use assetRefinement)
                      (("1" (expand preorder?)
                        (("1" (expand transitive?)
                          (("1" (flatten)
                            (("1"
                              (inst -2 "prod(pl1,c)"
                               "prod(pl2,getRight(m,c))"
                               "prod(pl3,getRight(n,getRight(m,c)))")
                              (("1"
                                (lemma
                                 "maps_composite[Conf,Conf,Conf].same_img")
                                (("1"
                                  (inst -1 m n c)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand domain)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "getRight(m,c)")
                      (("2" (bddsimp)
                        (("2" (inst 1 c)
                          (("2" (expand domain)
                            (("2" (skolem -2 c3)
                              (("2"
                                (expand composeMaps)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (expand domain)
                                      (("2"
                                        (skolem -2 c2)
                                        (("2"
                                          (typepred m)
                                          (("2"
                                            (expand unique)
                                            (("2"
                                              (lemma
                                               "maps[Conf,Conf].getRightResult")
                                              (("2"
                                                (inst -1 m c2 c)
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand composeMaps)
                      (("3" (expand domain)
                        (("3" (skolem -3 c3) (("3" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (expand domain)
                        (("4" (skolem -2 c3) (("4" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand domain)
                  (("1" (expand composeMaps)
                    (("1" (skolem -3 c3)
                      (("1" (bddsimp)
                        (("1" (expand dom)
                          (("1" (expand domain)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand dom)
                  (("2" (expand domain)
                    (("2" (expand composeMaps)
                      (("2" (skolem -2 c3)
                        (("2" (expand domain) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (CM type-eq-decl nil SPLpartialrefinement nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (getRight const-decl "T" maps nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (getRightResult formula-decl nil maps nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (same_img formula-decl nil maps_composite nil)
    (preorder? const-decl "bool" orders nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (Conf type-decl nil SPLpartialrefinement nil))
   nil)
  (weakPartRefTransitive-3 nil 3656759693
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-2 nil 3656759126
   ("" (skolem 1 (pl1 pl2 pl3 m n))
    (("" (expand weakPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil)))))))))))))
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil)))))))))))
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil)))
                                       ("2" (grind) nil)))))))))
                               ("2" (grind) nil) ("3" (grind) nil)))
                             ("3" (grind) nil)))))))))
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil)))))))
                         ("2" (grind) nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil)))))))
                           ("2" (grind) nil)
                           ("3" (grind) nil)))))))))))))
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))))))
                     ("2" (grind) nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil) ("2" (grind) nil)
                       ("3" (grind) nil)))))))
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil)))))
                         ("2" (grind) nil)
                         ("3" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (weakPartRefTransitive-1 nil 3656329560
   ("" (skolem 1 (pl1 pl2 pl3 m n q))
    (("" (bddsimp)
      (("" (expand weakPartialRefinement)
        (("" (skolem 1 c)
          (("" (inst -1 c)
            (("" (inst -2 "getRight(m,c)")
              (("1" (lemma "maps_composite[Conf,Conf,Conf].same_img")
                (("1" (inst -1 m n q c)
                  (("1" (bddsimp)
                    (("1" (replace -3 1)
                      (("1" (use assetRefinement)
                        (("1" (expand preorder?)
                          (("1" (expand transitive?)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 -2
                                 "prod(pl1,c)"
                                 "prod(pl2,getRight(m,c))"
                                 "prod(pl3,getRight(n,getRight(m,c)))")
                                (("1" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand image)
                      (("2" (expand domain)
                        (("2" (decompose-equality -5)
                          (("2" (inst -1 "getRight(m,c)")
                            (("2" (bddsimp)
                              (("2"
                                (inst 1 c)
                                (("2"
                                  (skolem -1 c3)
                                  (("2"
                                    (inst 2 c3)
                                    (("2"
                                      (lemma
                                       "maps[Conf,Conf].getRightResult")
                                      (("2"
                                        (inst -1 q c3 c)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (replace -2 -4)
                                            (("2"
                                              (expand composeMaps)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "(c,c3)")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand domain)
                                                      (("1"
                                                        (skolem -2 c2)
                                                        (("1"
                                                          (lemma
                                                           "maps[Conf,Conf].getRightResult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             m
                                                             c2
                                                             c)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand domain)
                                                  (("2"
                                                    (skolem -4 c2)
                                                    (("2"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand domain)
                                                  (("3"
                                                    (skolem -4 c2)
                                                    (("3"
                                                      (lemma
                                                       "maps[Conf,Conf].getRightResult")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         m
                                                         c2
                                                         c)
                                                        (("3"
                                                          (bddsimp)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand domain)
                      (("3" (skolem -1 c3)
                        (("3" (expand composeMaps)
                          (("3" (decompose-equality)
                            (("1" (inst -1 "(c,c3)")
                              (("1"
                                (bddsimp)
                                (("1"
                                  (lemma
                                   "maps[Conf,Conf].getRightResult")
                                  (("1"
                                    (inst -1 q c3 c)
                                    (("1"
                                      (bddsimp)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality -6)
                              (("1"
                                (inst -1 "(c,c3)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lemma
                                     "maps[Conf,Conf].getRightResult")
                                    (("1"
                                      (inst -1 q c3 c)
                                      (("1"
                                        (bddsimp)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand composeMaps)
                      (("4" (decompose-equality)
                        (("1" (expand domain)
                          (("1" (skolem -2 c3)
                            (("1" (inst -1 "(c,c3)")
                              (("1" (bddsimp) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (decompose-equality -5)
                          (("1" (expand image)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 "getRight(m,c)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (bddsimp)
                (("1" (expand composeMaps)
                  (("1" (decompose-equality -3)
                    (("1" (expand domain)
                      (("1" (skolem -4 c3)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (decompose-equality -6)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand domain)
                  (("2" (skolem -3 c3)
                    (("2" (expand composeMaps)
                      (("2" (decompose-equality -2)
                        (("1" (inst -1 "(c,c3)")
                          (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (same_img formula-decl nil maps_composite nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (composeMaps const-decl "maps[S, U].mapping" maps_composite nil)
    (getRightResult formula-decl nil maps nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (image const-decl "finite_sets[T].finite_set" maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (getRight const-decl "T" maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (CM type-eq-decl nil SPLpartialrefinement nil))
   shostak))
 (weakPartRefAltReflexive 0
  (weakPartRefAltReflexive-1 nil 3655116425
   ("" (skolem 1 (x s))
    (("" (expand weakPartialRefinementAlt)
      (("" (skolem 1 p1)
        (("" (bddsimp)
          (("" (inst 1 p1)
            (("" (use assetRefinement)
              (("" (expand preorder?)
                (("" (flatten)
                  (("" (expand reflexive?)
                    (("" (inst -1 p1) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (weakPartRefAltTransitive 0
  (weakPartRefAltTransitive-1 nil 3655116623
   ("" (skolem 1 (pl1 pl2 pl3 s t u))
    (("" (bddsimp)
      (("" (expand weakPartialRefinementAlt)
        (("" (skolem 1 p1)
          (("" (inst -1 p1)
            (("" (bddsimp)
              (("" (skolem -2 p2)
                (("" (inst -3 p2)
                  (("" (bddsimp)
                    (("" (skolem -4 p3)
                      (("" (inst 1 p3)
                        (("" (use assetRefinement)
                          (("" (expand preorder?)
                            (("" (flatten)
                              ((""
                                (expand transitive?)
                                ((""
                                  (inst -2 p1 p2 p3)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (Asset type-decl nil SPLrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (assetRefinement formula-decl nil SPLrefinement nil))
   shostak))
 (fmCompStrongDef_TCC1 0
  (fmCompStrongDef_TCC1-1 nil 3656090730 ("" (subtype-tcc) nil nil) nil
   nil))
 (fmCompStrongDef 0
  (fmCompStrongDef-1 nil 3656090730
   ("" (skolem 1 (pl fm1 fm2 s t))
    (("" (expand* fmPartialRefinement strongPartialRefinement)
      (("" (bddsimp)
        (("" (skolem 1 c)
          (("" (inst -2 c)
            (("" (expand subset?)
              (("" (inst -1 c)
                (("" (expand member)
                  (("" (expand prod)
                    (("" (use assetRefinement)
                      (("" (expand preorder?)
                        (("" (expand reflexive?)
                          (("" (flatten)
                            (("" (inst -1 "([||](K(pl))(A(pl))(c))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (fmPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil))
   shostak))
 (amCompStrongDef_TCC1 0
  (amCompStrongDef_TCC1-1 nil 3656842686 ("" (subtype-tcc) nil nil) nil
   nil))
 (amCompStrongDef 0
  (amCompStrongDef-1 nil 3656842687
   ("" (skolem 1 (pl am1 am2 anSet s))
    (("" (expand amPartialRefinement)
      (("" (bddsimp)
        (("" (expand strongPartialRefinement)
          (("" (skolem 1 c)
            (("" (bddsimp)
              (("" (expand prod)
                (("" (expand subset?)
                  (("" (expand member)
                    (("" (typepred am1)
                      (("" (expand unique) (("" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (strongPartCaseWeak 0
  (strongPartCaseWeak-1 nil 3655109962
   ("" (skolem 1 (map pl1 pl2))
    (("" (bddsimp)
      (("1" (expand* weakPartialRefinement strongPartialRefinement)
        (("1" (skolem 1 c)
          (("1" (inst -2 c)
            (("1" (expand identity?)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (replace -1 1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* strongPartialRefinement weakPartialRefinement)
        (("2" (skolem 1 c)
          (("2" (inst -2 c)
            (("2" (bddsimp)
              (("2" (expand identity?)
                (("2" (inst -1 c)
                  (("2" (replace -1 -3) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (weakPartialRefinement const-decl "bool" SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (identity? const-decl "bool" maps_identity nil))
   shostak))
 (eqPlRefPartWeakAlt 0
  (eqPlRefPartWeakAlt-1 nil 3655677340
   ("" (skolem 1 (pl1 pl2 s t))
    (("" (bddsimp)
      (("1" (expand weakPartialRefinementAlt)
        (("1" (expand plRefinement)
          (("1" (skolem 1 p1)
            (("1" (bddsimp)
              (("1" (expand prod)
                (("1" (skolem -4 c)
                  (("1" (inst -3 c)
                    (("1" (bddsimp)
                      (("1" (skolem -4 c2)
                        (("1" (bddsimp)
                          (("1" (inst 1 "([||](K(pl2))(A(pl2))(c2))")
                            (("1" (bddsimp)
                              (("1"
                                (expand prod)
                                (("1"
                                  (replace -7 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 c2)
                                (("2"
                                  (expand member)
                                  (("2"
                                    (decompose-equality -2)
                                    (("2"
                                      (inst -1 c2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (expand prod)
                                          (("2" (bddsimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand weakPartialRefinementAlt)
        (("2" (expand plRefinement)
          (("2" (skolem 1 c)
            (("2" (bddsimp)
              (("2" (inst -4 "([||](K(pl1))(A(pl1))(c))")
                (("2" (bddsimp)
                  (("1" (skolem -4 p2)
                    (("1" (expand prod)
                      (("1" (bddsimp)
                        (("1" (skolem -4 c2)
                          (("1" (inst 1 c2)
                            (("1" (expand prod)
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (replace -6 -7)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand prod)
                    (("2" (expand member)
                      (("2" (expand prod) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    (unique const-decl "bool" maps nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (prod const-decl
     "finite_sets[finite_sets[Asset].finite_set].finite_set"
     SPLpartialrefinement nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil))
   shostak))
 (confsStrongPartRef 0
  (confsStrongPartRef-1 nil 3656781344
   ("" (skolem 1 (pl1 pl2 s))
    (("" (bddsimp)
      (("" (skolem 1 c)
        (("" (expand strongPartialRefinement)
          (("" (inst -1 c)
            (("" (expand prod)
              (("" (bddsimp)
                (("1" (grind) (("1" (postpone) nil nil)) nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (fmPartRef 0
  (fmPartRef-1 nil 3656842354
   ("" (skolem 1 (fm1 fm2))
    (("" (bddsimp)
      (("1" (expand* "|=" fmPartialRefinement)
        (("1" (skolem 1 c)
          (("1" (expand subset?)
            (("1" (inst -1 c)
              (("1" (expand member) (("1" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* "|=" fmPartialRefinement)
        (("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (inst -1 c)
              (("2" (expand member) (("2" (bddsimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Conf type-decl nil SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|= const-decl "bool" SPLrefinement nil)
    (fmPartialRefinement const-decl "bool" SPLpartialrefinement nil))
   shostak))
 (commutativeDiagram 0
  (commutativeDiagram-1 nil 3656777834
   ("" (skolem 1 (pl1 pl2 pl3 s))
    (("" (bddsimp)
      (("" (expand weakPartialRefinementAlt)
        (("" (skolem 1 p1)
          (("" (bddsimp)
            (("" (expand prod)
              (("" (skolem -5 c)
                (("" (flatten)
                  (("" (expand member)
                    (("" (expand plRefinement)
                      (("" (inst -1 c)
                        (("" (bddsimp)
                          (("" (skolem -2 c2)
                            (("" (bddsimp)
                              ((""
                                (expand strongPartialRefinement)
                                ((""
                                  (inst -4 c2)
                                  ((""
                                    (expand prod)
                                    ((""
                                      (inst
                                       1
                                       "([||](K(pl3))(A(pl3))(c2))")
                                      ((""
                                        (bddsimp)
                                        (("1"
                                          (use assetRefinement)
                                          (("1"
                                            (expand preorder?)
                                            (("1"
                                              (expand transitive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "([||](K(pl1))(A(pl1))(c))"
                                                   "([||](K(pl2))(A(pl2))(c2))"
                                                   "([||](K(pl3))(A(pl3))(c2))")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -10 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 1 c2)
                                          (("2"
                                            (bddsimp)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("3" (postpone) nil nil)
                                         ("4" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (commutativeDiagram2 0
  (commutativeDiagram2-2 nil 3656840004
   ("" (skolem 1 (pl1 pl2 pl3 s))
    (("" (bddsimp)
      ((""
        (expand* weakPartialRefinementAlt plRefinement
         strongPartialRefinement)
        (("" (skolem 1 p1)
          (("" (bddsimp)
            (("" (expand prod)
              (("" (expand member)
                (("" (expand prod)
                  (("" (use assetRefinement)
                    (("" (expand preorder?)
                      (("" (flatten)
                        (("" (expand transitive?)
                          (("" (skolem -6 c)
                            (("" (inst -3 c)
                              ((""
                                (inst -4 c)
                                ((""
                                  (bddsimp)
                                  (("1"
                                    (skolem -5 c2)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (inst
                                         1
                                         "([||](K(pl3))(A(pl3))(c2))")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (replace -9 1)
                                            (("1"
                                              (inst
                                               -2
                                               "([||](K(pl1))(A(pl1))(c))"
                                               "([||](K(pl2))(A(pl2))(c))"
                                               "([||](K(pl3))(A(pl3))(c2))")
                                              (("1" (bddsimp) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst 1 c2)
                                            (("2" (bddsimp) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand subset?)
                                    (("2"
                                      (inst -5 c)
                                      (("2"
                                        (expand member)
                                        (("2" (bddsimp) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (member const-decl "bool" sets nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (subset? const-decl "bool" sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (prod const-decl
     "finite_sets[finite_sets[Asset].finite_set].finite_set"
     SPLpartialrefinement nil))
   nil)
  (commutativeDiagram2-1 nil 3656838781
   ("" (skolem 1 (pl1 pl2 pl3 s))
    (("" (bddsimp)
      ((""
        (expand* weakPartialRefinementAlt plRefinement
         strongPartialRefinement)
        (("" (skolem 1 p1)
          (("" (bddsimp)
            (("" (expand prod)
              (("" (skolem -5 c)
                (("" (inst -1 c)
                  (("" (expand member)
                    (("" (bddsimp)
                      (("" (inst -3 c)
                        (("" (bddsimp)
                          (("1" (skolem -3 c2)
                            (("1" (bddsimp)
                              (("1"
                                (inst 1 "([||](K(pl3))(A(pl3))(c2))")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (expand prod)
                                    (("1"
                                      (use assetRefinement)
                                      (("1"
                                        (expand preorder?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand transitive?)
                                            (("1"
                                              (inst
                                               -2
                                               "([||](K(pl1))(A(pl1))(c))"
                                               "([||](K(pl2))(A(pl2))(c))"
                                               "([||](K(pl3))(A(pl3))(c2))")
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (replace -10 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 c2)
                                    (("2"
                                      (expand subset?)
                                      (("2"
                                        (expand prod)
                                        (("2" (bddsimp) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand subset?)
                            (("2" (inst -3 c)
                              (("2"
                                (expand member)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod const-decl
     "finite_sets[finite_sets[Asset].finite_set].finite_set"
     SPLpartialrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set"
     SPLpartialrefinement nil)
    (Conf type-decl nil SPLpartialrefinement nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (subset? const-decl "bool" sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    ({\|\|} const-decl "[FM -> set[Conf]]" SPLpartialrefinement nil)
    (FM type-decl nil SPLpartialrefinement nil)
    ([\|\|] const-decl
     "[CK -> [AM -> [Conf -> finite_sets[Asset].finite_set]]]"
     SPLpartialrefinement nil)
    (AM type-eq-decl nil SPLpartialrefinement nil)
    (unique const-decl "bool" maps nil)
    (AssetName type-decl nil SPLpartialrefinement nil)
    (CK type-decl nil SPLpartialrefinement nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil SPLpartialrefinement nil)
    (member const-decl "bool" sets nil)
    (weakPartialRefinementAlt const-decl "bool" SPLpartialrefinement
     nil)
    (strongPartialRefinement const-decl "bool" SPLpartialrefinement
     nil)
    (plRefinement const-decl "bool" SPLrefinement nil))
   shostak)))

