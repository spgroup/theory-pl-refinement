CKtrans: THEORY
BEGIN
  IMPORTING FeatureModelSemantics, set_aux_lemmas, AssetMapping, set_comp_lemmas

  Transformation: TYPE+

  Item: TYPE=[# exp:Formula_, tasks:Transformation #]
  CK: TYPE = list[Item]

  ts: VAR list[Transformation]
  t: VAR Transformation
  am,am1,am2,amt,amt1,amt2: VAR AM
  fm: VAR WFM
  exp: VAR Formula_
  ck,ck2,its: VAR CK
  item,it,it2: VAR Item
  items,its1,its2: VAR list[Item]
  c: VAR Configuration
  assets,S,S1,S2: VAR finite_sets[Asset].finite_set
  s: VAR set[Configuration]

  exps(ck) : RECURSIVE set[Formula_] = 
    CASES ck OF 
      null: emptyset,
      cons(it,its): union(exp(it),exps(its))
    ENDCASES
  MEASURE length(ck)

  items(ck) : set[Item] = list2set(ck)

  getExp(it) : Formula_ = exp(it)
  getRS(it) : Transformation = tasks(it)

  transform(t,am,amt): AM
  
  semanticsCK(ck,am,c,amt): RECURSIVE finite_sets[Asset].finite_set = 
    CASES ck OF 
      null: image(amt),
      cons(it,its): IF satisfies(exp(it),c) THEN semanticsCK(its,am,c,transform(tasks(it),am,amt)) ELSE semanticsCK(its,am,c,amt) ENDIF
    ENDCASES
  MEASURE length(ck)

  semanticCK(ck,am,c,amt): RECURSIVE AM = 
    CASES ck OF 
      null: amt,
      cons(it,its): IF satisfies(exp(it),c) THEN semanticCK(its,am,c,transform(tasks(it),am,amt)) ELSE semanticCK(its,am,c,amt) ENDIF
    ENDCASES
  MEASURE length(ck)

  semantics(ck)(am)(c): finite_sets[Asset].finite_set = 
    semanticsCK(ck,am,c,emptyset)

  preserv: AXIOM
    FORALL(am1,am2,t,amt1,amt2):
         |>(am1,am2) AND |>(amt1,amt2) 
     => |>(transform(t,am1,amt1),transform(t,am2,amt2)) 

  compAmRef: THEOREM
    FORALL(am1,am2): |>(am1,am2) =>
      FORALL(ck,c,amt1,amt2):
         |>(amt1,amt2) AND wfProduct(semanticsCK(ck,am1,c,amt1))
	=> wfProduct(semanticsCK(ck,am2,c,amt2)) AND (semanticsCK(ck,am1,c,amt1) |- semanticsCK(ck,am2,c,amt2))

  compAmRefEmptyset: THEOREM
    FORALL(am1,am2): |>(am1,am2) =>
      FORALL(ck,c):
        wfProduct( semantics(ck)(am1)(c) )
	=> wfProduct(semantics(ck)(am2)(c)) AND (semantics(ck)(am1)(c) |- semantics(ck)(am2)(c))

  wfCK(fm,am,ck) : bool =
    FORALL exp: exps(ck)(exp) => wt(fm,exp) 

  addItemsBefore: LEMMA FORALL (am,ck,its,s,amt) :
       (FORALL c: s(c) => 
                         ( 
                            (FORALL exp: exps(its)(exp) => NOT satisfies(exp,c))
                            => 
                            (semanticsCK(ck,am,c,amt) = semanticsCK(append(its,ck),am,c,amt))
                         ))


  addItemsAfter: LEMMA FORALL (am,ck,its,s,amt):
       (FORALL c: s(c) => 
                         ( 
                            (FORALL exp: exps(its)(exp) => NOT satisfies(exp,c))
                            => 
                            (semanticsCK(ck,am,c,amt) = semanticsCK(append(ck,its),am,c,amt))
                         ))
                         

End CKtrans
