(CKtrans
 (exps_TCC1 0
  (exps_TCC1-1 nil 3596278242 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (transform_TCC1 0
  (transform_TCC1-1 nil 3686574231 ("" (existence-tcc) nil nil) nil
   nil))
 (semantics_TCC1 0
  (semantics_TCC1-1 nil 3596278242 ("" (subtype-tcc) nil nil)
   ((emptyset const-decl "set" sets nil)
    (unique const-decl "bool" maps nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (similarFunc 0
  (similarFunc-1 nil 3686576128
   ("" (skolem 1 (ck am c amt)) (("" (postpone) nil nil)) nil) nil
   shostak))
 (compAmRef 0
  (compAmRef-1 nil 3596281849
   ("" (skolem 1 (am1 am2))
    (("" (flatten)
      (("" (induct ck)
        (("1" (expand semanticsCK)
          (("1" (skolem 1 (c amt1 amt2))
            (("1" (flatten)
              (("1" (lemma amRefCompositional)
                (("1" (instantiate -1 (amt1 amt2))
                  (("1" (assert)
                    (("1" (instantiate -1 "domain(amt1)")
                      (("1" (instantiate -1 emptyset)
                        (("1"
                          (lemma
                           "sets_lemmas[Asset].union_commutative")
                          (("1"
                            (lemma "sets_lemmas[Asset].union_empty")
                            (("1" (copy -2)
                              (("1"
                                (instantiate
                                 -1
                                 (emptyset "map(amt1,domain(amt1))"))
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (copy -2)
                                    (("1"
                                      (instantiate
                                       -4
                                       (emptyset
                                        "map(amt2,domain(amt2))"))
                                      (("1"
                                        (instantiate
                                         -3
                                         ("map(amt2,domain(amt2))"))
                                        (("1"
                                          (instantiate
                                           -1
                                           ("map(amt1,domain(amt1))"))
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "sets_lemmas[Asset].union_commutative")
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     (emptyset
                                                      "map(amt2, domain(amt1))"))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (lemma
                                                         "sets_lemmas[Asset].union_empty")
                                                        (("1"
                                                          (instantiate
                                                           -1
                                                           "map(amt2, domain(amt1))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "|>"
                                                               -8)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "dom(amt1)=domain(amt1) AND dom(amt2)=domain(amt2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "map(amt1, domain(amt1))=image(amt1) AND map(amt2, domain(amt2))=image(amt2)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               -11
                                                                               RL)
                                                                              (("1"
                                                                                (replace
                                                                                 -12
                                                                                 -11)
                                                                                (("1"
                                                                                  (replace
                                                                                   -4
                                                                                   -11)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (bddsimp
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           map
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             image)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 domain
                                                                                 1)
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         1
                                                                                         an)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (instantiate
                                                                                         1
                                                                                         an)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         1
                                                                                         an)
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("4"
                                                                                      (flatten)
                                                                                      (("4"
                                                                                        (instantiate
                                                                                         1
                                                                                         an)
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("5"
                                                                                      (instantiate
                                                                                       1
                                                                                       an)
                                                                                      (("5"
                                                                                        (assert)
                                                                                        (("5"
                                                                                          (instantiate
                                                                                           1
                                                                                           x!1)
                                                                                          (("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("6"
                                                                                      (instantiate
                                                                                       1
                                                                                       an)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        (("6"
                                                                                          (instantiate
                                                                                           1
                                                                                           x!1)
                                                                                          (("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("7"
                                                                                      (instantiate
                                                                                       1
                                                                                       an)
                                                                                      (("7"
                                                                                        (assert)
                                                                                        (("7"
                                                                                          (instantiate
                                                                                           1
                                                                                           x!1)
                                                                                          (("7"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("8"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("8"
                                                                                      (instantiate
                                                                                       1
                                                                                       an)
                                                                                      (("8"
                                                                                        (assert)
                                                                                        (("8"
                                                                                          (instantiate
                                                                                           1
                                                                                           x!1)
                                                                                          (("8"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           map
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             image
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               domain
                                                                               1)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (bddsimp
                                                                                   1)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         1
                                                                                         an)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skolem
                                                                                     -1
                                                                                     an)
                                                                                    (("2"
                                                                                      (instantiate
                                                                                       1
                                                                                       an)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           1
                                                                                           x!1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     dom)
                                                                    (("2"
                                                                      (expand
                                                                       domain)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 (it its))
          (("2" (flatten)
            (("2" (skolem 1 (c amt1 amt2))
              (("2" (flatten) (("2" (postpone) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (compAmRefEmptyset 0
  (compAmRefEmptyset-1 nil 3671360709 ("" (postpone) nil nil) nil
   shostak))
 (wfCK_TCC1 0
  (wfCK_TCC1-1 nil 3596278242 ("" (subtype-tcc) nil nil)
   ((wfTree const-decl "bool" FeatureModel nil)) nil))
 (addItemsBefore 0
  (addItemsBefore-1 nil 3680542090
   ("" (induct its)
    (("1" (induct ck)
      (("1" (skolem 1 (am s amt))
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand append) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 (it its))
        (("2" (bddsimp)
          (("2" (skolem 1 (am s amt))
            (("2" (skolem 1 c)
              (("2" (bddsimp)
                (("2" (expand append) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 (it its))
      (("2" (bddsimp)
        (("2" (skolem 1 (am ck s amt))
          (("2" (skolem 1 c)
            (("2" (bddsimp)
              (("2" (inst -1 am ck s amt)
                (("2" (inst -1 c)
                  (("2" (bddsimp)
                    (("1" (name "x" "semanticsCK(ck, am, c, amt)")
                      (("1" (replace -1 -3)
                        (("1" (replace -1 1)
                          (("1" (expand append 1)
                            (("1" (expand semanticsCK 1)
                              (("1"
                                (inst -4 "exp(it)")
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (lift-if)
                                    (("1" (bddsimp) nil nil))
                                    nil)
                                   ("2"
                                    (expand exps 1)
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (expand singleton)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 exp)
                      (("2" (inst -2 exp)
                        (("2" (bddsimp)
                          (("2" (expand exps 1)
                            (("2" (expand union)
                              (("2"
                                (expand member)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-eq-decl nil CKtrans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (append def-decl "list[T]" list_props nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (list_induction formula-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil))
   shostak))
 (addItemsAfter 0
  (addItemsAfter-2 nil 3680616238
   ("" (induct ck)
    (("1" (induct its)
      (("1" (skolem 1 (am s amt))
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand append) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 (it its))
        (("2" (bddsimp)
          (("2" (skolem 1 (am s amt))
            (("2" (skolem 1 c)
              (("2" (bddsimp)
                (("2" (expand append)
                  (("2" (inst -1 am s amt)
                    (("2" (inst -1 c)
                      (("2" (bddsimp)
                        (("1" (inst -3 "exp(it)")
                          (("1"
                            (name "x" "semanticsCK(null, am, c, amt)")
                            (("1" (replace -1 -3)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (expand semanticsCK 2)
                                    (("1"
                                      (lift-if)
                                      (("1" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 2)
                                  (("2"
                                    (expand semanticsCK 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand exps)
                                          (("2"
                                            (expand union)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (expand singleton)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 item)
                          (("2" (inst -2 item)
                            (("2" (bddsimp)
                              (("2"
                                (expand exps 1)
                                (("2"
                                  (expand union)
                                  (("2"
                                    (expand member)
                                    (("2" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 (it its))
      (("2" (bddsimp)
        (("2" (skolem 1 (am ck s amt))
          (("2" (skolem 1 c)
            (("2" (bddsimp)
              (("2" (expand append 1)
                (("2" (expand semanticsCK 1)
                  (("2" (lift-if)
                    (("2" (bddsimp)
                      (("1"
                        (inst -1 am ck s
                         "transform(tasks(it), am, amt)")
                        (("1" (inst -1 c) (("1" (bddsimp) nil nil))
                          nil))
                        nil)
                       ("2" (inst -1 am ck s amt)
                        (("2" (inst -1 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CK type-eq-decl nil CKtrans nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (exps def-decl "set[Formula_]" CKtrans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (append def-decl "list[T]" list_props nil)
    (Item type-eq-decl nil CKtrans nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Formula_ type-decl nil Formula__adt nil)
    (list_induction formula-decl nil list_adt nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (transform const-decl "AM" CKtrans nil))
   nil)
  (addItemsAfter-1 nil 3680541556
   ("" (induct ck)
    (("1" (induct its)
      (("1" (skolem 1 (am s amt))
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand append) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 (it its))
        (("2" (bddsimp)
          (("2" (skolem 1 (am s amt))
            (("2" (skolem 1 c)
              (("2" (bddsimp)
                (("2" (expand append)
                  (("2" (inst -1 am s amt)
                    (("2" (inst -1 c)
                      (("2" (bddsimp)
                        (("1" (inst -3 it)
                          (("1" (expand member)
                            (("1"
                              (name "x"
                                    "semanticsCK(null, am, c, amt)")
                              (("1"
                                (replace -1 -3)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (expand semanticsCK 2)
                                    (("1"
                                      (lift-if)
                                      (("1" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 item)
                          (("2" (inst -2 item)
                            (("2" (bddsimp)
                              (("2"
                                (expand member 1)
                                (("2" (bddsimp) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 (it its))
      (("2" (bddsimp)
        (("2" (skolem 1 (am ck s amt))
          (("2" (skolem 1 c)
            (("2" (bddsimp)
              (("2" (expand append 1)
                (("2" (expand semanticsCK 1)
                  (("2" (lift-if)
                    (("2" (bddsimp)
                      (("1"
                        (inst -1 am ck s
                         "transform(tasks(it), am, amt)")
                        (("1" (inst -1 c) (("1" (bddsimp) nil nil))
                          nil))
                        nil)
                       ("2" (inst -1 am ck s amt)
                        (("2" (inst -1 c) (("2" (bddsimp) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transform const-decl "AM" CKtrans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Transformation nonempty-type-decl nil CKtrans nil)
    (Item type-eq-decl nil CKtrans nil)
    (append def-decl "list[T]" list_props nil)
    (semanticsCK def-decl "finite_sets[Asset].finite_set" CKtrans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (CK type-eq-decl nil CKtrans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

