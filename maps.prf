(maps
 (mappingUnique 0
  (mappingUnique-1 nil 3498485067 3499765223
   ("" (skolem 1 (A an))
    (("" (typepred A)
      (("" (expand unique)
        (("" (expand singleton?)
          (("" (expand empty?)
            (("" (expand member)
              (("" (flatten)
                (("" (skolem 2 x)
                  (("" (instantiate 1 x)
                    (("1" (skolem 1 Y)
                      (("1" (instantiate -2 (an x Y))
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   35 10 t shostak))
 (inDom 0
  (inDom-1 nil 3498485387 3499765223
   ("" (skolem 1 (m l r))
    (("" (expand dom)
      (("" (flatten)
        (("" (instantiate 1 r) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((dom const-decl "set[S]" maps nil)
    (T formal-type-decl nil maps nil))
   60 10 t shostak))
 (map_TCC1 0
  (map_TCC1-2 nil 3499765259 3499765264
   ("" (skolem 1 ("A" "_"))
    ((""
      (use "measure_induction[finite_sets[S].finite_set,nat, finite_sets[S].Card, <]")
      (("1" (bddsimp)
        (("1" (skolem 1 x)
          (("1" (flatten)
            (("1" (case "empty?(x)")
              (("1" (lemma sets_lemmas[S].emptyset_is_empty?)
                (("1" (instantiate -1 x)
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (expand emptyset 1)
                        (("1" (lemma sets[T].emptyset)
                          (("1" (replace -1 1 RL)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand empty?)
                (("2" (expand member)
                  (("2" (skolem 1 item)
                    (("2" (name "Y" "remove(item,x)")
                      (("2" (instantiate -3 Y)
                        (("2" (lemma finite_sets[S].card_remove)
                          (("2" (instantiate -1 (x item))
                            (("2" (assert)
                              (("2"
                                (lemma
                                 set_aux_lemmas[S].lemmaUnionRemove)
                                (("2"
                                  (instantiate -1 (x Y item))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (expand union +)
                                          (("2"
                                            (expand singleton +)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (case
                                                 " ({r: T | EXISTS (l: S): (Y(l) OR l = item) AND A(l, r)})
                                            =
                                            union({r: T | EXISTS (l: S): Y(l) AND A(l, r)},
                                                  {r: T | EXISTS (l: S): l = item AND A(l, r)})")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (lemma
                                                     finite_sets[T].finite_union)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       ("{r: T | EXISTS (l: S): Y(l) AND A(l, r)}"
                                                        "{r: T | EXISTS (l: S): l = item AND A(l, r)}"))
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "{r: T | EXISTS (l: S): l = item AND A(l, r)}={r: T | A(item, r)}")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             mappingUnique)
                                                            (("1"
                                                              (instantiate
                                                               -1
                                                               (A
                                                                item))
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lemma
                                                                   finite_sets[T].finite_singleton)
                                                                  (("1"
                                                                    (instantiate
                                                                     -1
                                                                     "{r: T | A(item, r)}")
                                                                    (("1"
                                                                      (expand
                                                                       singleton_elt
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         singleton
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "{y: T | y = the! (x: T): A(item, x)}={r: T | A(item, r)}")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               RL)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               A)
                                                                              (("2"
                                                                                (expand
                                                                                 unique)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (bddsimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (instantiate
                                                                                       -3
                                                                                       (item
                                                                                        x!1
                                                                                        "the! (x: T): A(item, x)"))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skolem
                                                                               1
                                                                               yt)
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   sets_lemmas[T].emptyset_is_empty?)
                                                                  (("2"
                                                                    (instantiate
                                                                     -1
                                                                     "{r: T | A(item, r)}")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (bddsimp 1)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               l)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (instantiate
                                                               1
                                                               item)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand union)
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (bddsimp)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("1"
                                                              (instantiate
                                                               2
                                                               l!1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((wf_nat formula-decl nil naturalnumbers nil)
    (lemmaUnionRemove formula-decl nil set_aux_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (mappingUnique formula-decl nil maps nil)
    (the const-decl "(p)" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (remove const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil maps nil) (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil maps nil)
    (measure_induction formula-decl nil measure_induction nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   4478 580 nil nil)
  (map_TCC1-1 nil 3498485950 3499765224
   ("" (skolem 1 ("A" "_"))
    ((""
      (use "measure_induction[finite_sets[S].finite_set,nat, finite_sets[S].Card, <]")
      (("1" (bddsimp)
        (("1" (skolem 1 x)
          (("1" (flatten)
            (("1" (case "empty?(x)")
              (("1" (lemma sets_lemmas[S].emptyset_is_empty?)
                (("1" (instantiate -1 x)
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (expand emptyset 1)
                        (("1" (lemma sets[T].emptyset)
                          (("1" (replace -1 1 RL)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand empty?)
                (("2" (expand member)
                  (("2" (skolem 1 item)
                    (("2" (name "Y" "remove(item,x)")
                      (("2" (instantiate -3 Y)
                        (("2" (lemma finite_sets[S].card_remove)
                          (("2" (instantiate -1 (x item))
                            (("2" (assert)
                              (("2"
                                (lemma SPGlemmas[S].lemmaUnionRemove)
                                (("2"
                                  (instantiate -1 (x Y item))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (expand union +)
                                          (("2"
                                            (expand singleton +)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (case
                                                 " ({r: T | EXISTS (l: S): (Y(l) OR l = item) AND A(l, r)})
                                 =
                                 union({r: T | EXISTS (l: S): Y(l) AND A(l, r)},
                                       {r: T | EXISTS (l: S): l = item AND A(l, r)})")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (lemma
                                                     finite_sets[T].finite_union)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       ("{r: T | EXISTS (l: S): Y(l) AND A(l, r)}"
                                                        "{r: T | EXISTS (l: S): l = item AND A(l, r)}"))
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "{r: T | EXISTS (l: S): l = item AND A(l, r)}={r: T | A(item, r)}")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             mappingUnique)
                                                            (("1"
                                                              (instantiate
                                                               -1
                                                               (A
                                                                item))
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lemma
                                                                   finite_sets[T].finite_singleton)
                                                                  (("1"
                                                                    (instantiate
                                                                     -1
                                                                     "{r: T | A(item, r)}")
                                                                    (("1"
                                                                      (expand
                                                                       singleton_elt
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         singleton
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "{y: T | y = the! (x: T): A(item, x)}={r: T | A(item, r)}")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               RL)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               A)
                                                                              (("2"
                                                                                (expand
                                                                                 unique)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (bddsimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (instantiate
                                                                                       -3
                                                                                       (item
                                                                                        x!1
                                                                                        "the! (x: T): A(item, x)"))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skolem
                                                                               1
                                                                               yt)
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   sets_lemmas[T].emptyset_is_empty?)
                                                                  (("2"
                                                                    (instantiate
                                                                     -1
                                                                     "{r: T | A(item, r)}")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (bddsimp 1)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               l)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (instantiate
                                                               1
                                                               item)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand union)
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (bddsimp)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("1"
                                                              (instantiate
                                                               2
                                                               l!1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (instantiate
                                                             1
                                                             l!1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (S formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil) (T formal-type-decl nil maps nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove const-decl "set" sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (the const-decl "(p)" sets nil)
    (mappingUnique formula-decl nil maps nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   726 410 t nil))
 (unionMap 0
  (unionMap-1 nil 3498486026 3499765224
   ("" (skolem 1 (m X Y))
    (("" (decompose-equality 1)
      (("" (expand* union map member)
        (("" (bddsimp)
          (("1" (skolem -1 l)
            (("1" (flatten)
              (("1" (instantiate 1 l)
                (("1" (instantiate 2 l)
                  (("1" (assert) (("1" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skolem -1 l)
            (("2" (flatten)
              (("2" (instantiate 1 l) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (skolem -1 l)
            (("3" (flatten)
              (("3" (instantiate 1 l) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (S formal-type-decl nil maps nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil maps nil)
    (member const-decl "bool" sets nil))
   74 30 t shostak))
 (existsMap 0
  (existsMap-1 nil 3499011771 3499765224
   ("" (skolem 1 (m l r))
    (("" (flatten)
      (("" (decompose-equality 1)
        (("" (expand singleton)
          (("" (expand map)
            (("" (bddsimp)
              (("1" (skolem -1 l1)
                (("1" (flatten)
                  (("1" (typepred m)
                    (("1" (expand unique)
                      (("1" (instantiate -2 (l r x!1))
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (instantiate 1 l) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (S formal-type-decl nil maps nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   57 30 t shostak))
 (mapUnion 0
  (mapUnion-1 nil 3498486106 3499765224
   ("" (skolem 1 (m ls1 ls2 a))
    (("" (flatten)
      (("" (expand* union map member)
        (("" (skolem -1 l)
          (("" (flatten)
            (("" (instantiate 1 l)
              (("" (instantiate 2 l)
                (("" (assert) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((S formal-type-decl nil maps nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil))
   30 20 t shostak))
 (mapAM 0
  (mapAM-1 nil 3498486157 3499765224
   ("" (skolem 1 (m l ls))
    (("" (lemma mapUnion)
      (("" (expand* dom map union singleton member)
        (("" (flatten)
          (("" (skolem -2 r)
            (("" (instantiate 1 r)
              (("" (assert)
                (("" (decompose-equality 1)
                  (("" (bddsimp)
                    (("1" (instantiate -2 (m l ls x!1))
                      (("1" (expand singleton)
                        (("1" (assert)
                          (("1" (bddsimp)
                            (("1" (skolem -1 l1)
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate 2 l1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (typepred m)
                                          (("1"
                                            (expand unique)
                                            (("1"
                                              (instantiate
                                               -2
                                               (l r x!1))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (instantiate 1 l) (("2" (assert) nil nil))
                      nil)
                     ("3" (skolem -1 l1)
                      (("3" (flatten)
                        (("3" (instantiate 1 l1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mapUnion formula-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton? const-decl "bool" sets nil)
    (T formal-type-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil))
   118 70 t shostak))
 (notExists 0
  (notExists-1 nil 3498486465 3499765224
   ("" (skolem 1 (m ls))
    (("" (flatten)
      (("" (expand* map emptyset dom)
        (("" (decompose-equality 2)
          (("" (skolem -1 l)
            (("" (flatten)
              (("" (instantiate 1 l)
                (("" (assert)
                  (("" (instantiate 1 x!1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((S formal-type-decl nil maps nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (FALSE const-decl "bool" booleans nil)
    (T formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (dom const-decl "set[S]" maps nil)
    (emptyset const-decl "set" sets nil))
   34 30 t shostak))
 (uniqueUnion 0
  (uniqueUnion-1 nil 3499771133 3499771530
   ("" (skolem 1 (m1 m2))
    (("" (flatten)
      (("" (typepred m1)
        (("" (typepred m2)
          (("" (expand* unique union member)
            (("" (skolem 1 (l r1 r2))
              (("" (flatten)
                (("" (instantiate -2 (l r1 r2))
                  (("" (instantiate -4 (l r1 r2))
                    (("" (assert)
                      (("" (bddsimp)
                        (("1" (expand dom)
                          (("1" (instantiate -5 l)
                            (("1" (bddsimp)
                              (("1"
                                (instantiate 3 r2)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (instantiate 3 r1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand dom)
                          (("2" (instantiate -5 l)
                            (("2" (bddsimp)
                              (("1"
                                (instantiate 3 r1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (instantiate 3 r2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil))
   106175 60 t shostak)))

