(maps
 (domain_TCC1 0
  (domain_TCC1-1 nil 3558288576 3559486535
   ("" (skolem 1 m)
    (("" (typepred m)
      (("" (case "empty?(m)")
        (("1" (lemma "sets_lemmas[[S,T]].emptyset_is_empty?")
          (("1" (instantiate -1 m)
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (expand emptyset 1)
                  (("1" (lemma sets[S].emptyset)
                    (("1" (replace -1 1 RL) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand* empty? member)
          (("2" (skolem 1 x)
            (("2" (name "Y" "remove(x,m)")
              (("2" (lemma "finite_sets[[S,T]].card_remove")
                (("2" (instantiate -1 (m x))
                  (("2" (assert)
                    (("2"
                      (lemma "set_aux_lemmas[[S,T]].lemmaUnionRemove")
                      (("2" (instantiate -1 (m Y x))
                        (("2" (expand member)
                          (("2" (replace -1 1)
                            (("2" (case "subset?(Y,m)")
                              (("1"
                                (case
                                 "member(x`1,{l: S | EXISTS (r: T): union(Y, singleton[[S, T]](x))(l, r)})")
                                (("1"
                                  (expand member)
                                  (("1"
                                    (skolem -1 a)
                                    (("1"
                                      (expand union -1)
                                      (("1"
                                        (expand singleton -1)
                                        (("1"
                                          (expand member)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand unique)
                                              (("1"
                                                (instantiate
                                                 -8
                                                 ("x`1" a "x`2"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (replace -8)
                                                      (("1"
                                                        (replace
                                                         -5
                                                         -1
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           remove
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -3)
                                                      (("2"
                                                        (expand*
                                                         union
                                                         singleton
                                                         member)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 -6 RL)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 1 RL)
                                                  (("2"
                                                    (expand
                                                     singleton
                                                     +)
                                                    (("2"
                                                      (expand union +)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (lemma
                                                           "finite_sets[[S,T]].finite_subset")
                                                          (("2"
                                                            (instantiate
                                                             -1
                                                             (m Y))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (typepred
                                                                   Y)
                                                                  (("2"
                                                                    (case
                                                                     "{l: S | EXISTS (r: T): Y(l, r) OR l = x`1 AND r = a}=union({l: S | EXISTS (r: T): Y(l, r)},{l: S | l = x`1})")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         finite_sets[S].finite_union)
                                                                        (("1"
                                                                          (instantiate
                                                                           -1
                                                                           ("{l: S | EXISTS (r: T): Y(l, r)}"
                                                                            "{l: S | l = x`1}"))
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "finite_sets[S].finite_singleton")
                                                                            (("2"
                                                                              (instantiate
                                                                               -1
                                                                               "x`1")
                                                                              (("2"
                                                                                (expand
                                                                                 singleton
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             unique)
                                                                            (("3"
                                                                              (instantiate
                                                                               -10
                                                                               ("x`1"
                                                                                "x`2"
                                                                                a))
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (hide
                                                                                   -10)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -3
                                                                                     -8)
                                                                                    (("3"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand*
                                                                       union
                                                                       member)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         1)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             aa)
                                                                            (("1"
                                                                              (instantiate
                                                                               1
                                                                               aa)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skolem
                                                                             -1
                                                                             aa)
                                                                            (("2"
                                                                              (instantiate
                                                                               1
                                                                               aa)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (instantiate
                                                                             1
                                                                             a)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand union)
                                  (("2"
                                    (expand singleton)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (instantiate 1 "x`2")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand* subset? member)
                                (("2"
                                  (skolem 1 pair)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (expand*
                                         union
                                         singleton
                                         member)
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 674117 340 t nil))
 (image_TCC1 0
  (image_TCC1-1 nil 3558433449 3559485819 ("" (subtype-tcc) nil nil)
   unfinished nil 1386 190 nil nil))
 (pairs_TCC1 0
  (pairs_TCC1-1 nil 3558201819 3559387214 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   222 160 t nil))
 (mappingUnique 0
  (mappingUnique-1 nil 3531652092 3559387214
   ("" (skolem 1 (A an))
    (("" (typepred A)
      (("" (expand* unique singleton? empty? member)
        (("" (flatten)
          (("" (skolem 2 x)
            (("" (instantiate 1 x)
              (("1" (skolem 1 y)
                (("1" (instantiate -2 (an x y))
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton? const-decl "bool" sets nil))
   49 20 t shostak))
 (inDom 0
  (inDom-1 nil 3531652157 3559387215 ("" (grind) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (injective? const-decl "bool" functions nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dom const-decl "set[S]" maps nil))
   101 60 t shostak))
 (map_TCC1 0
  (map_TCC1-1 nil 3531652091 3559387215
   ("" (skolem 1 (A "_"))
    ((""
      (use "measure_induction[finite_sets[S].finite_set,nat, finite_sets[S].Card, <]")
      (("1" (bddsimp)
        (("1" (skolem 1 x)
          (("1" (flatten)
            (("1" (case "empty?(x)")
              (("1" (lemma sets_lemmas[S].emptyset_is_empty?)
                (("1" (instantiate -1 x)
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (expand emptyset 1)
                        (("1" (lemma sets[T].emptyset)
                          (("1" (replace -1 1 RL)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* empty? member)
                (("2" (skolem 1 item)
                  (("2" (name "Y" "remove(item,x)")
                    (("2" (instantiate -3 Y)
                      (("2" (lemma finite_sets[S].card_remove)
                        (("2" (instantiate -1 (x item))
                          (("2" (assert)
                            (("2"
                              (lemma
                               set_aux_lemmas[S].lemmaUnionRemove)
                              (("2"
                                (instantiate -1 (x Y item))
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (expand union +)
                                        (("2"
                                          (expand singleton +)
                                          (("2"
                                            (expand member)
                                            (("2"
                                              (case
                                               " ({r: T | EXISTS (l: S): (Y(l) OR l = item) AND A(l, r)})
                                            =
                                            union({r: T | EXISTS (l: S): Y(l) AND A(l, r)},
                                                  {r: T | EXISTS (l: S): l = item AND A(l, r)})")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (lemma
                                                   finite_sets[T].finite_union)
                                                  (("1"
                                                    (instantiate
                                                     -1
                                                     ("{r: T | EXISTS (l: S): Y(l) AND A(l, r)}"
                                                      "{r: T | EXISTS (l: S): l = item AND A(l, r)}"))
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "{r: T | EXISTS (l: S): l = item AND A(l, r)}={r: T | A(item, r)}")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (lemma
                                                           mappingUnique)
                                                          (("1"
                                                            (instantiate
                                                             -1
                                                             (A item))
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (lemma
                                                                 finite_sets[T].finite_singleton)
                                                                (("1"
                                                                  (instantiate
                                                                   -1
                                                                   "{r: T | A(item, r)}")
                                                                  (("1"
                                                                    (expand
                                                                     singleton_elt
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       singleton
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         member
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "{y: T | y = the! (x: T): A(item, x)}={r: T | A(item, r)}")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             RL)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             A)
                                                                            (("2"
                                                                              (expand
                                                                               unique)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (instantiate
                                                                                     -3
                                                                                     (item
                                                                                      x!1
                                                                                      "the! (x: T): A(item, x)"))
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skolem
                                                                             1
                                                                             yt)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 sets_lemmas[T].emptyset_is_empty?)
                                                                (("2"
                                                                  (instantiate
                                                                   -1
                                                                   "{r: T | A(item, r)}")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (decompose-equality
                                                         1)
                                                        (("2"
                                                          (bddsimp 1)
                                                          (("1"
                                                            (skolem
                                                             -1
                                                             l)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (instantiate
                                                             1
                                                             item)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                (("2"
                                                  (expand union)
                                                  (("2"
                                                    (expand member)
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (instantiate
                                                           1
                                                           l!1)
                                                          (("1"
                                                            (instantiate
                                                             2
                                                             l!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (instantiate
                                                           1
                                                           l!1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (instantiate
                                                           1
                                                           l!1)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (S formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil) (T formal-type-decl nil maps nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (lemmaUnionRemove formula-decl nil set_aux_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil) nil nil
    (mappingUnique formula-decl nil maps nil)
    (the const-decl "(p)" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (remove const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   619 370 t nil))
 (getRight_TCC1 0
  (getRight_TCC1-1 nil 3557684691 3559387215
   ("" (skolem 1 (am name))
    (("" (typepred am)
      (("" (typepred name)
        (("" (expand extend)
          (("" (expand map)
            (("" (assert)
              (("" (expand singleton?)
                (("" (expand dom)
                  (("" (skolem -1 asset)
                    (("" (instantiate 1 asset)
                      (("1" (skolem 1 yy)
                        (("1" (typepred yy)
                          (("1" (skolem -1 an)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (expand singleton)
                                    (("1"
                                      (expand unique)
                                      (("1"
                                        (instantiate -6 (an yy asset))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (instantiate 1 name)
                        (("2" (assert)
                          (("2" (expand singleton)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (extend const-decl "R" extend nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (singleton const-decl "(singleton?)" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    nil nil nil (singleton? const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (dom const-decl "set[S]" maps nil))
   63 10 t nil))
 (unmap_TCC1 0
  (unmap_TCC1-1 nil 3558200078 3559390399
   ("" (skolem 1 (A "_"))
    ((""
      (use "measure_induction[finite_sets[T].finite_set,nat, finite_sets[T].Card, <]")
      (("1" (bddsimp)
        (("1" (skolem 1 x)
          (("1" (flatten)
            (("1" (case "empty?(x)")
              (("1" (lemma sets_lemmas[T].emptyset_is_empty?)
                (("1" (instantiate -1 x)
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (expand emptyset 1)
                        (("1" (lemma sets[S].emptyset)
                          (("1" (replace -1 1 RL)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* empty? member)
                (("2" (skolem 1 item)
                  (("2" (name "Y" "remove(item,x)")
                    (("2" (instantiate -3 Y)
                      (("2" (lemma finite_sets[T].card_remove)
                        (("2" (instantiate -1 (x item))
                          (("2" (assert)
                            (("2"
                              (lemma
                               set_aux_lemmas[T].lemmaUnionRemove)
                              (("2"
                                (instantiate -1 (x Y item))
                                (("2"
                                  (expand member)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (expand union +)
                                      (("2"
                                        (expand singleton +)
                                        (("2"
                                          (expand member)
                                          (("2"
                                            (case
                                             " ({l: S | EXISTS (r: T): (Y(r) OR r = item) AND A(l, r)})
                                                       =
                                                       union({l: S | EXISTS (r: T): Y(r) AND A(l, r)},
                                                             {l: S | EXISTS (r: T): r = item AND A(l, r)})")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma
                                                 finite_sets[S].finite_union)
                                                (("1"
                                                  (instantiate
                                                   -1
                                                   ("{l: S | EXISTS (r: T): Y(r) AND A(l, r)}"
                                                    "{l: S | EXISTS (r: T): r = item AND A(l, r)}"))
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "{l: S | EXISTS (r: T): r = item AND A(l, r)}={l: S | A(l, item)}")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred A)
                                                        (("1"
                                                          (hide
                                                           (-2
                                                            -3
                                                            -4
                                                            -5
                                                            -6
                                                            -7
                                                            -8
                                                            2
                                                            3))
                                                          (("1"
                                                            (case
                                                             "subset?({l: S | A(l, item)},domain(A))")
                                                            (("1"
                                                              (lemma
                                                               finite_sets[S].finite_subset)
                                                              (("1"
                                                                (instantiate
                                                                 -1
                                                                 ("domain(A)"
                                                                  "{l: S | A(l, item)}"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand*
                                                               subset?
                                                               domain
                                                               member)
                                                              (("2"
                                                                (skolem
                                                                 1
                                                                 ll)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (instantiate
                                                                     1
                                                                     item)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (bddsimp)
                                                        (("1"
                                                          (skolem -1 a)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (instantiate
                                                           1
                                                           item)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand* union member)
                                                (("2"
                                                  (bddsimp)
                                                  (("1"
                                                    (skolem -1 a)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (instantiate
                                                           1
                                                           a)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (instantiate
                                                           2
                                                           a)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skolem -1 a)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (instantiate
                                                         1
                                                         a)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skolem -1 a)
                                                    (("3"
                                                      (instantiate 1 a)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   proved-incomplete
   ((wf_nat formula-decl nil naturalnumbers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove const-decl "set" sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (lemmaUnionRemove formula-decl nil set_aux_lemmas nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil maps nil)
    (measure_induction formula-decl nil measure_induction nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   95456 400 t nil))
 (uniqueUnion 0
  (uniqueUnion-1 nil 3531652769 3559387216
   ("" (skolem 1 (m1 m2))
    (("" (flatten)
      (("" (typepred m1)
        (("" (typepred m2)
          (("" (expand* unique union member)
            (("" (skolem 1 (l r1 r2))
              (("" (flatten)
                (("" (instantiate -2 (l r1 r2))
                  (("" (instantiate -4 (l r1 r2))
                    (("" (assert)
                      (("" (instantiate -3 l)
                        (("" (expand dom)
                          (("" (bddsimp)
                            (("1" (instantiate 3 r2)
                              (("1" (propax) nil nil)) nil)
                             ("2" (instantiate 3 r1)
                              (("2" (propax) nil nil)) nil)
                             ("3" (instantiate 3 r1)
                              (("3" (propax) nil nil)) nil)
                             ("4" (instantiate 3 r2)
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil))
   67 20 t shostak))
 (uniqueSingleton 0
  (uniqueSingleton-1 nil 3531652880 3559387216 ("" (grind) nil nil)
   proved-complete
   ((singleton const-decl "(singleton?)" sets nil)
    (unique const-decl "bool" maps nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   32 10 t shostak))
 (domUnion_TCC1 0
  (domUnion_TCC1-1 nil 3531652091 3559387216
   ("" (skolem 1 (m1 m2))
    (("" (flatten)
      (("" (typepred m1)
        (("" (typepred m2)
          (("" (hide (-1 -3))
            (("" (expand* unique union member dom)
              (("" (skolem 1 (an a1 a2))
                (("" (flatten)
                  (("" (instantiate -1 (an a1 a2))
                    (("" (instantiate -2 (an a1 a2))
                      (("" (instantiate -3 an)
                        (("" (bddsimp)
                          (("1" (instantiate 4 a2)
                            (("1" (propax) nil nil)) nil)
                           ("2" (instantiate 4 a1)
                            (("2" (propax) nil nil)) nil)
                           ("3" (instantiate 4 a1)
                            (("3" (propax) nil nil)) nil)
                           ("4" (instantiate 4 a2)
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((union const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil))
   68 20 t nil))
 (domUnion 0
  (domUnion-1 nil 3531652890 3559387216
   ("" (skolem 1 (m1 m2))
    (("" (flatten)
      (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((member const-decl "bool" sets nil)
    (S formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   136 80 t shostak))
 (unionMap 0
  (unionMap-1 nil 3531653082 3559387216
   ("" (skosimp)
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   proved-complete
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (S formal-type-decl nil maps nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil maps nil)
    (member const-decl "bool" sets nil))
   124 90 t shostak))
 (existsMap 0
  (existsMap-1 nil 3531653095 3559387216
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (typepred m!1)
        (("" (expand unique) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   proved-complete
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (S formal-type-decl nil maps nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil maps nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   180 120 t shostak))
 (rm_TCC1 0
  (rm_TCC1-1 nil 3531652091 3559387216
   ("" (skolem 1 (an A))
    (("" (expand dom)
      (("" (flatten)
        (("" (skolem 1 pair)
          (("" (flatten)
            (("" (skolem -1 a)
              (("" (case "map(A, singleton[S](an))=singleton(a)")
                (("1" (assert) nil nil)
                 ("2" (decompose-equality 1)
                  (("2" (typepred A) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((dom const-decl "set[S]" maps nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (T formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (S formal-type-decl nil maps nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil))
   209 150 t nil))
 (rm_TCC2 0
  (rm_TCC2-1 nil 3531652091 3559387217
   ("" (skolem 1 (an A))
    (("" (typepred A)
      (("" (expand* dom unique remove member)
        (("" (flatten)
          (("" (skolem 1 (an1 a1 a2))
            (("" (flatten)
              (("" (instantiate -2 (an1 a1 a2)) (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom const-decl "set[S]" maps nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   43 20 t nil))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3558443532 3559387217
   ("" (skolem 1 (ls m))
    (("" (typepred ls)
      (("" (typepred m)
        (("" (expand unique)
          (("" (bddsimp)
            (("1" (skolem 1 (l r1 r2))
              (("1" (instantiate -2 (l r1 r2))
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (lemma "finite_sets[[S,T]].finite_subset")
              (("2"
                (case "subset?({pair | m(pair) AND (NOT ls(pair`1))},m)")
                (("1"
                  (instantiate -2
                   (m "{pair | m(pair) AND (NOT ls(pair`1))}"))
                  (("1" (assert) nil nil)) nil)
                 ("2" (expand* subset? member)
                  (("2" (skolem 1 x) (("2" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil))
   58 30 t nil))
 (filter_TCC1 0
  (filter_TCC1-1 nil 3558433782 3559387217
   ("" (skolem 1 (ls m))
    (("" (typepred ls)
      (("" (typepred m)
        (("" (expand unique)
          (("" (bddsimp)
            (("1" (skolem 1 (l r1 r2))
              (("1" (flatten)
                (("1" (instantiate -2 (l r1 r2))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (lemma "finite_sets[[S,T]].finite_subset")
              (("2" (case "subset?({pair | m(pair) AND ls(pair`1)},m)")
                (("1"
                  (instantiate -2
                   (m "{pair | m(pair) AND ls(pair`1)}"))
                  (("1" (assert) nil nil)) nil)
                 ("2" (expand* subset? member)
                  (("2" (skolem 1 x) (("2" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil))
   58 30 t nil))
 (ow_TCC1 0
  (ow_TCC1-1 nil 3531652091 3559387217
   ("" (skolem 1 (pair A))
    (("" (typepred A)
      (("" (expand* dom union unique singleton member)
        (("" (flatten)
          (("" (skolem 1 (an a1 a2))
            (("" (flatten)
              (("" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (expand rm)
                  (("2" (lemma existsMap)
                    (("2" (instantiate -1 (A "pair`1" a2))
                      (("2" (assert)
                        (("2" (expand dom)
                          (("2" (bddsimp)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand remove)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand remove)
                              (("2"
                                (expand member)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -4 -3 RL)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand* rm remove member)
                  (("3" (expand dom)
                    (("3" (bddsimp)
                      (("1" (lemma existsMap)
                        (("1" (instantiate -1 (A "pair`1" a1))
                          (("1" (assert)
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand* rm remove member)
                  (("4" (assert)
                    (("4" (bddsimp)
                      (("1" (instantiate -2 (an a1 a2))
                        (("1" (assert) nil nil)) nil)
                       ("2" (instantiate -2 (an a1 a2))
                        (("2" (assert) nil nil)) nil)
                       ("3" (instantiate -2 (an a1 a2))
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rm const-decl "mapping" maps nil)
    (remove const-decl "set" sets nil)
    (singleton_rew formula-decl nil sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (existsMap formula-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil))
   152 70 t nil))
 (ow_TCC2 0
  (ow_TCC2-1 nil 3531652091 3559387217
   ("" (skolem 1 (pair m))
    (("" (typepred m)
      (("" (expand* dom unique union singleton member)
        (("" (flatten)
          (("" (skolem 2 (an a1 a2))
            (("" (flatten)
              (("" (instantiate -2 (an a1 a2))
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (instantiate 2 a1) (("1" (assert) nil nil))
                      nil)
                     ("2" (instantiate 2 a2) (("2" (assert) nil nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom const-decl "set[S]" maps nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil))
   53 20 t nil))
 (overw_TCC1 0
  (overw_TCC1-1 nil 3558434624 3559387217
   ("" (skolem 1 (pares m))
    (("" (typepred pares)
      (("" (typepred m)
        (("" (hide (-1 -3))
          (("" (expand* unique union remove domain member)
            (("" (skolem 1 (l r1 r2))
              (("" (flatten)
                (("" (bddsimp)
                  (("1" (instantiate -2 (l r1 r2))
                    (("1" (assert) nil nil)) nil)
                   ("2" (instantiate 1 r1) (("2" (propax) nil nil))
                    nil)
                   ("3" (instantiate 1 r2) (("3" (propax) nil nil))
                    nil)
                   ("4" (instantiate -1 (l r1 r2))
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "mapping" maps nil)
    (member const-decl "bool" sets nil)
    (domain const-decl "finite_sets[S].finite_set" maps nil)
    (union const-decl "set" sets nil))
   70 30 t nil))
 (uniqueUnionRM 0
  (uniqueUnionRM-1 nil 3531654016 3559387217
   ("" (skolem 1 (m l r))
    (("" (typepred m)
      (("" (expand unique)
        (("" (skolem 1 (l1 r1 r2))
          (("" (flatten)
            (("" (expand* union singleton member)
              (("" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (expand* rm dom remove member)
                  (("2" (bddsimp)
                    (("1" (lemma existsMap)
                      (("1" (instantiate -1 (m l1 r2))
                        (("1" (assert)
                          (("1" (replace -4)
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil)
                     ("3" (instantiate 1 r2) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand rm)
                  (("3" (bddsimp)
                    (("1" (expand* dom remove member)
                      (("1" (flatten)
                        (("1" (lemma existsMap)
                          (("1" (instantiate -1 (m l r1))
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand dom)
                      (("2" (instantiate 1 r1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand rm)
                  (("4" (bddsimp)
                    (("1" (expand* remove member)
                      (("1" (flatten)
                        (("1" (instantiate -2 (l1 r1 r2))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (instantiate -2 (l1 r1 r2))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (dom const-decl "set[S]" maps nil)
    (remove const-decl "set" sets nil)
    (rm const-decl "mapping" maps nil)
    (existsMap formula-decl nil maps nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton_rew formula-decl nil sets nil))
   123 60 t shostak))
 (domainContained 0
  (domainContained-1 nil 3531654585 3559387217
   ("" (expand* subset? member)
    (("" (skolem 1 (m l r))
      (("" (skolem 1 an)
        (("" (expand ow)
          (("" (flatten)
            (("" (bddsimp)
              (("1" (case "l=an")
                (("1" (replace -1)
                  (("1" (expand dom)
                    (("1" (skolem -2 a)
                      (("1" (instantiate 1 r)
                        (("1" (expand* union singleton member) nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand* dom union singleton member)
                  (("2" (skolem -1 a)
                    (("2" (instantiate 2 a)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand rm)
                            (("2" (assert)
                              (("2"
                                (bddsimp)
                                (("2" (expand* remove member) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* dom union singleton member)
                (("2" (skolem -1 a)
                  (("2" (instantiate 2 a) (("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((ow const-decl "mapping" maps nil)
    (remove const-decl "set" sets nil)
    (rm const-decl "mapping" maps nil)
    (T formal-type-decl nil maps nil) (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "set[S]" maps nil)
    (S formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   96 30 t shostak))
 (mapOR 0
  (mapOR-1 nil 3531654751 3559387217
   ("" (skolem 1 (m n l r))
    (("" (flatten)
      (("" (expand ow)
        (("" (case "dom(n)(l)")
          (("1" (assert)
            (("1" (expand rm)
              (("1" (decompose-equality 1)
                (("1" (bddsimp)
                  (("1" (expand map -1)
                    (("1" (skolem -1 an)
                      (("1" (flatten)
                        (("1" (replace -4)
                          (("1" (expand union -2)
                            (("1" (expand member)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (expand singleton)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand remove -2)
                                  (("2"
                                    (expand member)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand singleton -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma existsMap)
                                            (("2"
                                              (instantiate
                                               -1
                                               (n l x!1))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -3)
                    (("2" (expand* map singleton union remove member)
                      (("2" (instantiate 1 l) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand* map union singleton member dom)
              (("2" (replace -1)
                (("2" (decompose-equality 2)
                  (("2" (bddsimp)
                    (("1" (skolem -1 an)
                      (("1" (flatten)
                        (("1" (bddsimp)
                          (("1" (instantiate 2 x!1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (instantiate 1 l) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((dom const-decl "set[S]" maps nil)
    (mapping type-eq-decl nil maps nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil maps nil) (S formal-type-decl nil maps nil)
    (rm const-decl "mapping" maps nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (singleton_rew formula-decl nil sets nil)
    (existsMap formula-decl nil maps nil)
    (union const-decl "set" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ow const-decl "mapping" maps nil))
   187 100 t shostak))
 (mapUnion 0
  (mapUnion-1 nil 3531663201 3559387218 ("" (grind) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S formal-type-decl nil maps nil) (T formal-type-decl nil maps nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil))
   948 800 t shostak))
 (mapAM 0
  (mapAM-1 nil 3531663196 3559387218
   ("" (skolem 1 (m l ls))
    (("" (lemma mapUnion)
      (("" (expand* dom map union singleton member)
        (("" (flatten)
          (("" (skolem -2 r)
            (("" (instantiate 1 r)
              (("" (assert)
                (("" (decompose-equality 1)
                  (("" (bddsimp)
                    (("1" (instantiate -2 (m l ls x!1))
                      (("1" (expand singleton)
                        (("1" (bddsimp)
                          (("1" (skolem -1 l1)
                            (("1" (flatten)
                              (("1"
                                (instantiate 2 l1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (typepred m)
                                        (("1"
                                          (expand unique)
                                          (("1"
                                            (instantiate -2 (l x!1 r))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (instantiate 1 l) (("2" (assert) nil nil))
                      nil)
                     ("3" (skolem -1 l1)
                      (("3" (flatten)
                        (("3" (instantiate 1 l1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((mapUnion formula-decl nil maps nil)
    (S formal-type-decl nil maps nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton? const-decl "bool" sets nil)
    (T formal-type-decl nil maps nil)
    (dom const-decl "set[S]" maps nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil))
   124 70 t shostak))
 (notExists 0
  (notExists-1 nil 3531663526 3559387218
   ("" (skolem 1 (m ls))
    (("" (flatten)
      (("" (expand* map emptyset dom)
        (("" (decompose-equality 2)
          (("" (skolem -1 l)
            (("" (flatten)
              (("" (instantiate 1 l)
                (("" (assert)
                  (("" (instantiate 1 x!1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((S formal-type-decl nil maps nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (FALSE const-decl "bool" booleans nil)
    (T formal-type-decl nil maps nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (dom const-decl "set[S]" maps nil)
    (emptyset const-decl "set" sets nil))
   38 20 t shostak)))

