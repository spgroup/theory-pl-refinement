(AssetMapping
 (teste 0
  (teste-1 nil 3531822539 3531822678
   ("" (skolem 1 (an am))
    (("" (flatten)
      (("" (expand rm)
        (("" (assert)
          (("" (expand* empty? remove map singleton member)
            (("" (skolem 1 a)
              (("" (skolem -2 an1)
                (("" (flatten)
                  (("" (assert)
                    (("" (expand dom)
                      ((""
                        (case "{r: Asset | EXISTS (l: AssetName): l = an AND am(l, r)}=singleton(a)")
                        (("1" (assert)
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (decompose-equality 1)
                          (("2" (expand singleton)
                            (("2" (bddsimp)
                              (("1"
                                (skolem -1 ann)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred am)
                                    (("1"
                                      (expand unique)
                                      (("1"
                                        (instantiate -2 (an x!1 a))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (instantiate 1 an)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (dom const-decl "set[S]" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton_rew formula-decl nil sets nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AssetName type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (singleton? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (remove const-decl "set" sets nil)
    (rm const-decl "mapping" maps nil))
   138712 240 t shostak))
 (testeNovo 0
  (testeNovo-1 nil 3531823421 3531823432
   ("" (skolem 1 (a1 a2 an A))
    (("" (typepred A) (("" (grind) nil nil)) nil)) nil)
   unchecked
   ((AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Asset type-decl nil Assets nil)
    (AssetName type-decl nil Assets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   11267 130 t shostak))
 (teste2 0
  (teste2-1 nil 3531823438 3531823446 ("" (grind) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AssetName type-decl nil Assets nil)
    (Asset type-decl nil Assets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (unique const-decl "bool" maps nil))
   7829 180 t shostak))
 (assetMappingRefinement 0
  (assetMappingRefinement-1 nil 3531823450 3531823604
   ("" (expand* "|>" preorder? reflexive? transitive?)
    (("" (bddsimp)
      (("1" (skolem 1 (x y z))
        (("1" (flatten)
          (("1" (assert)
            (("1" (skolem 1 an)
              (("1" (flatten)
                (("1" (instantiate -2 an)
                  (("1" (assert)
                    (("1" (skolem -2 (a1 a2))
                      (("1" (flatten)
                        (("1" (instantiate -6 an)
                          (("1" (assert)
                            (("1" (skolem -6 (a3 a4))
                              (("1"
                                (flatten)
                                (("1"
                                  (typepred y)
                                  (("1"
                                    (expand unique)
                                    (("1"
                                      (instantiate -2 (an a2 a3))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (use assetRefinement)
                                            (("1"
                                              (expand*
                                               preorder?
                                               reflexive?
                                               transitive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (instantiate
                                                   -2
                                                   (a1 a3 a4))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (instantiate
                                                       1
                                                       (a1 a4))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 A)
        (("2" (skolem 1 an)
          (("2" (flatten)
            (("2" (expand dom)
              (("2" (skolem -1 a)
                (("2" (instantiate 1 (a a))
                  (("2" (use assetRefinement)
                    (("2" (expand* preorder? reflexive? transitive?)
                      (("2" (flatten)
                        (("2" (instantiate -1 a)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Asset type-decl nil Assets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (assetRefinement formula-decl nil Assets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (dom const-decl "set[S]" maps nil)
    (\|> const-decl "bool" AssetMapping nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil))
   154098 2990 t shostak))
 (amRefCompositional 0
  (amRefCompositional-1 nil 3531824118 3538407369
   ("" (skolem 1 (am1 am2))
    (("" (lemma asRefCompositional)
      (("" (flatten)
        (("" (expand "|>")
          (("" (flatten)
            ((""
              (use "measure_induction[finite_sets[AssetName].finite_set,nat, finite_sets[AssetName].Card, <]")
              (("1" (bddsimp)
                (("1" (skolem 1 ans)
                  (("1" (flatten)
                    (("1"
                      (case "EXISTS(an:AssetName): ans(an) and dom(am1)(an)")
                      (("1" (skolem -1 an)
                        (("1" (flatten)
                          (("1"
                            (lemma
                             sets_lemmas[AssetName].nonempty_member)
                            (("1" (expand member)
                              (("1"
                                (instantiate -1 ans)
                                (("1"
                                  (expand nonempty?)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (instantiate 1 an)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       set_aux_lemmas[AssetName].setMember)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (instantiate -1 (ans an))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skolem -1 ans2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (instantiate -5 ans2)
                                                  (("2"
                                                    (lemma
                                                     set_aux_lemmas[AssetName].cardUnion)
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (instantiate
                                                         -1
                                                         (an ans2))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skolem
                                                             3
                                                             a)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (instantiate
                                                                   -10
                                                                   an)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem
                                                                       -10
                                                                       (a1
                                                                        a2))
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -6
                                                                           "union(a,a1)")
                                                                          (("2"
                                                                            (lemma
                                                                             "maps[AssetName,Asset].mapAM")
                                                                            (("2"
                                                                              (instantiate
                                                                               -1
                                                                               (am1
                                                                                an
                                                                                ans2))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skolem
                                                                                   -1
                                                                                   ax)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     am1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         unique)
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (an
                                                                                            ax
                                                                                            a1))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3))
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "maps[AssetName,Asset].mapAM")
                                                                                                    (("2"
                                                                                                      (instantiate
                                                                                                       -1
                                                                                                       (am2
                                                                                                        an
                                                                                                        ans2))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -1
                                                                                                           ay)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               am2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 unique)
                                                                                                                (("2"
                                                                                                                  (instantiate
                                                                                                                   -2
                                                                                                                   (an
                                                                                                                    ay
                                                                                                                    a2))
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          -3))
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           asRefCompositional)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "union(union(a, singleton[Asset](a1)), map(am1, ans2))=union(a, union(singleton[Asset](a1), map(am1, ans2)))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (instantiate
                                                                                                                                     -2
                                                                                                                                     (a1
                                                                                                                                      a2
                                                                                                                                      "union(a,map(am2,ans2))"))
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "union(singleton[Asset](a1), union(a, map(am2, ans2)))=union(union(a, singleton[Asset](a1)), map(am2, ans2))")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "union(singleton[Asset](a2), union(a, map(am2, ans2)))=union(a, map(am2, union(singleton[AssetName](an), ans2)))")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "union(singleton[Asset](a2), union(a, map(am2, ans2)))=union(a, map(am2, union(singleton[AssetName](an), ans2)))")
                                                                                                                                                  (("1"
                                                                                                                                                    (use
                                                                                                                                                     assetRefinement)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand*
                                                                                                                                                       preorder?
                                                                                                                                                       transitive?)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (instantiate
                                                                                                                                                           -2
                                                                                                                                                           ("union(a, union(singleton[Asset](a1), map(am1, ans2)))"
                                                                                                                                                            "union(union(a, singleton[Asset](a1)), map(am2, ans2))"
                                                                                                                                                            "union(singleton[Asset](a2), union(a, map(am2, ans2)))"))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (decompose-equality
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -5)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand*
                                                                                                                                                     union
                                                                                                                                                     singleton
                                                                                                                                                     member)
                                                                                                                                                    (("2"
                                                                                                                                                      (bddsimp)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (decompose-equality
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (expand*
                                                                                                                                             union
                                                                                                                                             singleton
                                                                                                                                             member)
                                                                                                                                            (("2"
                                                                                                                                              (bddsimp)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (decompose-equality
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (expand*
                                                                                                                                   union
                                                                                                                                   singleton
                                                                                                                                   member)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "maps[AssetName,Asset].notExists")
                        (("2" (copy -1)
                          (("2" (instantiate -1 (am1 ans))
                            (("2" (bddsimp)
                              (("2"
                                (replace -5)
                                (("2"
                                  (instantiate -2 (am2 ans))
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (skolem 2 a)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (use assetRefinement)
                                              (("2"
                                                (expand*
                                                 preorder?
                                                 reflexive?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     "union(a,emptyset)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((asRefCompositional formula-decl nil Assets nil)
    (\|> const-decl "bool" AssetMapping nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (AssetName type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil) (Asset type-decl nil Assets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wfProduct const-decl "[set[Asset] -> bool]" Assets nil)
    (union const-decl "set" sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (dom const-decl "set[S]" maps nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setMember formula-decl nil set_aux_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapAM formula-decl nil maps nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (cardUnion formula-decl nil set_aux_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_member formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (reflexive? const-decl "bool" relations nil)
    (notExists formula-decl nil maps nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1415759 2600 t shostak))
 (amRefBij 0
  (amRefBij-1 nil 3538407670 3558203368
   ("" (skolem 1 (am1 am2))
    (("" (expand "|>")
      (("" (flatten)
        (("" (skolem 1 ans)
          (("" (expand bij)
            ((""
              (instantiate 1
               "LAMBDA(n:{a: Asset | map(am1, ans)(a)}): map(am2,unmap(am2,n))")
              (("1" (bddsimp)
                (("1" (skolem 1 x)
                  (("1" (flatten)
                    (("1" (expand map)
                      (("1" (skolem -3 an)
                        (("1" (flatten)
                          (("1" (instantiate -2 an)
                            (("1" (assert)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (skolem -2 (a1 a2))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (typepred am1)
                                      (("1"
                                        (expand unique)
                                        (("1"
                                          (instantiate -2 (an a1 x))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (instantiate 1 a2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (instantiate
                                                       1
                                                       an)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand dom)
                                  (("2"
                                    (instantiate 1 x)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (skolem 1 x1)
                (("2" (typepred x1)
                  (("2" (expand map)
                    (("2" (skolem -1 an)
                      (("2" (flatten)
                        (("2" (instantiate 1 an)
                          (("2" (expand dom)
                            (("2" (decompose-equality -3)
                              (("2"
                                (instantiate -1 an)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (expand unmap)
                                    (("1"
                                      (instantiate -5 an)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skolem -5 (a1 a2))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred am1)
                                              (("1"
                                                (expand unique)
                                                (("1"
                                                  (instantiate
                                                   -2
                                                   (an x1 a1))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand
                                                         singleton)
                                                        (("1"
                                                          (expand
                                                           singleton_elt)
                                                          (("1"
                                                            (expand
                                                             member)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (instantiate 1 x1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skolem 1 f)
                (("3" (flatten)
                  (("3" (skolem 1 x)
                    (("3" (typepred x)
                      (("3" (expand map)
                        (("3" (skolem -1 an)
                          (("3" (flatten)
                            (("3" (expand singleton?)
                              (("3" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skolem 1 n)
                (("4" (typepred n)
                  (("4" (expand singleton)
                    (("4" (expand map)
                      (("4" (expand dom)
                        (("4" (bddsimp)
                          (("1" (skolem 1 a)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 an)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -3 -2 RL)
                                    (("1"
                                      (instantiate 1 an)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 959378 430 t shostak)))

