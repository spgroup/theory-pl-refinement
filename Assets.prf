(Assets
 (AssetTest 0
  (AssetTest-1 nil 3531750382 3533565064
   ("" (skolem 1 (S T x y a b))
    (("" (flatten)
      (("" (lemma asRefCompositional)
        (("" (instantiate -1 (S T a))
          (("" (assert)
            (("" (flatten)
              (("" (replace -7)
                (("" (replace -7 1 RL)
                  (("" (replace -7 -2 RL)
                    (("" (lemma asRefCompositional)
                      (("" (instantiate -1 (a b T))
                        (("" (assert)
                          ((""
                            (case "union(singleton[Asset](a), T)=union(T,singleton[Asset](a)) AND union(singleton[Asset](b), T)=union(T,singleton[Asset](b))")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (replace -12 -4 RL)
                                        (("1"
                                          (use assetRefinement)
                                          (("1"
                                            (expand*
                                             preorder?
                                             transitive?)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (instantiate
                                                 -2
                                                 (x
                                                  "union(T, singleton[Asset](a))"
                                                  y))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* union singleton member)
                              (("2"
                                (bddsimp +)
                                (("1"
                                  (decompose-equality 1)
                                  (("1" (bddsimp) nil nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2" (bddsimp) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (assetRefinement formula-decl nil Assets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (asRefCompositional formula-decl nil Assets nil))
   386 180 t shostak))
 (bijReflexive 0
  (bijReflexive-1 nil 3531836330 3533580917
   ("" (skolem 1 s)
    (("" (expand* bij bijective? injective? surjective?)
      (("" (instantiate 1 "LAMBDA(x:{a: Asset | s(a)}):x")
        (("" (bddsimp)
          (("1" (skolem 1 x)
            (("1" (flatten)
              (("1" (instantiate 1 x)
                (("1" (use assetRefinement)
                  (("1" (expand* preorder? reflexive?)
                    (("1" (flatten)
                      (("1" (instantiate -1 x) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 y)
            (("2" (instantiate 1 y) (("2" (propax) nil nil)) nil)) nil)
           ("3" (skolem 1 (x1 x2)) (("3" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bij const-decl "bool" Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (assetRefinement formula-decl nil Assets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil))
   90855 50 t shostak))
 (bijEmptyset 0
  (bijEmptyset-1 nil 3531663848 3533580981
   ("" (expand* bij bijective? injective? surjective?)
    (("" (instantiate 1 "LAMBDA(x:{x:Asset|emptyset(x)}):x")
      (("" (bddsimp)
        (("1" (skolem 1 x)
          (("1" (flatten)
            (("1" (expand emptyset) (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (skolem 1 y)
          (("2" (typepred y)
            (("2" (expand emptyset) (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp) nil nil))
        nil))
      nil))
    nil)
   proved
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (bij const-decl "bool" Assets nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   50662 40 t shostak))
 (bijEmpty 0
  (bijEmpty-1 nil 3532186511 3533581077
   ("" (skolem 1 (s1 s2))
    (("" (flatten)
      ((""
        (expand* bij bijective? injective? surjective? empty? member)
        (("" (skolem -1 f)
          (("" (bddsimp)
            (("1" (skolem 1 y)
              (("1" (instantiate -2 y)
                (("1" (skolem -2 x)
                  (("1" (instantiate -4 x)
                    (("1" (typepred x) (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (skolem 1 x)
              (("2" (instantiate -3 x)
                (("2" (assert)
                  (("2" (skolem -3 y)
                    (("2" (flatten)
                      (("2" (instantiate -7 y) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((s2 skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (y skolem-const-decl "Asset" Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bij const-decl "bool" Assets nil)
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   71094 60 t shostak))
 (bijNotEmpty 0
  (bijNotEmpty-1 nil 3532186584 3533581100
   ("" (lemma bijEmpty)
    (("" (skolem 1 (s1 s2))
      (("" (flatten)
        (("" (instantiate -1 (s1 s2))
          (("" (assert) (("" (bddsimp) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((bijEmpty formula-decl nil Assets nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   71 20 t shostak))
 (bijCard 0
  (bijCard-1 nil 3531665115 3533565075
   ("" (skolem 1 (s1 s2))
    (("" (flatten)
      (("" (rewrite "card_def")
        (("" (rewrite "card_def")
          (("" (lemma finite_sets[Asset].Card_bijection)
            (("" (instantiate -1 (s1 "Card(s2)"))
              (("" (bddsimp) (("" (postpone) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 62 30 t shostak))
 (bijCards 0
  (bijCards-1 nil 3532270988 3533581108
   ("" (skolem 1 (s1 s2 x))
    (("" (flatten)
      (("" (lemma bijCard)
        (("" (instantiate -1 ("union(x,s1)" "union(x,s2)"))
          (("" (assert)
            (("" (lemma finite_sets[Asset].card_disj_union)
              (("" (copy -1)
                (("" (instantiate -1 (x s1))
                  (("" (instantiate -2 (x s2)) (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bijCard formula-decl nil Assets nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (card_disj_union formula-decl nil finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   145 50 t shostak))
 (bijUnionSubset 0
  (bijUnionSubset-1 nil 3532797788 3533581112
   ("" (skolem 1 (S X))
    (("" (lemma bijCard)
      (("" (instantiate -1 (X "union(X,S)"))
        (("" (flatten)
          (("" (assert)
            (("" (lemma finite_sets[Asset].card_union)
              (("" (instantiate -1 (X S))
                (("" (replace -1)
                  (("" (assert)
                    ((""
                      (lemma
                       set_aux_lemmas[Asset].card_intersection_subset)
                      (("" (instantiate -1 (S X))
                        (("" (assert)
                          ((""
                            (lemma
                             sets_lemmas[Asset].intersection_commutative)
                            (("" (instantiate -1 (X S))
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (card_intersection_subset formula-decl nil set_aux_lemmas nil)
    (card_union formula-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (bijCard formula-decl nil Assets nil))
   338 140 t shostak))
 (bijEmptys 0
  (bijEmptys-1 nil 3531838105 3533581117
   ("" (skolem 1 (S T X))
    (("" (flatten)
      (("" (lemma sets_lemmas[Asset].emptyset_is_empty?)
        (("" (instantiate -1 S)
          (("" (lemma sets_lemmas[Asset].union_empty)
            (("" (instantiate -1 X)
              (("" (assert)
                (("" (replace -2)
                  (("" (replace -1)
                    (("" (lemma bijUnionSubset)
                      (("" (instantiate -1 (T X))
                        (("" (assert)
                          (("" (lemma sets_lemmas[Asset].union_subset2)
                            (("" (instantiate -1 (T X))
                              ((""
                                (assert)
                                ((""
                                  (replace -1 1 RL)
                                  ((""
                                    (expand* union member)
                                    ((""
                                      (decompose-equality 1)
                                      (("" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Asset type-decl nil Assets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union_subset2 formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bijUnionSubset formula-decl nil Assets nil))
   212 60 t shostak))
 (bijDisjointParts 0
  (bijDisjointParts-1 nil 3533295136 3533581820
   ("" (skolem 1 (s t x))
    (("" (flatten)
      (("" (lemma bijReflexive)
        (("" (instantiate -1 x)
          (("" (expand* bij bijective? injective? surjective?)
            (("" (skolem -1 f1)
              (("" (skolem -4 f2)
                (("" (flatten)
                  (("" (lemma set_aux_lemmas[Asset].disjointUnion)
                    ((""
                      (instantiate 1
                       "LAMBDA(m:{a: Asset | union(x, s)(a)}):IF x(m) THEN f1(m) ELSE (IF s(m) THEN f2(m) ELSE emptyset ENDIF) ENDIF")
                      (("1" (bddsimp)
                        (("1" (skolem 1 m)
                          (("1" (flatten)
                            (("1" (expand union -10)
                              (("1"
                                (expand member)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (instantiate -4 m)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -4 n)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (instantiate 1 n)
                                              (("1"
                                                (expand union +)
                                                (("1"
                                                  (expand member)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (instantiate -1 (x s m))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (instantiate -8 m)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skolem -8 n)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (instantiate 2 n)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         union
                                                         member)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 y)
                          (("2" (typepred y)
                            (("2" (expand* union member)
                              (("2"
                                (bddsimp)
                                (("1"
                                  (assert)
                                  (("1"
                                    (instantiate -4 y)
                                    (("1"
                                      (skolem -4 e)
                                      (("1"
                                        (instantiate 1 e)
                                        (("1"
                                          (typepred e)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (expand* union member)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (instantiate -9 y)
                                  (("1"
                                    (skolem -9 e)
                                    (("1"
                                      (typepred e)
                                      (("1"
                                        (instantiate -3 (x s e))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (instantiate 2 e)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand* union member)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skolem 1 (x1 x2))
                          (("3" (flatten)
                            (("3" (typepred (x1 x2))
                              (("3"
                                (expand* union member)
                                (("3"
                                  (bddsimp)
                                  (("1"
                                    (instantiate -4 (x1 x2))
                                    (("1" (assert) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (instantiate -3 (x s x2))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           ("f1(x1)" "f2(x2)"))
                                          (("2"
                                            (replace -13)
                                            (("2"
                                              (reveal -1)
                                              (("2"
                                                (instantiate
                                                 -1
                                                 (x t "f2(x2)"))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (copy -3)
                                      (("3"
                                        (instantiate -1 (x s x1))
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred
                                             ("f2(x1)" "f1(x2)"))
                                            (("3"
                                              (instantiate
                                               -5
                                               (x t "f2(x1)"))
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (copy -3)
                                    (("4"
                                      (instantiate -1 (x s x1))
                                      (("4"
                                        (instantiate -4 (x s x2))
                                        (("4"
                                          (assert)
                                          (("4"
                                            (instantiate -8 (x1 x2))
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 m)
                        (("2" (typepred m)
                          (("2" (expand* union member) nil nil)) nil))
                        nil)
                       ("3" (skolem 1 m)
                        (("3" (typepred m)
                          (("3"
                            (expand* union member singleton? emptyset)
                            (("3" (flatten) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skolem 1 m)
                        (("4" (typepred m)
                          (("4" (expand* union member) nil nil)) nil))
                        nil)
                       ("5" (skolem 1 m)
                        (("5" (typepred m)
                          (("5" (expand* union member) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (x1 skolem-const-decl "{a: Asset | union(x, s)(a)}" Assets nil)
    (x2 skolem-const-decl "{a: Asset | union(x, s)(a)}" Assets nil)
    (e skolem-const-decl "{a: Asset | s(a)}" Assets nil)
    (t skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (y skolem-const-decl "{a: Asset | union(x, t)(a)}" Assets nil)
    (e skolem-const-decl "{a: Asset | x(a)}" Assets nil)
    (s skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (x skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (union const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (f2 skolem-const-decl "[{a: Asset | s(a)} -> {a: Asset | t(a)}]"
     Assets nil)
    (f1 skolem-const-decl "[{a: Asset | x(a)} -> {a: Asset | x(a)}]"
     Assets nil)
    (disjointUnion formula-decl nil set_aux_lemmas nil)
    (bij const-decl "bool" Assets nil) (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijReflexive formula-decl nil Assets nil))
   517800 650 t shostak))
 (bijParts 0
  (bijParts-2 "" 3533034298 3533565078
   ("" (skolem 1 (s t x))
    (("" (flatten)
      (("" (bddsimp)
        (("1" (lemma bijCard)
          (("1" (lemma bijCards)
            (("1" (instantiate -1 (s t x))
              (("1" (instantiate -2 ("union(x,s)" "union(x,t)"))
                (("1" (assert)
                  (("1" (lemma finite_sets[Asset].card_disj_union)
                    (("1" (copy -1)
                      (("1" (instantiate -1 (x s))
                        (("1" (assert)
                          (("1" (instantiate -2 (x t))
                            (("1" (replace -4)
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma
                                       finite_sets[Asset].card_union)
                                      (("1"
                                        (copy -1)
                                        (("1"
                                          (instantiate -1 (x s))
                                          (("1"
                                            (instantiate -2 (x t))
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide
                                                     (-1 -2 -3 -4 -5))
                                                    (("1"
                                                      (lemma
                                                       bijReflexive)
                                                      (("1"
                                                        (instantiate
                                                         -1
                                                         x)
                                                        (("1"
                                                          (expand*
                                                           bij
                                                           bijective?
                                                           injective?
                                                           surjective?)
                                                          (("1"
                                                            (skolem
                                                             -1
                                                             f1)
                                                            (("1"
                                                              (skolem
                                                               -4
                                                               f2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   1
                                                                   "LAMBDA(m:{a: Asset | s(a)}):f2(m)")
                                                                  (("1"
                                                                    (bddsimp)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       y)
                                                                      (("2"
                                                                        (instantiate
                                                                         -7
                                                                         y)
                                                                        (("1"
                                                                          (skolem
                                                                           -7
                                                                           e)
                                                                          (("1"
                                                                            (instantiate
                                                                             1
                                                                             e)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               e)
                                                                              (("2"
                                                                                (expand*
                                                                                 union
                                                                                 member)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           union
                                                                           member)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skolem
                                                                       1
                                                                       (x1
                                                                        x2))
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skolem
                                                                     1
                                                                     m)
                                                                    (("2"
                                                                      (typepred
                                                                       "f2(m)")
                                                                      (("2"
                                                                        (expand*
                                                                         union
                                                                         member)
                                                                        (("2"
                                                                          (typepred
                                                                           m)
                                                                          (("2"
                                                                            (bddsimp)
                                                                            (("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skolem
                                                                     1
                                                                     m)
                                                                    (("3"
                                                                      (typepred
                                                                       m)
                                                                      (("3"
                                                                        (expand*
                                                                         union
                                                                         member)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma bijReflexive)
          (("2" (instantiate -1 x) (("2" (propax) nil nil)) nil)) nil)
         ("3" (lemma bijDisjointParts)
          (("3" (instantiate -1 (s t x)) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 770 470 t shostak)
  (bijParts-1 nil 3532427857 3532714080
   ("" (skolem 1 (S T X))
    (("" (flatten)
      (("" (bddsimp)
        (("1" (expand* bij bijective? injective? surjective?)
          (("1" (skolem -3 f)
            (("1" (instantiate 1 "LAMBDA(m:{a: Asset | S(a)}):f(m)")
              (("1" (bddsimp)
                (("1" (skolem 1 e)
                  (("1" (typepred e)
                    (("1" (instantiate -6 e) (("1" (postpone) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                nil)
               ("2" (skolem 1 m)
                (("2" (typepred m)
                  (("2" (typepred "f(m)")
                    (("2" (expand* union member)
                      (("2" (assert) (("2" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skolem 1 m) (("3" (expand* union member) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma bijReflexive)
          (("2" (instantiate -1 X) (("2" (propax) nil nil)) nil)) nil)
         ("3" (expand* bij bijective? injective? surjective?)
          (("3" (skolem -3 f1)
            (("3" (skolem -4 f2)
              (("3" (flatten)
                (("3" (lemma set_aux_lemmas[Asset].disjointUnion)
                  (("3"
                    (instantiate 1
                     "LAMBDA(m:{a: Asset | union(X, S)(a)}):IF X(m) THEN f1(m) ELSE f2(m) ENDIF")
                    (("1" (bddsimp)
                      (("1" (skolem 1 x)
                        (("1" (typepred x)
                          (("1" (expand* union member)
                            (("1" (bddsimp)
                              (("1"
                                (assert)
                                (("1"
                                  (instantiate -7 x)
                                  (("1"
                                    (case
                                     "singleton[{a: Asset | X(a)}](x)=singleton[{a: Asset | union(X, S)(a)}](x) AND singleton[{a: Asset | X(a)}](f1(x))=singleton[{a: Asset | union(X, T)(a)}](f1(x))")
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (bddsimp)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (expand*
                                           singleton
                                           union
                                           member)
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (expand*
                                           singleton
                                           union
                                           member)
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (skolem 1 m)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand singleton -2)
                                            (("3"
                                              (expand* union member)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skolem 1 m)
                                      (("4"
                                        (expand singleton 1)
                                        (("4"
                                          (expand* union member)
                                          (("4"
                                            (flatten)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (instantiate -2 (X S x))
                                (("2"
                                  (assert)
                                  (("2"
                                    (instantiate -9 x)
                                    (("2"
                                      (case
                                       "singleton[{a: Asset | S(a)}](x)=singleton[{a: Asset | union(X, S)(a)}](x) AND singleton[{a: Asset | T(a)}](f2(x))=singleton[{a: Asset | union(X, T)(a)}](f2(x))")
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (bddsimp)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (expand*
                                             singleton
                                             union
                                             member)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand*
                                             singleton
                                             union
                                             member)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (skolem 1 m)
                                          (("3"
                                            (expand singleton 1)
                                            (("3"
                                              (expand* union member)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (skolem 1 m)
                                        (("4"
                                          (expand*
                                           singleton
                                           union
                                           member)
                                          (("4"
                                            (flatten)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 y)
                        (("2" (typepred y)
                          (("2" (expand* union member)
                            (("2" (bddsimp)
                              (("1"
                                (instantiate -6 y)
                                (("1"
                                  (skolem -6 x)
                                  (("1"
                                    (typepred x)
                                    (("1"
                                      (instantiate 1 x)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand* union member)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (instantiate -9 y)
                                (("1"
                                  (skolem -9 x)
                                  (("1"
                                    (typepred x)
                                    (("1"
                                      (instantiate -3 (X S x))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (instantiate 2 x)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand* union member)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skolem 1 (x1 x2))
                        (("3" (flatten)
                          (("3" (typepred x1)
                            (("3" (typepred x2)
                              (("3"
                                (expand* union member)
                                (("3"
                                  (copy -3)
                                  (("3"
                                    (bddsimp)
                                    (("1"
                                      (instantiate -7 (x1 x2))
                                      (("1" (assert) nil nil)
                                       ("2" (propax) nil nil)
                                       ("3" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (copy -1)
                                        (("2"
                                          (instantiate -1 (X S x1))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "f2(x1)")
                                              (("2"
                                                (typepred "f1(x2)")
                                                (("2"
                                                  (instantiate
                                                   -3
                                                   (X T "f2(x1)"))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (copy -1)
                                      (("3"
                                        (instantiate -1 (X S x2))
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred "f1(x1)")
                                            (("3"
                                              (typepred "f2(x2)")
                                              (("3"
                                                (instantiate
                                                 -3
                                                 (X T "f2(x2)"))
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (copy -1)
                                      (("4"
                                        (instantiate -1 (X S x1))
                                        (("4"
                                          (instantiate -2 (X S x2))
                                          (("4"
                                            (assert)
                                            (("4"
                                              (instantiate -9 (x1 x2))
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 m)
                      (("2" (flatten)
                        (("2" (typepred m)
                          (("2" (expand* union member) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skolem 1 m)
                      (("3" (flatten)
                        (("3" (typepred m)
                          (("3" (expand* union member)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skolem 1 m)
                      (("4" (flatten)
                        (("4" (expand* union member) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1293 640 t shostak))
 (bijElm 0
  (bijElm-1 nil 3533053396 3533582177
   ("" (expand* nonempty? empty? member)
    (("" (skolem 1 (x y))
      (("" (flatten)
        (("" (skolem 1 e)
          (("" (expand* bij bijective? injective? surjective?)
            (("" (skolem -1 f)
              (("" (flatten)
                (("" (instantiate 1 (e "f(e)" f))
                  (("1" (assert)
                    (("1" (bddsimp)
                      (("1"
                        (instantiate 1
                         "LAMBDA(n:{a: Asset | remove(e, x)(a)}): f(n)")
                        (("1" (prop)
                          (("1" (skolem 1 (x1 x2))
                            (("1" (typepred (x1 x2))
                              (("1"
                                (expand* remove member)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -4 (x1 x2))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem 1 n)
                            (("2" (typepred n)
                              (("2"
                                (expand* remove member)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate -3 n)
                                    (("1"
                                      (skolem -3 m)
                                      (("1"
                                        (typepred m)
                                        (("1"
                                          (instantiate 2 m)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (expand* remove member)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skolem 1 k)
                            (("3" (flatten)
                              (("3"
                                (expand* remove member)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (instantiate -4 k)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (skolem -4 m)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (instantiate 2 m)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (instantiate
                                                   -3
                                                   (e k))
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 n)
                          (("2" (typepred n)
                            (("2" (expand* remove member)
                              (("2"
                                (flatten)
                                (("2"
                                  (instantiate -3 (e n))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skolem 1 n)
                          (("3" (typepred n)
                            (("3" (expand* remove member)
                              (("3" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (instantiate -3 e)
                        (("2" (assert)
                          (("2" (skolem -3 m)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n skolem-const-decl "{a: Asset | remove(f(e), y)(a)}" Assets nil)
    (f skolem-const-decl "[{a: Asset | x(a)} -> {a: Asset | y(a)}]"
     Assets nil)
    (y skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (e skolem-const-decl "Asset" Assets nil)
    (x skolem-const-decl "finite_sets[Asset].finite_set" Assets nil)
    (m skolem-const-decl "{a: Asset | x(a)}" Assets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bij const-decl "bool" Assets nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   308818 280 t shostak))
 (bijDifference 0
  (bijDifference-1 nil 3533309991 3533566407
   ("" (lemma bijParts)
    (("" (skolem 1 (A X Y))
      (("" (flatten)
        (("" (lemma sets_lemmas[Asset].union_difference)
          (("" (copy -1)
            (("" (instantiate -1 (A X))
              (("" (instantiate -2 (A Y))
                (("" (lemma sets_lemmas[Asset].difference_disjoint)
                  (("" (copy -1)
                    (("" (instantiate -1 (A X))
                      (("" (instantiate -2 (A Y))
                        ((""
                          (instantiate -5
                           ("difference(X,A)" "difference(Y,A)" A))
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Asset type-decl nil Assets nil)
    (union_difference formula-decl nil sets_lemmas nil)
    (difference_disjoint formula-decl nil sets_lemmas nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (difference const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bijParts formula-decl nil Assets nil))
   137208 70 t shostak))
 (bijSingleton 0
  (bijSingleton-1 nil 3532689233 3533581259
   ("" (skolem 1 (a b))
    (("" (expand* bij bijective? injective? surjective?)
      (("" (flatten)
        (("" (instantiate 1 "LAMBDA(x:{m: Asset | a=m}):b")
          (("1" (bddsimp)
            (("1" (skolem 1 x)
              (("1" (flatten)
                (("1" (instantiate 1 b)
                  (("1" (expand singleton) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 y)
              (("2" (typepred y)
                (("2" (expand singleton -1)
                  (("2" (instantiate 1 a)
                    (("1" (assert) nil nil)
                     ("2" (expand singleton) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 (x1 x2))
              (("3" (typepred x1)
                (("3" (typepred x2)
                  (("3" (expand singleton) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand singleton)
            (("2" (skosimp)
              (("2" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (expand singleton) (("3" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bij const-decl "bool" Assets nil)
    (a skolem-const-decl "Asset" Assets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (b skolem-const-decl "Asset" Assets nil))
   119130 110 t shostak))
 (bijRef 0
  (bijRef-6 "" 3533553649 3533565083
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 S)
        (("1" (flatten)
          (("1" (case "empty?(S)")
            (("1" (lemma bijEmpty)
              (("1" (skolem 1 T)
                (("1" (skolem 1 X)
                  (("1" (flatten)
                    (("1" (instantiate -1 (S T))
                      (("1" (assert)
                        (("1" (lemma sets_lemmas[Asset].union_empty)
                          (("1"
                            (lemma
                             sets_lemmas[Asset].emptyset_is_empty?)
                            (("1" (copy (-1 -2))
                              (("1"
                                (instantiate -1 S)
                                (("1"
                                  (instantiate -2 T)
                                  (("1"
                                    (instantiate -3 X)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use assetRefinement)
                                        (("1"
                                          (expand*
                                           preorder?
                                           reflexive?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (instantiate -1 X)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 2 T)
              (("2" (skolem 2 X)
                (("2" (flatten)
                  (("2" (hide 3)
                    (("2" (lemma bijElm)
                      (("2" (instantiate -1 (S T))
                        (("2" (assert)
                          (("2" (bddsimp -1)
                            (("1" (skolem -1 (e g f))
                              (("1"
                                (flatten)
                                (("1"
                                  (name "Y" "remove(e,S)")
                                  (("1"
                                    (instantiate -6 Y)
                                    (("1"
                                      (bddsimp -)
                                      (("1"
                                        (instantiate
                                         -6
                                         "remove(f(e),T)")
                                        (("1"
                                          (typepred "f(e)")
                                          (("1"
                                            (instantiate
                                             -7
                                             "union(X,e)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 -7 RL)
                                                (("1"
                                                  (replace -5 -7 RL)
                                                  (("1"
                                                    (case
                                                     "union(union(X, singleton[Asset](e)), remove(e, S))=union(X, S)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (lemma
                                                             asRefCompositional)
                                                            (("1"
                                                              (instantiate
                                                               -1
                                                               (e
                                                                g
                                                                "union(X,remove(g,T))"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "union(singleton[Asset](e), union(X, remove(g, T)))=union(union(X, singleton[Asset](e)), remove(g, T)) AND union(singleton[Asset](g), union(X, remove(g, T)))=union(X, T)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             assetRefinement)
                                                                            (("1"
                                                                              (expand*
                                                                               preorder?
                                                                               transitive?)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (instantiate
                                                                                   -2
                                                                                   ("union(X,S)"
                                                                                    "union(union(X, singleton[Asset](e)), remove(g, T))"
                                                                                    "union(X,T)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (bddsimp
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand*
                                                                         remove
                                                                         union
                                                                         singleton
                                                                         member)
                                                                        (("1"
                                                                          (bddsimp
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (expand*
                                                                         remove
                                                                         union
                                                                         singleton
                                                                         member)
                                                                        (("2"
                                                                          (bddsimp
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       remove
                                                       union
                                                       singleton
                                                       member)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("2"
                                                          (bddsimp 1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         finite_sets[Asset].card_remove)
                                        (("2"
                                          (instantiate -1 (S e))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* nonempty? empty? member) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unchecked
   ((wf_nat formula-decl nil naturalnumbers nil)
    (bijElm formula-decl nil Assets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (transitive? const-decl "bool" relations nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (asRefCompositional formula-decl nil Assets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (bijEmpty formula-decl nil Assets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (union const-decl "set" sets nil)
    (wfProduct const-decl "[set[Asset] -> bool]" Assets nil)
    (bij const-decl "bool" Assets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (measure_induction formula-decl nil measure_induction nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   1508 1010 t shostak)
  (bijRef-5 "" 3533403604 3533403604
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 S)
        (("1" (flatten)
          (("1" (case "empty?(S)")
            (("1" (skolem 1 T)
              (("1" (skolem 1 X)
                (("1" (lemma bijEmptys)
                  (("1" (instantiate -1 (S T X))
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (lemma
                             sets_lemmas[Asset].emptyset_is_empty?)
                            (("1" (instantiate -1 S)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   sets_lemmas[Asset].union_empty)
                                  (("1"
                                    (instantiate -1 X)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (use assetRefinement)
                                            (("1"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (instantiate -1 X)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 2 T)
              (("2" (skolem 2 X)
                (("2" (flatten)
                  (("2" (lemma bijElm)
                    (("2"
                      (instantiate -1 ("union(X, S)" "union(X, T)"))
                      (("2" (assert)
                        (("2" (bddsimp -1)
                          (("1" (skolem -1 (e f))
                            (("1" (typepred "f(e)")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand union (-1 -2))
                                  (("1"
                                    (expand member)
                                    (("1"
                                      (bddsimp (-1 -2))
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil)
                                       ("4"
                                        (lemma
                                         "set_aux_lemmas[Asset].setMember")
                                        (("4"
                                          (instantiate -1 (S e))
                                          (("4"
                                            (expand member)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (skolem -1 SS)
                                                (("4"
                                                  (flatten)
                                                  (("4"
                                                    (instantiate -5 SS)
                                                    (("4"
                                                      (lemma
                                                       set_aux_lemmas[Asset].cardUnion)
                                                      (("4"
                                                        (instantiate
                                                         -1
                                                         (e SS))
                                                        (("4"
                                                          (expand
                                                           member)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (instantiate
                                                               -6
                                                               "remove(f(e),T)")
                                                              (("4"
                                                                (instantiate
                                                                 -6
                                                                 "union(X,e)")
                                                                (("4"
                                                                  (case
                                                                   "union(union(X, singleton[Asset](e)), SS)=union(X,S)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (expand*
                                                                         union
                                                                         singleton
                                                                         member)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* nonempty? empty? member)
                            (("2" (skolem 1 e)
                              (("2"
                                (instantiate -1 e)
                                (("2"
                                  (expand* union member)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unfinished nil 516596 960 t shostak)
  (bijRef-4 "" 3533308180 3533379240
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 S)
        (("1" (flatten)
          (("1" (case "empty?(S)")
            (("1" (skolem 1 T)
              (("1" (skolem 1 X)
                (("1" (lemma bijEmptys)
                  (("1" (instantiate -1 (S T X))
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (lemma
                             sets_lemmas[Asset].emptyset_is_empty?)
                            (("1" (instantiate -1 S)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   sets_lemmas[Asset].union_empty)
                                  (("1"
                                    (instantiate -1 X)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (use assetRefinement)
                                            (("1"
                                              (expand*
                                               preorder?
                                               reflexive?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (instantiate -1 X)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 2 T)
              (("2" (skolem 2 X)
                (("2" (flatten)
                  (("2" (lemma bijElm)
                    (("2"
                      (instantiate -1 ("union(X, S)" "union(X, T)"))
                      (("2" (assert)
                        (("2" (bddsimp -1)
                          (("1" (skolem -1 (e f))
                            (("1" (flatten)
                              (("1"
                                (lemma
                                 "set_aux_lemmas[Asset].setMember")
                                (("1"
                                  (expand member)
                                  (("1" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* nonempty? empty? member)
                            (("2"
                              (expand* union nonempty? empty? member)
                              (("2"
                                (skolem 1 m)
                                (("2"
                                  (instantiate -1 m)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unfinished nil 232633 660 t shostak)
  (bijRef-3 "" 3532799930 3532800745
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 x)
        (("1" (flatten)
          (("1" (case "empty?(x)")
            (("1" (skolem 1 (y))
              (("1" (skolem 1 (a))
                (("1" (lemma bijEmptys)
                  (("1" (instantiate -1 (x y a))
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (use assetRefinement)
                              (("1"
                                (expand* preorder? reflexive?)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate -1 a)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand* empty? member)
              (("2" (skolem 1 m)
                (("2" (skolem 1 y)
                  (("2" (skolem 1 a)
                    (("2" (flatten)
                      (("2" (lemma "set_aux_lemmas[Asset].setMember")
                        (("2" (expand member)
                          (("2" (instantiate -1 (x m))
                            (("2" (assert)
                              (("2"
                                (skolem -1 S)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     set_aux_lemmas[Asset].cardUnion)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (instantiate -1 (m S))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2 -1 RL)
                                            (("2"
                                              (instantiate -4 S)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma bijParts)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     (x y a))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           bijSubset)
                                                          (("2"
                                                            (instantiate
                                                             -1
                                                             (x y S m))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skolem
                                                                 -1
                                                                 (T n))
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lemma
                                                                     bijParts)
                                                                    (("2"
                                                                      (instantiate
                                                                       -1
                                                                       (S
                                                                        T
                                                                        a))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           bijSingleton)
                                                                          (("2"
                                                                            (instantiate
                                                                             -1
                                                                             (m
                                                                              n))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (instantiate
                                                                                 -12
                                                                                 T)
                                                                                (("2"
                                                                                  (lemma
                                                                                   bijParts)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     bijReflexive)
                                                                                    (("2"
                                                                                      (instantiate
                                                                                       -1
                                                                                       "union(a,m)")
                                                                                      (("2"
                                                                                        (copy
                                                                                         -2)
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -1
                                                                                           (S
                                                                                            T
                                                                                            "union(a,m)"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (instantiate
                                                                                               -15
                                                                                               "union(a,m)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (bddsimp
                                                                                                   -15)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     asRefCompositional)
                                                                                                    (("1"
                                                                                                      (instantiate
                                                                                                       -1
                                                                                                       (m
                                                                                                        n
                                                                                                        "union(a,T)"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "union(union(a, singleton[Asset](m)), S)=union(a, x) AND union(union(a, singleton[Asset](m)), T)=union(singleton[Asset](m), union(a, T)) AND union(singleton[Asset](n), union(a, T))=union(a, y)")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   assetRefinement)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     preorder?
                                                                                                                     transitive?)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (instantiate
                                                                                                                         -2
                                                                                                                         ("union(a,x)"
                                                                                                                          "union(union(a, singleton[Asset](m)), T)"
                                                                                                                          "union(a,y)"))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -16)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -10)
                                                                                                              (("2"
                                                                                                                (expand*
                                                                                                                 union
                                                                                                                 singleton
                                                                                                                 member)
                                                                                                                (("2"
                                                                                                                  (bddsimp
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (decompose-equality
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (bddsimp)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (decompose-equality
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (bddsimp)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "union(a, x)=union(union(a, singleton[Asset](m)), S)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (decompose-equality
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -13)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           union
                                                                                                           singleton
                                                                                                           member)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bij const-decl "bool" Assets nil)
    (union const-decl "set" sets nil)
    (wfProduct const-decl "[set[Asset] -> bool]" Assets nil)
    (\|- const-decl "[set[Asset], set[Asset] -> bool]" Assets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (bijEmptys formula-decl nil Assets nil)
    (setMember formula-decl nil set_aux_lemmas nil)
    (cardUnion formula-decl nil set_aux_lemmas nil)
    (bijReflexive formula-decl nil Assets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (asRefCompositional formula-decl nil Assets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (bijSingleton formula-decl nil Assets nil)
    (bijParts formula-decl nil Assets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   611336 1480 t shostak)
  (bijRef-2 "" 3532689166 3532714091
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 x)
        (("1" (flatten)
          (("1" (case "empty?(x)")
            (("1" (skolem 1 (y))
              (("1" (skolem 1 (a))
                (("1" (lemma sets_lemmas[Asset].emptyset_is_empty?)
                  (("1" (instantiate -1 x)
                    (("1" (assert)
                      (("1" (lemma bijEmptys)
                        (("1" (instantiate -1 (x y a))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -2)
                                (("1"
                                  (lemma
                                   sets_lemmas[Asset].emptyset_is_empty?)
                                  (("1"
                                    (instantiate -1 y)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use assetRefinement)
                                        (("1"
                                          (expand*
                                           preorder?
                                           reflexive?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (instantiate
                                               -1
                                               "union(a,emptyset)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand* empty? member)
              (("2" (skolem 1 m)
                (("2" (skolem 1 y)
                  (("2" (skolem 1 a)
                    (("2" (flatten)
                      (("2" (lemma "set_aux_lemmas[Asset].setMember")
                        (("2" (expand member)
                          (("2" (instantiate -1 (x m))
                            (("2" (assert)
                              (("2"
                                (skolem -1 S)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     set_aux_lemmas[Asset].cardUnion)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (instantiate -1 (m S))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2 -1 RL)
                                            (("2"
                                              (instantiate -4 S)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (copy -5)
                                                  (("2"
                                                    (expand bij -1)
                                                    (("2"
                                                      (skolem -1 f)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           bijParts)
                                                          (("2"
                                                            (instantiate
                                                             -1
                                                             (x y a))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (lemma
                                                                   bijSubset)
                                                                  (("2"
                                                                    (instantiate
                                                                     -1
                                                                     (x
                                                                      y
                                                                      S
                                                                      m))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         (T
                                                                          n))
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (lemma
                                                                             bijParts)
                                                                            (("2"
                                                                              (instantiate
                                                                               -1
                                                                               (S
                                                                                T
                                                                                a))
                                                                              (("2"
                                                                                (lemma
                                                                                 set_aux_lemmas[Asset].disjointSubset)
                                                                                (("2"
                                                                                  (copy
                                                                                   -1)
                                                                                  (("2"
                                                                                    (instantiate
                                                                                     -1
                                                                                     (a
                                                                                      x
                                                                                      S
                                                                                      m))
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (instantiate
                                                                                         -2
                                                                                         (a
                                                                                          y
                                                                                          T
                                                                                          n))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (instantiate
                                                                                             -15
                                                                                             T)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               bijSingleton)
                                                                                              (("2"
                                                                                                (instantiate
                                                                                                 -1
                                                                                                 (m
                                                                                                  n))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     bijParts)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       bijReflexive)
                                                                                                      (("2"
                                                                                                        (instantiate
                                                                                                         -1
                                                                                                         "union(a,m)")
                                                                                                        (("2"
                                                                                                          (copy
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (instantiate
                                                                                                             -1
                                                                                                             (S
                                                                                                              T
                                                                                                              "union(a,m)"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (bddsimp
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (instantiate
                                                                                                                   -19
                                                                                                                   "union(a,m)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (bddsimp
                                                                                                                       -19)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         asRefCompositional)
                                                                                                                        (("1"
                                                                                                                          (instantiate
                                                                                                                           -1
                                                                                                                           (m
                                                                                                                            n
                                                                                                                            "union(a,T)"))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "union(union(a, singleton[Asset](m)), S)=union(a, x) AND union(union(a, singleton[Asset](m)), T)=union(singleton[Asset](m), union(a, T)) AND union(singleton[Asset](n), union(a, T))=union(a, y)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     assetRefinement)
                                                                                                                                    (("1"
                                                                                                                                      (expand*
                                                                                                                                       preorder?
                                                                                                                                       transitive?)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (instantiate
                                                                                                                                           -2
                                                                                                                                           ("union(a,x)"
                                                                                                                                            "union(union(a, singleton[Asset](m)), T)"
                                                                                                                                            "union(a,y)"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -20)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -12)
                                                                                                                                  (("2"
                                                                                                                                    (bddsimp
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (decompose-equality
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand*
                                                                                                                                         union
                                                                                                                                         singleton
                                                                                                                                         member)
                                                                                                                                        (("1"
                                                                                                                                          (bddsimp
                                                                                                                                           1)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (decompose-equality
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand*
                                                                                                                                         union
                                                                                                                                         singleton
                                                                                                                                         member)
                                                                                                                                        (("2"
                                                                                                                                          (bddsimp
                                                                                                                                           1)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (decompose-equality
                                                                                                                                       1)
                                                                                                                                      (("3"
                                                                                                                                        (expand*
                                                                                                                                         union
                                                                                                                                         singleton
                                                                                                                                         member)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (postpone)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         (-17
                                                                                                                          -18
                                                                                                                          -21
                                                                                                                          1
                                                                                                                          3))
                                                                                                                        (("3"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (expand*
                                                                                                                             disjoint?
                                                                                                                             empty?
                                                                                                                             intersection
                                                                                                                             union
                                                                                                                             singleton
                                                                                                                             member)
                                                                                                                            (("3"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               e)
                                                                                                                              (("3"
                                                                                                                                (instantiate
                                                                                                                                 -4
                                                                                                                                 e)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (bddsimp)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (replace
                                                                                                                         -17)
                                                                                                                        (("4"
                                                                                                                          (case
                                                                                                                           "union(a, union(singleton[Asset](m), S))=union(union(a, singleton[Asset](m)), S)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (decompose-equality
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand*
                                                                                                                               union
                                                                                                                               singleton
                                                                                                                               member)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   (-16
                                                                                                                    17
                                                                                                                    -21
                                                                                                                    1
                                                                                                                    3))
                                                                                                                  (("3"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("3"
                                                                                                                      (expand*
                                                                                                                       disjoint?
                                                                                                                       empty?
                                                                                                                       union
                                                                                                                       singleton
                                                                                                                       member)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         intersection)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           member)
                                                                                                                          (("3"
                                                                                                                            (skolem
                                                                                                                             1
                                                                                                                             e)
                                                                                                                            (("3"
                                                                                                                              (flatten)
                                                                                                                              (("3"
                                                                                                                                (instantiate
                                                                                                                                 -4
                                                                                                                                 e)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unfinished nil 6784 1860 t shostak)
  (bijRef-1 nil 3531836182 3532190959
   (""
    (use "measure_induction[finite_sets[Asset].finite_set,nat, finite_sets[Asset].Card, <]")
    (("1" (bddsimp)
      (("1" (skolem 1 x)
        (("1" (flatten)
          (("1" (case "empty?(x)")
            (("1" (skolem 1 (y))
              (("1" (skolem 1 (a))
                (("1" (lemma sets_lemmas[Asset].emptyset_is_empty?)
                  (("1" (instantiate -1 x)
                    (("1" (assert)
                      (("1" (lemma bijEmptys)
                        (("1" (instantiate -1 (x y a))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -2)
                                (("1"
                                  (bddsimp -1)
                                  (("1"
                                    (use assetRefinement)
                                    (("1"
                                      (expand* preorder? reflexive?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (instantiate
                                           -1
                                           "union(a,emptyset)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3"
                                    (lemma
                                     sets_lemmas[Asset].intersection_empty)
                                    (("3"
                                      (instantiate -1 a)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand* empty? member)
              (("2" (skolem 1 m)
                (("2" (skolem 1 y)
                  (("2" (skolem 1 a)
                    (("2" (flatten)
                      (("2" (lemma "set_aux_lemmas[Asset].setMember")
                        (("2" (expand member)
                          (("2" (instantiate -1 (x m))
                            (("2" (assert)
                              (("2"
                                (skolem -1 S)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     set_aux_lemmas[Asset].cardUnion)
                                    (("2"
                                      (expand member)
                                      (("2"
                                        (instantiate -1 (m S))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2 -1 RL)
                                            (("2"
                                              (instantiate -4 S)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (replace -2 -3 RL)
                                                    (("2"
                                                      (copy -5)
                                                      (("2"
                                                        (expand bij -1)
                                                        (("2"
                                                          (skolem -1 f)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (instantiate
                                                               -2
                                                               m)
                                                              (("1"
                                                                (typepred
                                                                 "f(m)")
                                                                (("1"
                                                                  (expand
                                                                   union
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (bddsimp
                                                                       -1)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (name
                                                                         "b"
                                                                         "f(m)")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (name
                                                                             "T"
                                                                             "remove(b,y)")
                                                                            (("2"
                                                                              (instantiate
                                                                               -9
                                                                               T)
                                                                              (("2"
                                                                                (instantiate
                                                                                 -9
                                                                                 "union(a,m)")
                                                                                (("2"
                                                                                  (bddsimp
                                                                                   -9)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     asRefCompositional)
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -1
                                                                                       (m
                                                                                        "f(m)"
                                                                                        "union(a,T)"))
                                                                                      (("1"
                                                                                        (case
                                                                                         "union(singleton[Asset](m), union(a, T))=union(union(a, singleton[Asset](m)), T)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (bddsimp
                                                                                             -2)
                                                                                            (("1"
                                                                                              (case
                                                                                               "union(singleton[{a_1: Asset | union[Asset](a, y)(a_1)}](f(m)),
               union(a, T))=union(a, y)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 restrict
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   union
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     member)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       singleton
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "y=union(b,T)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             extend
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               restrict
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 union
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   singleton
                                                                                                                   +)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     member)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (postpone)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (decompose-equality
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             extend
                                                                                                             restrict
                                                                                                             union
                                                                                                             singleton
                                                                                                             member)
                                                                                                            (("2"
                                                                                                              (bddsimp
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -8
                                                                                                                   2
                                                                                                                   RL)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     remove
                                                                                                                     member)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (replace
                                                                                                                 -9
                                                                                                                 -2
                                                                                                                 RL)
                                                                                                                (("3"
                                                                                                                  (expand*
                                                                                                                   remove
                                                                                                                   member)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   union
                                                                                                   restrict
                                                                                                   singleton
                                                                                                   member)
                                                                                                  (("2"
                                                                                                    (bddsimp
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -7
                                                                                                         -1
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           remove
                                                                                                           member)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (replace
                                                                                                       -7
                                                                                                       3
                                                                                                       RL)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         remove)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "singleton
           [{a_1: Asset | union(a, union(singleton[Asset](m), S))(a_1)}]
           (m)=singleton[Asset](m) AND singleton[{a_1: Asset | union(a, y)(a_1)}](b)=singleton[{a_1: Asset | union[Asset](a, y)(a_1)}](f(m))")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (bddsimp
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   union
                                                                                                   singleton
                                                                                                   member)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand*
                                                                                                   restrict
                                                                                                   union
                                                                                                   singleton
                                                                                                   member)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand*
                                                                                           union
                                                                                           singleton
                                                                                           member)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("2"
                                                                                              (bddsimp
                                                                                               +)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand*
                                                                                         union
                                                                                         singleton
                                                                                         member)
                                                                                        (("2"
                                                                                          (skolem
                                                                                           1
                                                                                           asset)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "union(a, union(singleton[Asset](m), S))=union(union(a, singleton[Asset](m)), S)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         union
                                                                                         singleton
                                                                                         member)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 union
                                                                 singleton
                                                                 member)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma wf_nat) (("2" (grind) nil nil)) nil))
    nil)
   unfinished nil 134229 1580 t shostak))
 (bijPreservesRef 0
  (bijPreservesRef-1 nil 3532187288 3533565083
   ("" (lemma bijRef)
    (("" (skolem 1 (s1))
      (("" (skolem 1 s2)
        (("" (flatten)
          (("" (instantiate -1 (s1 s2 emptyset))
            (("" (assert)
              (("" (lemma sets_lemmas[Asset].union_empty)
                (("" (lemma sets_lemmas[Asset].union_commutative)
                  (("" (copy -1)
                    (("" (copy -3)
                      (("" (instantiate -1 s1)
                        (("" (instantiate -4 s2)
                          (("" (instantiate -2 (s1 emptyset))
                            (("" (instantiate -3 (s2 emptyset))
                              ((""
                                (assert)
                                ((""
                                  (flatten)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (bijRef formula-decl nil Assets nil))
   112 40 t shostak)))

