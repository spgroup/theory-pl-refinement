(set_aux_lemmas
 (cardUnion 0
  (cardUnion-1 nil 3531651611 3531651645
   ("" (lemma finite_sets[T].card_add)
    (("" (lemma sets_lemmas[T].add_as_union)
      (("" (lemma sets_lemmas[T].union_commutative)
        (("" (skolem 1 (an S))
          (("" (instantiate -1 (S an))
            (("" (instantiate -2 (S an))
              (("" (instantiate -3 (S an))
                (("" (expand member)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((add_as_union formula-decl nil sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (card_add formula-decl nil finite_sets nil)
    (T formal-type-decl nil set_aux_lemmas nil))
   33724 160 t shostak))
 (setMember 0
  (setMember-1 nil 3531651651 3531651719
   ("" (skolem 1 (ans an))
    (("" (expand member)
      (("" (flatten)
        (("" (instantiate 1 "remove(an,ans)")
          (("" (bddsimp)
            (("1" (expand remove) (("1" (propax) nil nil)) nil)
             ("2" (decompose-equality 1)
              (("2" (expand* union singleton remove member)
                (("2" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (remove const-decl "set" sets nil))
   68319 90 t shostak))
 (lemmaUnionRemove 0
  (lemmaUnionRemove-1 nil 3531651730 3531651783
   ("" (skolem 1 (x y it))
    (("" (flatten)
      (("" (expand* union singleton remove member)
        (("" (decompose-equality -1)
          (("" (decompose-equality 1)
            (("" (instantiate -1 x!1)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil))
   52966 50 t shostak))
 (lemmaUnionRemove2 0
  (lemmaUnionRemove2-1 nil 3531651796 3531651819
   ("" (skolem 1 (x i))
    (("" (expand* union singleton remove member)
      (("" (flatten)
        (("" (decompose-equality 1)
          (("" (bddsimp)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil))
   23496 20 t shostak))
 (lemmaUnionRemove3 0
  (lemmaUnionRemove3-1 nil 3531651828 3531651851
   ("" (skolem 1 (x i1 i2))
    (("" (expand* union singleton remove member)
      (("" (flatten)
        (("" (decompose-equality 1)
          (("" (bddsimp)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil))
   22873 40 t shostak))
 (finiteIntersection 0
  (finiteIntersection-1 nil 3531651858 3531651860 ("" (grind) nil nil)
   unchecked
   ((finite_intersection2 application-judgement "finite_set"
     finite_sets nil))
   1557 20 t shostak))
 (finiteComprehension 0
  (finiteComprehension-1 nil 3531651862 3531651864 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   2037 100 t shostak))
 (finiteUnion 0
  (finiteUnion-1 nil 3531651866 3531651888
   ("" (skolem 1 (x y))
    (("" (flatten)
      (("" (lemma finite_sets[T].finite_union)
        (("" (instantiate -1 (x y))
          (("1" (propax) nil nil) ("2" (propax) nil nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (T formal-type-decl nil set_aux_lemmas nil))
   21771 340 t shostak))
 (singletonMember 0
  (singletonMember-1 nil 3531651898 3531651899 ("" (grind) nil nil)
   unchecked ((singleton const-decl "(singleton?)" sets nil)) 1575 10 t
   shostak))
 (singletonEqualMember 0
  (singletonEqualMember-1 nil 3548757947 3548758075
   ("" (skolem 1 (x y S))
    (("" (flatten)
      (("" (expand singleton?)
        (("" (skolem -1 e)
          (("" (typepred e)
            (("" (copy -2)
              (("" (copy -1)
                (("" (instantiate -1 x)
                  (("1" (assert)
                    (("1" (instantiate -2 y) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((x skolem-const-decl "T" set_aux_lemmas nil)
    (S skolem-const-decl "set[T]" set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil))
   127832 30 t shostak))
 (memberUnion 0
  (memberUnion-1 nil 3531651903 3531651907 ("" (grind) nil nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil))
   3333 20 t shostak))
 (intersectionNotMember 0
  (intersectionNotMember-1 nil 3532172162 3532172200
   ("" (skolem 1 (x y e))
    (("" (flatten)
      (("" (decompose-equality -2)
        (("" (expand* intersection member)
          (("" (instantiate -1 e)
            (("" (assert)
              (("" (expand emptyset) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set_aux_lemmas nil))
   37921 20 t shostak))
 (intersectionSubset 0
  (intersectionSubset-1 nil 3532264552 3532264629
   ("" (skolem 1 (x y z))
    (("" (flatten)
      (("" (replace -1 1 RL)
        (("" (decompose-equality 1)
          (("" (expand* subset? intersection member)
            (("" (bddsimp)
              (("1" (instantiate -4 x!1) (("1" (assert) nil nil)) nil)
               ("2" (decompose-equality -3)
                (("2" (instantiate -1 x!1)
                  (("2" (assert)
                    (("2" (expand emptyset) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   77075 90 t shostak))
 (disjointUnion 0
  (disjointUnion-1 nil 3532426226 3532426268
   ("" (skolem 1 (x y e))
    (("" (flatten)
      (("" (expand* disjoint? empty?)
        (("" (expand member)
          (("" (instantiate -2 e)
            (("" (expand* intersection member) (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   42196 20 t shostak))
 (disjointSubset 0
  (disjointSubset-1 nil 3532707218 3532707292
   ("" (skolem 1 (x y z e))
    (("" (flatten)
      (("" (expand* disjoint? empty? intersection member)
        (("" (skolem 2 m)
          (("" (flatten)
            (("" (instantiate -2 m)
              (("" (assert)
                (("" (replace -2)
                  (("" (expand* union singleton member) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   73445 80 t shostak))
 (card_intersection_subset 0
  (card_intersection_subset-1 nil 3533377742 3533377985
   ("" (skolem 1 (x y))
    (("" (flatten)
      (("" (lemma finite_sets[T].card_intersection_le)
        (("" (instantiate -1 (x y))
          (("" (flatten)
            (("" (assert)
              (("" (replace -3)
                (("" (rewrite card_def)
                  (("" (rewrite card_def)
                    (("" (rewrite card_def) (("" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 243617 380 t shostak))
 (unionRemoveEqual 0
  (unionRemoveEqual-1 nil 3533400971 3533401037
   ("" (skolem 1 (x m n))
    (("" (flatten)
      (("" (decompose-equality -1)
        (("" (instantiate -1 n)
          (("" (assert)
            (("" (bddsimp)
              (("" (expand* union singleton remove member) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   24340 60 t shostak))
 (unionRemoveEqual2 0
  (unionRemoveEqual2-1 nil 3533402977 3533403009
   ("" (skolem 1 (x y m))
    (("" (expand* union singleton remove member)
      (("" (flatten)
        (("" (decompose-equality 1)
          (("" (bddsimp)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil))
   31807 60 t shostak))
 (singletonEqual_TCC1 0
  (singletonEqual_TCC1-1 nil 3533563594 3533563600
   ("" (subtype-tcc) nil nil) unchecked
   ((singleton const-decl "(singleton?)" sets nil)) 7 10 nil nil))
 (singletonEqual 0
  (singletonEqual-1 nil 3533563604 3533563728
   ("" (skolem 1 m)
    (("" (expand* restrict extend singleton)
      (("" (bddsimp)
        (("1" (decompose-equality 1)
          (("1" (typepred x!1)
            (("1" (expand singleton) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (skolem 1 y)
            (("2" (typepred y)
              (("2" (expand singleton) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality 1) (("2" (bddsimp) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set_aux_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   49875 70 t shostak)))

