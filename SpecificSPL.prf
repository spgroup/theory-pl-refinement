(SpecificSPL
 (IMP_SPLrefinement_amRef_TCC1 0
  (IMP_SPLrefinement_amRef_TCC1-3 nil 3507474478 3507480692
   ("" (skolem 1 (am1 am2))
    (("" (lemma amRefCompositional)
      (("" (flatten)
        (("" (instantiate -1 (am1 am2))
          (("" (assert)
            (("" (skolem 1 (K c))
              (("" (flatten)
                (("" (expand semantics)
                  (("" (instantiate -1 "eval(K, c)")
                    (("" (instantiate -1 (emptyset))
                      (("" (lemma sets_lemmas[Asset].union_commutative)
                        (("" (lemma sets_lemmas[Asset].union_empty)
                          (("" (instantiate -1 "map(am1, eval(K, c))")
                            ((""
                              (instantiate -2
                               (emptyset "map(am1, eval(K, c))"))
                              ((""
                                (assert)
                                ((""
                                  (flatten)
                                  ((""
                                    (replace -2 -4)
                                    ((""
                                      (replace -1 -4)
                                      ((""
                                        (lemma
                                         sets_lemmas[Asset].union_commutative)
                                        ((""
                                          (lemma
                                           sets_lemmas[Asset].union_empty)
                                          ((""
                                            (instantiate
                                             -1
                                             "map(am2, eval(K, c))")
                                            ((""
                                              (instantiate
                                               -2
                                               (emptyset
                                                "map(am2, eval(K, c))"))
                                              ((""
                                                (replace -2 -5)
                                                ((""
                                                  (replace -1 -5)
                                                  ((""
                                                    (replace -2 -6)
                                                    ((""
                                                      (replace -1 -6)
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((amRefCompositional formula-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (AssetName type-decl nil Assets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   76 60 nil nil)
  (IMP_SPLrefinement_amRef_TCC1-2 nil 3507474462 3507474472
   (";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
    (skolem 1 (am1 am2))
    ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
      (lemma amRefCompositional)
      ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
        (flatten)
        ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
          (instantiate -1 (am1 am2))
          ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
            (assert)
            ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
              (skolem 1 (K c))
              ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                (flatten)
                ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                  (expand semantics)
                  ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                    (instantiate -1 "semanticsCK(K, c)")
                    ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                      (instantiate -1 (emptyset))
                      ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                        (lemma sets_lemmas[Asset].union_commutative)
                        ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                          (lemma sets_lemmas[Asset].union_empty)
                          ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                            (instantiate -1 "map(am1, eval(K, c))")
                            ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                              (instantiate -2
                               (emptyset "map(am1, eval(K, c))"))
                              ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                (assert)
                                ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                  (flatten)
                                  ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                    (replace -2 -4)
                                    ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                      (replace -1 -4)
                                      ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                        (lemma
                                         sets_lemmas[Asset].union_commutative)
                                        ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                          (lemma
                                           sets_lemmas[Asset].union_empty)
                                          ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                            (instantiate
                                             -1
                                             "map(am2, eval(K, c))")
                                            ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                              (instantiate
                                               -2
                                               (emptyset
                                                "map(am2, eval(K, c))"))
                                              ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                                (replace -2 -5)
                                                ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                                  (replace -1 -5)
                                                  ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                                    (replace -2 -6)
                                                    ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                                      (replace -1 -6)
                                                      ((";;; Proof IMP_SPLrefinement_amRef_TCC1-1 for formula SpecificSPL.IMP_SPLrefinement_amRef_TCC1"
                                                        (assert)
                                                        nil))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 8978 110 t nil)
  (IMP_SPLrefinement_amRef_TCC1-1 nil 3489161513 3507474422
   ("" (skolem 1 (am1 am2))
    (("" (lemma amRefCompositional)
      (("" (flatten)
        (("" (instantiate -1 (am1 am2))
          (("" (assert)
            (("" (skolem 1 (K c))
              (("" (flatten)
                (("" (expand sCK)
                  (("" (instantiate -1 "semanticsCK(K, c)")
                    (("" (instantiate -1 (emptyset))
                      (("" (lemma sets_lemmas[Asset].union_commutative)
                        (("" (lemma sets_lemmas[Asset].union_empty)
                          ((""
                            (instantiate -1
                             "map(am1, semanticsCK(K, c))")
                            ((""
                              (instantiate -2
                               (emptyset
                                "map(am1, semanticsCK(K, c))"))
                              ((""
                                (assert)
                                ((""
                                  (flatten)
                                  ((""
                                    (replace -2 -4)
                                    ((""
                                      (replace -1 -4)
                                      ((""
                                        (lemma
                                         sets_lemmas[Asset].union_commutative)
                                        ((""
                                          (lemma
                                           sets_lemmas[Asset].union_empty)
                                          ((""
                                            (instantiate
                                             -1
                                             "map(am2, semanticsCK(K, c))")
                                            ((""
                                              (instantiate
                                               -2
                                               (emptyset
                                                "map(am2, semanticsCK(K, c))"))
                                              ((""
                                                (replace -2 -5)
                                                ((""
                                                  (replace -1 -5)
                                                  ((""
                                                    (replace -2 -6)
                                                    ((""
                                                      (replace -1 -6)
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((amRefCompositional formula-decl nil AssetMapping nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (mapping type-eq-decl nil maps nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (AssetName type-decl nil Assets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   105 40 t nil))
 (mapSubsetAM_TCC1 0
  (mapSubsetAM_TCC1-2 nil 3507477575 3507480692
   ("" (lemma "maps[AssetName,Asset].uniqueUnion")
    (("" (skolem 1 (fm am1 am2 ck))
      (("" (flatten)
        (("" (instantiate -1 (am1 am2))
          (("" (bddsimp) (("" (skosimp) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (uniqueUnion formula-decl nil maps nil)
    (AssetName type-decl nil Assets nil)
    (Asset type-decl nil Assets nil))
   30 10 t nil)
  (mapSubsetAM_TCC1-1 nil 3507474609 3507477559
   ("" (lemma "maps[AssetName,Asset].uniqueUnion")
    (("" (skolem 1 (fm am1 am2 ck))
      (("" (flatten)
        (("" (instantiate -1 (am1 am2))
          (("" (bddsimp)
            (("" (skolem 1 c) (("" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (mapping type-eq-decl nil maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (uniqueUnion formula-decl nil maps nil)
    (AssetName type-decl nil Assets nil)
    (Asset type-decl nil Assets nil))
   37190 20 t nil))
 (mapSubsetAM 0
  (mapSubsetAM-1 nil 3507474616 3507478442
   ("" (skolem 1 (fm am1 am2 ck))
    (("" (expand wfCK)
      (("" (flatten)
        (("" (skolem 1 c)
          (("" (flatten)
            (("" (instantiate -2 c)
              (("" (assert)
                (("" (expand* subset? semantics map union member)
                  (("" (decompose-equality 1)
                    (("" (bddsimp)
                      (("1" (skolem -1 an)
                        (("1" (flatten)
                          (("1" (instantiate 1 an)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skolem -1 an)
                        (("2" (flatten)
                          (("2" (instantiate 1 an)
                            (("2" (assert)
                              (("2"
                                (instantiate -3 an)
                                (("2"
                                  (expand dom)
                                  (("2"
                                    (bddsimp)
                                    (("1"
                                      (instantiate -3 an)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (instantiate 2 x!1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (AssetName type-decl nil Assets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Asset type-decl nil Assets nil) (dom const-decl "set[S]" maps nil)
    (subset? const-decl "bool" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil))
   357 90 t shostak))
 (conditionsReplaceFeatureExp_TCC1 0
  (conditionsReplaceFeatureExp_TCC1-1 nil 3507479782 3507480692
   ("" (expand wfTree) (("" (propax) nil nil)) nil) unchecked
   ((wfTree const-decl "bool" FeatureModel nil)) 2 0 t nil))
 (replaceFeatureExp_EqualCKeval 0
  (replaceFeatureExp_EqualCKeval-1 nil 3507479891 3507480058
   ("" (skolem 1 (pl ck2 it1 it2 items))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* syntaxReplaceFeatureExp
               conditionsReplaceFeatureExp map eval evalCK union
               singleton assetsCK member)
              (("" (flatten)
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (assert)
                      (("" (decompose-equality 1)
                        (("" (instantiate -6 c)
                          (("" (assert)
                            (("" (bddsimp 1)
                              (("1"
                                (skolem -1 an)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate 1 an)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 it)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (bddsimp -2)
                                            (("1"
                                              (instantiate 1 it2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (instantiate 1 it)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 an)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 an)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skolem -1 it)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (bddsimp -2)
                                            (("1"
                                              (instantiate 1 it1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (instantiate 1 it)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((conditionsReplaceFeatureExp const-decl "bool" SpecificSPL nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (union const-decl "set" sets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (syntaxReplaceFeatureExp const-decl "bool" SpecificSPL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (AM type-eq-decl nil AssetMapping nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AssetName type-decl nil Assets nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   166782 160 t shostak))
 (replaceFeatureExpression_TCC1 0
  (replaceFeatureExpression_TCC1-1 nil 3507479782 3507480692
   ("" (lemma replaceFeatureExp_EqualCKeval)
    (("" (skolem 1 (pl ck2 it1 it2 its pl2))
      (("" (flatten)
        (("" (typepred pl)
          (("" (instantiate -2 (pl ck2 it1 it2 its))
            (("" (assert)
              (("" (expand wfPL)
                (("" (skolem 1 c)
                  (("" (flatten)
                    (("" (instantiate -1 c)
                      (("" (assert)
                        (("" (instantiate -2 c) (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (replaceFeatureExp_EqualCKeval formula-decl nil SpecificSPL nil))
   41 30 t nil))
 (replaceFeatureExpression 0
  (replaceFeatureExpression-1 nil 3507480156 3507480550
   ("" (skolem 1 (pl ck2 it1 it2 items))
    (("" (assert)
      (("" (flatten)
        (("" (lemma replaceFeatureExp_EqualCKeval)
          (("" (instantiate -1 (pl ck2 it1 it2 items))
            (("" (assert)
              (("" (expand* plRefinement wfCK wfPL)
                (("" (flatten)
                  (("" (bddsimp)
                    (("1" (skolem 1 c)
                      (("1" (flatten)
                        (("1" (instantiate -1 c)
                          (("1" (typepred pl)
                            (("1" (expand wfPL)
                              (("1"
                                (instantiate -1 c)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 fe)
                      (("2" (flatten)
                        (("2" (expand syntaxReplaceFeatureExp)
                          (("2" (flatten)
                            (("2" (replace -4)
                              (("2"
                                (replace -5)
                                (("2"
                                  (expand* exps union singleton member)
                                  (("2"
                                    (skolem -8 it)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (replace -8)
                                          (("1"
                                            (expand
                                             conditionsReplaceFeatureExp)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (instantiate -3 fe)
                                          (("2"
                                            (bddsimp)
                                            (("2"
                                              (instantiate 1 it)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skolem 1 c)
                      (("3" (flatten)
                        (("3" (instantiate -2 c)
                          (("3" (assert)
                            (("3"
                              (expand* eval assetsCK evalCK subset?
                               member)
                              (("3"
                                (skolem 1 an)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (instantiate -2 an)
                                    (("3"
                                      (bddsimp)
                                      (("3"
                                        (skolem -6 it)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand
                                             syntaxReplaceFeatureExp)
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (replace -3)
                                                (("3"
                                                  (replace -4)
                                                  (("3"
                                                    (expand*
                                                     union
                                                     singleton
                                                     member)
                                                    (("3"
                                                      (bddsimp)
                                                      (("1"
                                                        (instantiate
                                                         1
                                                         it1)
                                                        (("1"
                                                          (expand
                                                           conditionsReplaceFeatureExp)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (instantiate
                                                               -7
                                                               c)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (instantiate
                                                         1
                                                         it)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skolem 1 c)
                      (("4" (flatten)
                        (("4" (instantiate 1 c)
                          (("4" (instantiate -1 c)
                            (("4" (assert)
                              (("4"
                                (use assetRefinement)
                                (("4"
                                  (expand* preorder? reflexive?)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (instantiate
                                       -1
                                       "semantics(K(pl))(A(pl))(c)")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((replaceFeatureExp_EqualCKeval formula-decl nil SpecificSPL nil)
    (AM type-eq-decl nil AssetMapping nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (AssetName type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (subset? const-decl "bool" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (syntaxReplaceFeatureExp const-decl "bool" SpecificSPL nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (conditionsReplaceFeatureExp const-decl "bool" SpecificSPL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil))
   394777 310 t shostak))
 (evalCKdeadFeature 0
  (evalCKdeadFeature-1 nil 3507477894 3507479102
   ("" (skolem 1 (pl G))
    (("" (flatten)
      (("" (lemma notMember)
        (("" (instantiate -1 ("F(pl)" G))
          (("" (assert)
            (("" (skolem 2 c)
              (("" (flatten)
                (("" (instantiate -1 c)
                  (("" (assert)
                    (("" (expand semantics +)
                      ((""
                        (expand* map eval assetsCK evalCK member wfCK
                         expsCK exps subset? member)
                        (("" (flatten)
                          (("" (decompose-equality 3)
                            (("" (bddsimp)
                              (("1"
                                (skolem -1 an)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate 1 an)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 it)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (instantiate 1 it)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma satisfies1)
                                                (("1"
                                                  (lemma formNames2)
                                                  (("1"
                                                    (instantiate
                                                     -8
                                                     "exp(it)")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (instantiate
                                                         -1
                                                         ("F(pl)"
                                                          "exp(it)"
                                                          G))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (instantiate
                                                             -1
                                                             ("exp(it)"
                                                              c
                                                              G))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (instantiate
                                                         4
                                                         it)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 an)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (instantiate 1 an)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skolem -1 it)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (instantiate 1 it)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma satisfies2)
                                                (("2"
                                                  (lemma formNames2)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     ("F(pl)"
                                                      "exp(it)"
                                                      G))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (instantiate
                                                         -8
                                                         "exp(it)")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (instantiate
                                                             -2
                                                             ("exp(it)"
                                                              "union(c,singleton[Name](G))"
                                                              G))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "remove(G, union(c, singleton[Name](G)))=c")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand*
                                                                     remove
                                                                     union
                                                                     singleton
                                                                     member)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (bddsimp)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (instantiate
                                                             5
                                                             it)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand wfTree)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((formNames2 formula-decl nil FormulaTheory nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (satisfies1 formula-decl nil FormulaTheory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (satisfies2 formula-decl nil FormulaTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (AM type-eq-decl nil AssetMapping nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (notMember formula-decl nil FeatureModelSemantics nil))
   643730 260 t shostak))
 (addMandatoryFeat_TCC1 0
  (addMandatoryFeat_TCC1-1 nil 3507483371 3507483694
   ("" (skolem 1 (pl F G fm2 pl2))
    (("" (typepred pl)
      (("" (flatten)
        (("" (expand wfPL)
          (("" (lemma addMandatoryTWF)
            (("" (instantiate -1 ("F(pl)" F G fm2))
              (("" (expand syntaxConditionsAddMandatoryFeat)
                (("" (assert)
                  (("" (flatten)
                    (("" (skolem 1 c)
                      (("" (flatten)
                        (("" (instantiate -2 c)
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (replace -7)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma evalCKdeadFeature)
                                    (("1"
                                      (instantiate -1 (pl G))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand addMandatoryNode)
                                            (("1" (flatten) nil nil))
                                            nil)
                                           ("2"
                                            (instantiate
                                             -1
                                             "remove(G,c)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (instantiate
                                                 -5
                                                 "remove(G,c)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "union(remove(G, c), singleton[Name](G))=c")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-3 1))
                                                      (("2"
                                                        (expand*
                                                         union
                                                         remove
                                                         singleton
                                                         member)
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (bddsimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (instantiate -3 c)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (addMandatoryNode const-decl "bool" FeatureModelRefinements nil)
    (remove const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (evalCKdeadFeature formula-decl nil SpecificSPL nil)
    (syntaxConditionsAddMandatoryFeat const-decl "bool" SpecificSPL
     nil)
    (addMandatoryTWF formula-decl nil FeatureModelRefinements nil))
   303456 190 t nil))
 (addMandatoryFeat 0
  (addMandatoryFeat-1 nil 3507483713 3507484336
   ("" (skolem 1 (pl F G fm2))
    (("" (lemma addMandatoryTWF)
      (("" (assert)
        (("" (flatten)
          (("" (expand syntaxConditionsAddMandatoryFeat)
            (("" (instantiate -1 ("F(pl)" F G fm2))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma addMandatoryFeat_TCC1)
                    ((""
                      (instantiate -1
                       (pl F G fm2
                        "(# F := fm2, A := A(pl), K := K(pl) #)"))
                      (("" (assert)
                        (("" (expand syntaxConditionsAddMandatoryFeat)
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (expand wfCK)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (skolem 1 fe)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (instantiate -6 fe)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand*
                                               addmandatorynode
                                               subset?
                                               member)
                                              (("1"
                                                (expand*
                                                 addMandatoryNode
                                                 subset?
                                                 member)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     wtFormRefinement)
                                                    (("1"
                                                      (instantiate
                                                       -1
                                                       ("F(pl)" fm2))
                                                      (("1"
                                                        (expand wfTree)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (instantiate
                                                             -1
                                                             fe)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skolem
                                                             1
                                                             name)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (expand*
                                                                   union
                                                                   singleton
                                                                   member)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 c)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (instantiate -3 c)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (instantiate
                                                 -6
                                                 "remove(G, c)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     subset?
                                                     member
                                                     eval
                                                     assetsCK
                                                     evalCK
                                                     dom)
                                                    (("1"
                                                      (skolem 1 an)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (instantiate
                                                           -6
                                                           an)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (skolem
                                                               -8
                                                               it)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (instantiate
                                                                   1
                                                                   it)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       formNames2)
                                                                      (("1"
                                                                        (lemma
                                                                         satisfies2)
                                                                        (("1"
                                                                          (instantiate
                                                                           -2
                                                                           ("F(pl)"
                                                                            "exp(it)"
                                                                            G))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (instantiate
                                                                               -8
                                                                               "exp(it)")
                                                                              (("1"
                                                                                (expand
                                                                                 exps)
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     addMandatoryNode)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (instantiate
                                                                                     -1
                                                                                     ("exp(it)"
                                                                                      c
                                                                                      G))
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (instantiate
                                                                                     4
                                                                                     it)
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             wfTree)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (instantiate -5 c)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand plRefinement)
                                (("2"
                                  (skolem 1 c)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (instantiate -2 c)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (instantiate
                                             1
                                             "union(c,G)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 evalCKdeadFeature)
                                                (("1"
                                                  (instantiate
                                                   -1
                                                   (pl G))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         addMandatoryNode)
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (instantiate
                                                         -1
                                                         c)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             assetRefinement)
                                                            (("2"
                                                              (expand*
                                                               preorder?
                                                               reflexive?)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (instantiate
                                                                   -1
                                                                   "semantics(K(pl))(A(pl))(c)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (instantiate 2 c)
                                            (("2"
                                              (use assetRefinement)
                                              (("2"
                                                (expand*
                                                 preorder?
                                                 reflexive?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (instantiate
                                                     -1
                                                     "semantics(K(pl))(A(pl))(c)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((addMandatoryTWF formula-decl nil FeatureModelRefinements nil)
    (remove const-decl "set" sets nil)
    (formNames2 formula-decl nil FormulaTheory nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (satisfies2 formula-decl nil FormulaTheory nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (dom const-decl "set[S]" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (wtFormRefinement formula-decl nil FeatureModelSemantics nil)
    (addMandatoryNode const-decl "bool" FeatureModelRefinements nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil)
    (singleton? const-decl "bool" sets nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (evalCKdeadFeature formula-decl nil SpecificSPL nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (addMandatoryFeat_TCC1 subtype-tcc nil SpecificSPL nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (AM type-eq-decl nil AssetMapping nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (syntaxConditionsAddMandatoryFeat const-decl "bool" SpecificSPL
     nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil))
   622970 470 t shostak))
 (splitNotEvalItem 0
  (splitNotEvalItem-1 nil 3507485262 3507485484
   ("" (skolem 1 (pl am2 ck2 it1 it2 a1 a2 a3 an1 an2 its pairs))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* map eval assetsCK evalCK syntaxSplitAssets
               conditionsSplitAssets union singleton member)
              (("" (flatten)
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (replace -4)
                      (("" (replace -5)
                        (("" (hide -1)
                          (("" (assert)
                            (("" (decompose-equality 2)
                              ((""
                                (bddsimp)
                                (("1"
                                  (skolem -1 an)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skolem -1 it)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (replace -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (replace -2)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (replace -4)
                                            (("3"
                                              (instantiate -14 it)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (instantiate 1 an)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (instantiate 1 it)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem -1 an)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (skolem -1 it)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (bddsimp)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil)
                                           ("4"
                                            (instantiate -14 it)
                                            (("4" (assert) nil nil))
                                            nil)
                                           ("5"
                                            (instantiate -14 it)
                                            (("5" (assert) nil nil))
                                            nil)
                                           ("6"
                                            (instantiate 1 an)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (instantiate 1 it)
                                                (("6"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (syntaxSplitAssets const-decl "bool" SpecificSPL nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (AssetName type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   204408 270 t shostak))
 (splitEvalItemUnion 0
  (splitEvalItemUnion-1 nil 3507485658 3507486117
   ("" (skolem 1 (pl am2 ck2 it1 it2 a1 a2 a3 an1 an2 its pairs))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* map eval assetsCK evalCK syntaxSplitAssets
               conditionsSplitAssets union singleton member)
              (("" (flatten)
                (("" (hide -1)
                  (("" (replace -1)
                    (("" (replace -2)
                      (("" (replace -3)
                        (("" (replace -4)
                          (("" (assert)
                            (("" (bddsimp)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -1 it)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -11)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred am2)
                                                    (("1"
                                                      (expand unique)
                                                      (("1"
                                                        (replace -8)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (instantiate
                                                               -2
                                                               (an1
                                                                x!1
                                                                a2))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (instantiate
                                                               -2
                                                               (an2
                                                                x!1
                                                                a3))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (instantiate 3 an)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (instantiate 3 it)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (instantiate 1 an1)
                                      (("2"
                                        (instantiate 1 it2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -8)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (instantiate 1 an2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (instantiate 1 it2)
                                        (("3"
                                          (replace -8)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skolem -1 an)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (skolem -1 it)
                                        (("4"
                                          (bddsimp)
                                          (("1"
                                            (instantiate -14 it)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (instantiate -14 it)
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3"
                                            (instantiate 1 an)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (instantiate 1 it)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (decompose-equality 1)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (skolem -1 an)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -1 it)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -10)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "A(pl)")
                                                    (("1"
                                                      (expand unique)
                                                      (("1"
                                                        (replace -7)
                                                        (("1"
                                                          (instantiate
                                                           -2
                                                           (an x!1 a1))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (instantiate 2 an)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (instantiate 2 it)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (instantiate 1 an1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (instantiate 1 it1)
                                        (("2"
                                          (replace -7)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skolem -1 an)
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (skolem -1 it)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (bddsimp)
                                            (("1"
                                              (instantiate -14 it)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (instantiate 1 an)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (instantiate 1 it)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (syntaxSplitAssets const-decl "bool" SpecificSPL nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (Configuration type-eq-decl nil Name nil)
    (Name type-decl nil Name nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AssetName type-decl nil Assets nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   443756 570 t shostak))
 (splitEvalRemainingItems 0
  (splitEvalRemainingItems-1 nil 3507486141 3507486278
   ("" (skolem 1 (pl am2 ck2 it1 it2 a1 a2 a3 an1 an2 its pairs))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* map eval assetsCK evalCK syntaxSplitAssets
               conditionsSplitAssets union singleton member)
              (("" (flatten)
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (decompose-equality 1)
                      (("" (bddsimp)
                        (("1" (skolem -1 an)
                          (("1" (flatten)
                            (("1" (skolem -1 it)
                              (("1"
                                (flatten)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (instantiate -15 it)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (instantiate 1 an)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (instantiate 1 it)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem -1 an)
                          (("2" (flatten)
                            (("2" (skolem -1 it)
                              (("2"
                                (flatten)
                                (("2"
                                  (instantiate -14 it)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (bddsimp)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (instantiate 1 an)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (instantiate 1 it)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (syntaxSplitAssets const-decl "bool" SpecificSPL nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (AssetName type-decl nil Assets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Asset type-decl nil Assets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   136808 220 t shostak))
 (splitAssetWFCK 0
  (splitAssetWFCK-1 nil 3507486323 3507486693
   ("" (skolem 1 (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2 items pairs))
    (("" (expand* wfCK conditionsSplitAssets syntaxSplitAssets)
      (("" (flatten)
        (("" (bddsimp)
          (("1" (skolem 1 fe)
            (("1" (expand* exps)
              (("1" (replace -5)
                (("1" (replace -6)
                  (("1" (expand* subset? union singleton member)
                    (("1" (instantiate -2 fe)
                      (("1" (bddsimp)
                        (("1" (skolem -11 it)
                          (("1" (flatten)
                            (("1" (bddsimp)
                              (("1"
                                (instantiate 1 item1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (instantiate 1 it)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 c)
            (("2" (flatten)
              (("2" (instantiate -1 c)
                (("2" (assert)
                  (("2" (expand* union singleton subset? member)
                    (("2" (skolem 1 an)
                      (("2" (flatten)
                        (("2" (replace -5)
                          (("2" (replace -6)
                            (("2" (replace -3)
                              (("2"
                                (replace -4)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand* eval assetsCK evalCK dom)
                                    (("2"
                                      (instantiate -1 an)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (skolem -1 a)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (instantiate 1 a2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (instantiate 1 a)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem -12 it)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (instantiate 1 item1)
                                                (("1"
                                                  (replace -13)
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (replace -12)
                                                          (("1"
                                                            (instantiate
                                                             2
                                                             a2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (instantiate
                                                           2
                                                           a3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (instantiate 1 it)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (syntaxSplitAssets const-decl "bool" SpecificSPL nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (Asset type-decl nil Assets nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (dom const-decl "set[S]" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil))
   370048 430 t shostak))
 (splitAssets_TCC1 0
  (splitAssets_TCC1-1 nil 3507486743 3507486980
   (""
    (skolem 1
     (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2 items pairs pl2))
    (("" (typepred pl)
      (("" (expand wfPL)
        (("" (flatten)
          (("" (replace -5)
            (("" (skolem 1 c)
              (("" (flatten)
                (("" (instantiate -1 c)
                  (("" (assert)
                    (("" (case "satisfies(exp(item1),c)")
                      (("1" (lemma splitEvalItemUnion)
                        (("1" (lemma splitEvalRemainingItems)
                          (("1"
                            (instantiate -2
                             (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2
                              items pairs))
                            (("1" (assert)
                              (("1"
                                (instantiate
                                 -1
                                 (pl
                                  am2
                                  ck2
                                  item1
                                  item2
                                  a1
                                  a2
                                  a3
                                  an1
                                  an2
                                  items
                                  pairs))
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma asRefCompositional)
                                    (("1"
                                      (instantiate
                                       -1
                                       (a1
                                        "union(a2,a3)"
                                        "(semantics(items)(A(pl))(c))"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (instantiate -3 c)
                                          (("1"
                                            (instantiate -2 c)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   conditionsSplitAssets)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma splitNotEvalItem)
                        (("2"
                          (instantiate -1
                           (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2
                            items pairs))
                          (("2" (assert)
                            (("2" (instantiate -1 c)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (splitEvalRemainingItems formula-decl nil SpecificSPL nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (asRefCompositional formula-decl nil Assets nil)
    (splitEvalItemUnion formula-decl nil SpecificSPL nil)
    (splitNotEvalItem formula-decl nil SpecificSPL nil))
   206044 200 t nil))
 (splitAssets 0
  (splitAssets-1 nil 3507486987 3507487185
   ("" (skolem 1 (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2 items pairs))
    (("" (expand plRefinement)
      (("" (lemma splitAssets_TCC1)
        ((""
          (instantiate -1
           (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2 items pairs
            "(# F := F(pl), A := am2, K := ck2 #)"))
          (("" (flatten)
            (("" (assert)
              (("" (lemma splitAssetWFCK)
                ((""
                  (instantiate -1
                   (pl am2 ck2 item1 item2 a1 a2 a3 an1 an2 items
                    pairs))
                  (("" (assert)
                    (("" (skolem 1 c)
                      (("" (flatten)
                        (("" (instantiate 1 c)
                          (("" (assert)
                            (("" (case "satisfies(exp(item1),c)")
                              (("1"
                                (lemma splitEvalItemUnion)
                                (("1"
                                  (lemma splitEvalRemainingItems)
                                  (("1"
                                    (instantiate
                                     -2
                                     (pl
                                      am2
                                      ck2
                                      item1
                                      item2
                                      a1
                                      a2
                                      a3
                                      an1
                                      an2
                                      items
                                      pairs))
                                    (("1"
                                      (instantiate
                                       -1
                                       (pl
                                        am2
                                        ck2
                                        item1
                                        item2
                                        a1
                                        a2
                                        a3
                                        an1
                                        an2
                                        items
                                        pairs))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (instantiate -1 c)
                                          (("1"
                                            (instantiate -2 c)
                                            (("1"
                                              (lemma
                                               asRefCompositional)
                                              (("1"
                                                (instantiate
                                                 -1
                                                 (a1
                                                  "union(a2,a3)"
                                                  "(semantics(items)(A(pl))(c))"))
                                                (("1"
                                                  (expand
                                                   conditionsSplitAssets)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             pl)
                                                            (("1"
                                                              (expand
                                                               wfPL)
                                                              (("1"
                                                                (instantiate
                                                                 -1
                                                                 c)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma splitNotEvalItem)
                                (("2"
                                  (instantiate
                                   -1
                                   (pl
                                    am2
                                    ck2
                                    item1
                                    item2
                                    a1
                                    a2
                                    a3
                                    an1
                                    an2
                                    items
                                    pairs))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (instantiate -1 c)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use assetRefinement)
                                          (("2"
                                            (expand*
                                             preorder?
                                             reflexive?)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (instantiate
                                                 -1
                                                 "semantics(K(pl))(A(pl))(c)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((plRefinement const-decl "bool" SPLrefinement nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (splitEvalRemainingItems formula-decl nil SpecificSPL nil)
    (asRefCompositional formula-decl nil Assets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (conditionsSplitAssets const-decl "bool" SpecificSPL nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (splitEvalItemUnion formula-decl nil SpecificSPL nil)
    (assetRefinement formula-decl nil Assets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (splitNotEvalItem formula-decl nil SpecificSPL nil)
    (splitAssetWFCK formula-decl nil SpecificSPL nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (unique const-decl "bool" maps nil)
    (Asset type-decl nil Assets nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AssetName type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (splitAssets_TCC1 subtype-tcc nil SpecificSPL nil))
   197619 210 t shostak))
 (syntaxAddOptionalFeature_TCC1 0
  (syntaxAddOptionalFeature_TCC1-1 nil 3507487871 3507487913
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand singleton) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked ((singleton const-decl "(singleton?)" sets nil)) 16082 20
   t nil))
 (addOptionalFeatureEqualProducts 0
  (addOptionalFeatureEqualProducts-2 nil 3507545736 3507546454
   ("" (skolem 1 (pl fm2 am2 ck2 F G items pairs))
    (("" (flatten)
      (("" (skolem 1 c)
        (("" (flatten)
          (("" (expand semantics +)
            ((""
              (expand* syntaxAddOptionalFeature
               conditionsAddOptionalFeature wfCK map eval assetsCK
               evalCK union singleton member)
              (("" (flatten)
                (("" (expand* subset? member)
                  (("" (replace -6)
                    (("" (replace -7)
                      (("" (decompose-equality 2)
                        (("" (bddsimp)
                          (("1" (skolem -1 an)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 it)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (instantiate 1 an)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (instantiate 1 it)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem -1 an)
                            (("2" (flatten)
                              (("2"
                                (bddsimp)
                                (("1"
                                  (instantiate 1 an)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skolem -1 it)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (instantiate 1 it)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (instantiate -16 c)
                                            (("2"
                                              (instantiate
                                               -16
                                               "exp(it)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (bddsimp)
                                                  (("1"
                                                    (expand
                                                     satisfies
                                                     -16)
                                                    (("1"
                                                      (skolem -16 n1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           semantics
                                                           -18)
                                                          (("1"
                                                            (expand
                                                             satImpConsts)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (instantiate
                                                                 -18
                                                                 G)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand exps)
                                                    (("2"
                                                      (instantiate
                                                       3
                                                       it)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (instantiate -3 c)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (instantiate -3 an)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (instantiate -13 an)
                                          (("1"
                                            (expand dom)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (instantiate 2 x!1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem -1 it)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (instantiate 2 it)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (instantiate -15 c)
                                                (("2"
                                                  (instantiate
                                                   -15
                                                   "exp(it)")
                                                  (("2"
                                                    (expand exps)
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         satisfies
                                                         -15)
                                                        (("1"
                                                          (skolem
                                                           -15
                                                           n1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               semantics
                                                               -17)
                                                              (("1"
                                                                (expand
                                                                 satImpConsts)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (instantiate
                                                                     -17
                                                                     G)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (instantiate
                                                         4
                                                         it)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((conditionsAddOptionalFeature const-decl "bool" SpecificSPL nil)
    (map const-decl "finite_sets[T].finite_set" maps nil)
    (assetsCK const-decl "finite_sets[AssetName].finite_set"
     ConfigurationKnowledge nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (evalCK const-decl "finite_sets[Item].finite_set"
     ConfigurationKnowledge nil)
    (eval const-decl "finite_sets[AssetName].finite_set"
          ConfigurationKnowledge nil)
    (wfCK const-decl "bool" ConfigurationKnowledge nil)
    (syntaxAddOptionalFeature const-decl "bool" SpecificSPL nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "set[S]" maps nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (exps const-decl "set[Formula_]" ConfigurationKnowledge nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Asset type-decl nil Assets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Configuration type-eq-decl nil Name nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (set type-eq-decl nil sets nil) (Name type-decl nil Name nil)
    (AM type-eq-decl nil AssetMapping nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (Formula_ type-decl nil Formula__adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AssetName type-decl nil Assets nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil))
   387238 520 t nil)
  (addOptionalFeatureEqualProducts-1 nil 3507545341 3507545480
   ("" (skolem 1 (pl fm2 am2 ck2 F G items pairs))
    (("" (lemma addNode)
      (("" (instantiate -1 ("F(pl)" F G))
        (("" (skolem -1 con)
          (("" (flatten)
            (("" (expand addOptionalNode)
              ((""
                (expand* syntaxAddOptionalFeature
                 conditionsAddOptionalFeature)
                (("" (flatten)
                  (("" (case "fm2=con")
                    (("1" (assert) (("1" (postpone) nil nil)) nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 139200 80 t shostak))
 (addOptionalFeature_TCC1 0
  (addOptionalFeature_TCC1-1 nil 3507545269 3507545302
   ("" (skosimp)
    (("" (expand conditionsAddOptionalFeature)
      (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((conditionsAddOptionalFeature const-decl "bool" SpecificSPL nil))
   19874 30 t nil))
 (addOptionalFeature 0
  (addOptionalFeature-1 nil 3507546459 3507546666
   ("" (skolem 1 (pl fm2 am2 ck2 F G items pairs))
    (("" (assert)
      (("" (flatten)
        (("" (lemma addOptNode)
          (("" (instantiate -1 ("F(pl)" F G fm2))
            (("" (bddsimp -1)
              (("1" (bddsimp)
                (("1" (expand conditionsAddOptionalFeature)
                  (("1" (flatten) nil nil)) nil)
                 ("2" (expand conditionsAddOptionalFeature)
                  (("2" (flatten) nil nil)) nil)
                 ("3" (expand plRefinement)
                  (("3" (expand refines)
                    (("3" (expand* subset? member)
                      (("3" (skolem 1 c)
                        (("3" (flatten)
                          (("3" (instantiate -1 c)
                            (("3" (instantiate 1 c)
                              (("3"
                                (assert)
                                (("3"
                                  (lemma
                                   addOptionalFeatureEqualProducts)
                                  (("3"
                                    (instantiate
                                     -1
                                     (pl fm2 am2 ck2 F G items pairs))
                                    (("3"
                                      (assert)
                                      (("3"
                                        (instantiate -1 c)
                                        (("3"
                                          (use assetRefinement)
                                          (("3"
                                            (expand*
                                             preorder?
                                             reflexive?)
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (instantiate
                                                 -1
                                                 "semantics(K(pl))(A(pl))(c)")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (expand* syntaxAddOptionalFeature
                 conditionsAddOptionalFeature addOptionalNode)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((addOptionalNode const-decl "bool" FeatureModelRefinements nil)
    (syntaxAddOptionalFeature const-decl "bool" SpecificSPL nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (conditionsAddOptionalFeature const-decl "bool" SpecificSPL nil)
    (refines const-decl "bool" FeatureModelSemantics nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (assetRefinement formula-decl nil Assets nil)
    (addOptionalFeatureEqualProducts formula-decl nil SpecificSPL nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (plRefinement const-decl "bool" SPLrefinement nil)
    (Name type-decl nil Name nil) (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (AM type-eq-decl nil AssetMapping nil)
    (AssetName type-decl nil Assets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Item type-eq-decl nil ConfigurationKnowledge nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CK type-eq-decl nil ConfigurationKnowledge nil)
    (Configuration type-eq-decl nil Name nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (Asset type-decl nil Assets nil)
    (unique const-decl "bool" maps nil)
    (semantics const-decl "finite_sets[Asset].finite_set"
     ConfigurationKnowledge nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (addOptNode formula-decl nil FeatureModelRefinements nil))
   106648 140 t shostak)))

