(PartialRefTemplatesFM
 (transfOptMand_TCC1 0
  (transfOptMand_TCC1-1 nil 3682854490 ("" (subtype-tcc) nil nil) nil
   nil))
 (wfTransfOptMand_TCC1 0
  (wfTransfOptMand_TCC1-1 nil 3682864131 ("" (subtype-tcc) nil nil) nil
   nil))
 (wfTransfOptMand 0
  (wfTransfOptMand-1 nil 3682854506
   ("" (skolem 1 (pl fm2 P Q))
    (("" (expand syntaxTransfOptMand)
      (("" (bddsimp)
        (("1" (typepred pl)
          (("1" (expand wfPL)
            (("1" (skolem 1 c)
              (("1" (inst -1 c)
                (("1" (bddsimp)
                  (("1" (hide 2)
                    (("1" (expand semantics)
                      (("1" (bddsimp)
                        (("1" (expand satExpConsts)
                          (("1" (skolem 1 f)
                            (("1" (expand transfOptMand)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (inst -8 f)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand union)
                                      (("1"
                                        (expand member)
                                        (("1"
                                          (decompose-equality -3)
                                          (("1"
                                            (inst -1 f)
                                            (("1" (bddsimp) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand satImpConsts)
                          (("2" (skolem 1 n)
                            (("2" (bddsimp)
                              (("2"
                                (inst -6 n)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand transfOptMand)
                                    (("2"
                                      (bddsimp)
                                      (("2"
                                        (replace -2 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand wfFM)
          (("2" (typepred "F(pl)")
            (("2" (expand wfTree)
              (("2" (expand wfFormulae)
                (("2" (skolem 1 f)
                  (("2" (expand wfFM)
                    (("2" (expand wfTree)
                      (("2" (expand wfFormulae)
                        (("2" (inst -1 f)
                          (("2" (expand transfOptMand)
                            (("2" (flatten)
                              (("2"
                                (expand union)
                                (("2"
                                  (decompose-equality -2)
                                  (("2"
                                    (decompose-equality -3)
                                    (("1"
                                      (inst -1 f)
                                      (("1"
                                        (expand member)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (lemma wtFormSameFeatures)
                                            (("1"
                                              (inst -1 "F(pl)" fm2)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (inst -1 f)
                                                  (("1"
                                                    (bddsimp)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand wfTree)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand wfTree)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand singleton)
                                            (("2"
                                              (replace -2 2)
                                              (("2"
                                                (expand wt 2)
                                                (("2"
                                                  (expand wt 2)
                                                  (("2"
                                                    (bddsimp)
                                                    (("1"
                                                      (inst 2 Q)
                                                      (("1"
                                                        (inst -3 Q)
                                                        (("1"
                                                          (bddsimp)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 2 P)
                                                      (("2"
                                                        (inst -3 P)
                                                        (("2"
                                                          (bddsimp)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand member)
                                      (("2"
                                        (expand singleton)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand singleton)
                                      (("3" (propax) nil nil))
                                      nil)
                                     ("4"
                                      (expand singleton)
                                      (("4" (propax) nil nil))
                                      nil)
                                     ("5"
                                      (expand singleton)
                                      (("5" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (transfOptMand const-decl "bool" PartialRefTemplatesFM nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name type-decl nil Name nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (genFE const-decl "Formula_" FeatureModelSemantics nil)
    (getFeatures const-decl "set[Name]" FeatureModelSemantics nil)
    (addMandatory const-decl "bool" FeatureModelSemantics nil)
    (addOptional const-decl "bool" FeatureModelSemantics nil)
    (CK type-decl nil CK nil) (restrict const-decl "R" restrict nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CK nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfFormulae const-decl "boolean" FormulaTheory nil)
    (wtFormSameFeatures formula-decl nil FormulaTheory nil)
    (syntaxTransfOptMand const-decl "bool" PartialRefTemplatesFM nil))
   shostak))
 (transOptMandPartRefStrong_TCC1 0
  (transOptMandPartRefStrong_TCC1-1 nil 3682854490
   ("" (subtype-tcc) nil nil) nil nil))
 (transOptMandPartRefStrong 0
  (transOptMandPartRefStrong-1 nil 3682864564
   ("" (skolem 1 (pl fm2 s P Q))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1" (lemma SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (inst -1 "(semantics(K(pl))(A(pl))(c))")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand syntaxTransfOptMand)
          (("2" (flatten)
            (("2" (expand "<>")
              (("2" (decompose-equality)
                (("2" (expand subset?)
                  (("2" (skolem 1 c)
                    (("2" (expand member)
                      (("2" (bddsimp)
                        (("2" (inst -1 c)
                          (("2" (bddsimp)
                            (("2" (expand conditionsTransfOptMand)
                              (("2"
                                (inst -6 c)
                                (("2"
                                  (bddsimp)
                                  (("2"
                                    (expand semantics)
                                    (("2"
                                      (expand satImpConsts)
                                      (("2"
                                        (expand satExpConsts)
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (skolem 2 f)
                                            (("1"
                                              (inst -3 f)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (expand
                                                   transfOptMand)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand union)
                                                      (("1"
                                                        (decompose-equality
                                                         -4)
                                                        (("1"
                                                          (inst -1 f)
                                                          (("1"
                                                            (expand
                                                             member)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (expand
                                                                 singleton)
                                                                (("1"
                                                                  (expand
                                                                   satisfies
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     satisfies
                                                                     3)
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (skolem
                                                                         -5
                                                                         n)
                                                                        (("1"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (expand
                                                                             satisfies
                                                                             -10)
                                                                            (("1"
                                                                              (expand
                                                                               satisfies
                                                                               -10)
                                                                              (("1"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (syntaxMoveFeature1_TCC1 0
  (syntaxMoveFeature1_TCC1-1 nil 3684696249 ("" (subtype-tcc) nil nil)
   nil nil))
 (moveFeaturePartialRefinement1_TCC1 0
  (moveFeaturePartialRefinement1_TCC1-1 nil 3684696249
   ("" (subtype-tcc) nil nil) nil nil))
 (moveFeaturePartialRefinement1 0
  (moveFeaturePartialRefinement1-1 nil 3684696250
   ("" (skolem 1 (pl fm2 s P Q R))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1" (use SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (inst -1 "(semantics(K(pl))(A(pl))(c))")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (expand member)
              (("2" (bddsimp)
                (("2" (expand "<>")
                  (("2" (decompose-equality)
                    (("2" (inst -1 c)
                      (("2" (bddsimp)
                        (("2" (expand satisfies)
                          (("2" (expand satisfies)
                            (("2" (bddsimp)
                              (("1"
                                (expand semantics)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (expand satExpConsts)
                                    (("1"
                                      (expand syntaxMoveFeature1)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skolem 1 f)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (decompose-equality
                                                 -11)
                                                (("1"
                                                  (inst -1 f)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand union)
                                                      (("1"
                                                        (expand member)
                                                        (("1"
                                                          (expand
                                                           singleton)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               f)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 satisfies
                                                                 1)
                                                                (("2"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand satImpConsts)
                                    (("2"
                                      (skolem 1 n)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (inst -2 n)
                                          (("2"
                                            (bddsimp)
                                            (("2"
                                              (expand
                                               syntaxMoveFeature1)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (replace -9 1 RL)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand semantics)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (expand satExpConsts)
                                    (("1"
                                      (skolem 2 f)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand syntaxMoveFeature1)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (decompose-equality -10)
                                              (("1"
                                                (inst -1 f)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (expand union)
                                                    (("1"
                                                      (expand member)
                                                      (("1"
                                                        (expand
                                                         singleton)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (inst -5 f)
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("2"
                                                              (expand
                                                               satisfies)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (expand
                                                                   satisfies
                                                                   -12)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand satImpConsts)
                                    (("2"
                                      (skolem 2 n)
                                      (("2"
                                        (expand syntaxMoveFeature1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -2 n)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (replace -8 2 RL)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand subset?)
          (("3" (skolem 1 c)
            (("3" (expand member)
              (("3" (expand "<>")
                (("3" (decompose-equality)
                  (("3" (inst -1 c) (("3" (bddsimp) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assetRefinement formula-decl nil SPLrefinement nil)
    (Name type-decl nil Name nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Configuration type-eq-decl nil Name nil)
    (set type-eq-decl nil sets nil)
    (Formula_ type-decl nil Formula__adt nil)
    (FM type-eq-decl nil FeatureModel nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (Asset nonempty-type-decl nil Assets nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (genFE const-decl "Formula_" FeatureModelSemantics nil)
    (getFeatures const-decl "set[Name]" FeatureModelSemantics nil)
    (addMandatory const-decl "bool" FeatureModelSemantics nil)
    (addOptional const-decl "bool" FeatureModelSemantics nil)
    (CK type-decl nil CK nil) (restrict const-decl "R" restrict nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unique const-decl "bool" maps nil)
    (AM type-eq-decl nil AssetMapping nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CK nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (syntaxMoveFeature1 const-decl "bool" PartialRefTemplatesFM nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (strongPartialRefinement const-decl "bool" PartialRefStrong nil))
   shostak))
 (syntaxMoveFeature2_TCC1 0
  (syntaxMoveFeature2_TCC1-1 nil 3684748112 ("" (subtype-tcc) nil nil)
   nil nil))
 (moveFeaturePartialRefinement2_TCC1 0
  (moveFeaturePartialRefinement2_TCC1-1 nil 3684748112
   ("" (subtype-tcc) nil nil) nil nil))
 (moveFeaturePartialRefinement2 0
  (moveFeaturePartialRefinement2-1 nil 3684748112
   ("" (skolem 1 (pl fm2 s P Q R fs))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (expand prod)
            (("1" (bddsimp)
              (("1" (use SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (inst -1 "(semantics(K(pl))(A(pl))(c))")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (expand syntaxMoveFeature2)
              (("2" (flatten)
                (("2" (expand member)
                  (("2" (expand semantics)
                    (("2" (bddsimp)
                      (("1" (expand satExpConsts)
                        (("1" (skolem 3 f)
                          (("1" (bddsimp)
                            (("1" (decompose-equality -7)
                              (("1"
                                (inst -1 f)
                                (("1"
                                  (bddsimp)
                                  (("1"
                                    (expand union)
                                    (("1"
                                      (expand member)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (decompose-equality -8)
                                          (("1"
                                            (inst -1 f)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (decompose-equality -9)
                                                (("1"
                                                  (inst -1 c)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (expand "<>")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           semantics)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               satExpConsts)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 f)
                                                                (("1"
                                                                  (bddsimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand singleton)
                                          (("2"
                                            (replace -2 3)
                                            (("2"
                                              (expand satisfies 3)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (expand satisfies 3)
                                                  (("2"
                                                    (decompose-equality
                                                     -9)
                                                    (("2"
                                                      (inst -1 c)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand "<>")
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (expand
                                                               satisfies
                                                               -11)
                                                              (("2"
                                                                (skolem
                                                                 -11
                                                                 n)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -10)
                                                                    (("2"
                                                                      (expand
                                                                       satisfies
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         satisfies
                                                                         1)
                                                                        (("2"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (expand
                                                                             satisfies
                                                                             -4)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             1
                                                                             n)
                                                                            (("2"
                                                                              (bddsimp)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand satImpConsts)
                        (("2" (skolem 3 n2)
                          (("2" (bddsimp)
                            (("2" (expand "<>")
                              (("2"
                                (decompose-equality -8)
                                (("2"
                                  (inst -1 c)
                                  (("2"
                                    (bddsimp)
                                    (("2"
                                      (expand semantics)
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (expand satImpConsts)
                                          (("2"
                                            (inst -2 n2)
                                            (("2"
                                              (bddsimp)
                                              (("2"
                                                (replace -8 4 RL)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand subset?)
          (("3" (skolem 1 c)
            (("3" (expand member)
              (("3" (bddsimp)
                (("3" (expand "<>")
                  (("3" (decompose-equality)
                    (("3" (inst -1 c) (("3" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset? const-decl "bool" sets nil)
    (syntaxMoveFeature2 const-decl "bool" PartialRefTemplatesFM nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CK nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (restrict const-decl "R" restrict nil) (CK type-decl nil CK nil)
    (addOptional const-decl "bool" FeatureModelSemantics nil)
    (addMandatory const-decl "bool" FeatureModelSemantics nil)
    (getFeatures const-decl "set[Name]" FeatureModelSemantics nil)
    (genFE const-decl "Formula_" FeatureModelSemantics nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (assetRefinement formula-decl nil SPLrefinement nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement
     nil))
   shostak))
 (moveFeaturePartialRefinement3_TCC1 0
  (moveFeaturePartialRefinement3_TCC1-1 nil 3684749681
   ("" (subtype-tcc) nil nil) nil nil))
 (moveFeaturePartialRefinement3 0
  (moveFeaturePartialRefinement3-1 nil 3684749682
   ("" (skolem 1 (pl fm2 s M P Q R fs))
    (("" (expand strongPartialRefinement)
      (("" (bddsimp)
        (("1" (skolem 1 c)
          (("1" (bddsimp)
            (("1" (expand prod)
              (("1" (use SPLrefinement.assetRefinement)
                (("1" (expand preorder?)
                  (("1" (flatten)
                    (("1" (expand reflexive?)
                      (("1" (inst -1 "(semantics(K(pl))(A(pl))(c))")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand subset?)
          (("2" (skolem 1 c)
            (("2" (expand member)
              (("2" (bddsimp)
                (("2" (expand semantics)
                  (("2" (bddsimp)
                    (("1" (expand satExpConsts)
                      (("1" (skolem 1 f)
                        (("1" (bddsimp)
                          (("1" (expand "<>")
                            (("1" (expand syntaxMoveFeature3)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand add)
                                  (("1"
                                    (decompose-equality -9)
                                    (("1"
                                      (inst -1 f)
                                      (("1"
                                        (expand member)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (replace -2 5 RL)
                                            (("1"
                                              (expand satisfies 5)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (decompose-equality
                                                   -11)
                                                  (("1"
                                                    (inst -1 c)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand
                                                         satisfies
                                                         1)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand
                                                             satisfies
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality -10)
                                            (("2"
                                              (inst -1 f)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (decompose-equality
                                                   -11)
                                                  (("2"
                                                    (inst -1 c)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (expand
                                                         semantics)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             satExpConsts)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               f)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand satImpConsts)
                      (("2" (skolem 1 n)
                        (("2" (expand "<>")
                          (("2" (decompose-equality)
                            (("2" (inst -1 c)
                              (("2"
                                (bddsimp)
                                (("2"
                                  (expand semantics)
                                  (("2"
                                    (expand syntaxMoveFeature3)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand satImpConsts)
                                        (("2"
                                          (inst -2 n)
                                          (("2"
                                            (bddsimp)
                                            (("2"
                                              (replace -9 6 RL)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "<>")
          (("3" (decompose-equality)
            (("3" (expand subset?)
              (("3" (skolem 1 c)
                (("3" (expand member)
                  (("3" (bddsimp)
                    (("3" (inst -1 c) (("3" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strongPartialRefinement const-decl "bool" PartialRefStrong nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (satImpConsts const-decl "bool" FeatureModelSemantics nil)
    (satExpConsts const-decl "bool" FeatureModelSemantics nil)
    (syntaxMoveFeature3 const-decl "bool" PartialRefTemplatesFM nil)
    (add const-decl "(nonempty?)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (AND_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (AND?)]" Formula__adt nil)
    (NOT? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt nil)
    (NOT_FORMULA adt-constructor-decl "[Formula_ -> (NOT?)]"
     Formula__adt nil)
    (NAME_FORMULA adt-constructor-decl "[Name -> (NAME?)]" Formula__adt
     nil)
    (NAME? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (IMPLIES_FORMULA adt-constructor-decl
     "[[Formula_, Formula_] -> (IMPLIES?)]" Formula__adt nil)
    (IMPLIES? adt-recognizer-decl "[Formula_ -> boolean]" Formula__adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<> const-decl "set[Configuration]" FeatureModelSemantics nil)
    (prod const-decl "finite_sets[Asset].finite_set" SPLrefinement nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (AM type-eq-decl nil SPLrefinement nil)
    (ArbitrarySPL type-eq-decl nil SPLrefinement nil)
    (wfPL const-decl "bool" SPLrefinement nil)
    (PL type-eq-decl nil SPLrefinement nil)
    (semantics const-decl "finite_sets[Asset].finite_set" CK nil)
    (AM type-eq-decl nil AssetMapping nil)
    (unique const-decl "bool" maps nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (restrict const-decl "R" restrict nil) (CK type-decl nil CK nil)
    (addOptional const-decl "bool" FeatureModelSemantics nil)
    (addMandatory const-decl "bool" FeatureModelSemantics nil)
    (getFeatures const-decl "set[Name]" FeatureModelSemantics nil)
    (genFE const-decl "Formula_" FeatureModelSemantics nil)
    (wt def-decl "boolean" FormulaTheory nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (wfTree const-decl "bool" FeatureModel nil)
    (semantics const-decl "set[Configuration]" FeatureModelSemantics
     nil)
    (satisfies def-decl "boolean" FormulaTheory nil)
    (AssetName nonempty-type-decl nil Assets nil)
    (Asset nonempty-type-decl nil Assets nil)
    (WFM type-eq-decl nil FeatureModelSemantics nil)
    (wfFM const-decl "bool" FeatureModelSemantics nil)
    (FM type-eq-decl nil FeatureModel nil)
    (Formula_ type-decl nil Formula__adt nil)
    (set type-eq-decl nil sets nil)
    (Configuration type-eq-decl nil Name nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name type-decl nil Name nil)
    (assetRefinement formula-decl nil SPLrefinement nil))
   shostak)))

